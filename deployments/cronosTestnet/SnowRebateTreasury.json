{
  "address": "0x5b5ed957E6466CB57F0959693cfd9e5f3A12dFBb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_snowOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Snow",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SnowOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondVesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buybackAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimableSnow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getBondPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSnowReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBuyback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "redeemAssetsForBuyback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAdded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLP",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "setAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_primaryThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_primaryFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_staticPremiumEnabled",
          "type": "bool"
        }
      ],
      "name": "setBondParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setDaoOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snow",
          "type": "address"
        }
      ],
      "name": "setSnow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setSnowOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staticPremiumEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7921adc01b7c65aa613f83225457af1c8028ca92a0ef0433ca6ee49f835cdbe1",
  "receipt": {
    "to": null,
    "from": "0x4750751212D9266CB03dd381145b10adb058dfA9",
    "contractAddress": "0x5b5ed957E6466CB57F0959693cfd9e5f3A12dFBb",
    "transactionIndex": 0,
    "gasUsed": "2099973",
    "logsBloom": "0x
    "blockHash": "0xaf04420e65e0ac9351a7edd4fad97363f10fdbc7c792efd7811762a087c63896",
    "transactionHash": "0x7921adc01b7c65aa613f83225457af1c8028ca92a0ef0433ca6ee49f835cdbe1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5820707,
        "transactionHash": "0x7921adc01b7c65aa613f83225457af1c8028ca92a0ef0433ca6ee49f835cdbe1",
        "address": "0x5b5ed957E6466CB57F0959693cfd9e5f3A12dFBb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004750751212d9266cb03dd381145b10adb058dfa9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaf04420e65e0ac9351a7edd4fad97363f10fdbc7c792efd7811762a087c63896"
      }
    ],
    "blockNumber": 5820707,
    "cumulativeGasUsed": "2099973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDd5a54be18BC4a9D181D70Ab5728E42031Be836b",
    "0x52538ec86617eA8b1bcEFa4D8B4474812942abcE",
    "0x743aEC491a0ed048B371DbcF2bd9E77B4370B81b",
    "0xc3F95DeDacFEA28a3d657FfbCc74e9BaB6FB949B"
  ],
  "numDeployments": 3,
  "solcInputHash": "f77d36897e3ec85e8f1aed5cd075e017",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_snowOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Snow\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SnowOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableSnow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBondPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSnowReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"redeemAssetsForBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLP\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primaryThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_primaryFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_staticPremiumEnabled\",\"type\":\"bool\"}],\"name\":\"setBondParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setDaoOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snow\",\"type\":\"address\"}],\"name\":\"setSnow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setSnowOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticPremiumEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SnowRebateTreasury.sol\":\"SnowRebateTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin_v4.7.3/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin_v4.7.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin_v4.7.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin_v4.7.3/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SnowRebateTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin_v4.7.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin_v4.7.3/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IOracle8.sol\\\";\\nimport \\\"./interfaces/ITreasury8.sol\\\";\\nimport \\\"./interfaces/lib/IUniswapV2Pair8.sol\\\";\\n\\ncontract SnowRebateTreasury is Ownable {\\n    struct Asset {\\n        bool isAdded;\\n        uint256 multiplier; // 1100000 for 1.1 (10% discount if discount set to zero)\\n        address oracle;\\n        bool isLP;\\n        address pair;\\n    }\\n\\n    struct VestingSchedule {\\n        uint256 amount;\\n        uint256 period;\\n        uint256 end;\\n        uint256 claimed;\\n        uint256 lastClaimed;\\n    }\\n\\n    IERC20 public Snow;\\n    IOracle public SnowOracle;\\n    ITreasury public Treasury;\\n\\n    mapping(address => Asset) public assets;\\n    mapping(address => VestingSchedule) public vesting;\\n\\n    uint256 public discount; // 100000 for 10% discount or 1.1\\n    bool public staticPremiumEnabled = true;\\n\\n    uint256 public bondThreshold = 20 * 1e4;\\n    uint256 public bondFactor = 80 * 1e4;\\n    uint256 public secondaryThreshold = 70 * 1e4;\\n    uint256 public secondaryFactor = 15 * 1e4;\\n\\n    uint256 public bondVesting = 1 days;\\n    uint256 public totalVested = 0;\\n\\n    uint256 public lastBuyback;\\n    uint256 public buybackAmount = 10 * 1e4;\\n\\n    address public immutable USDC;\\n    uint256 public constant DENOMINATOR = 1e6;\\n\\n    address public daoOperator;\\n\\n    /*\\n     * ---------\\n     * MODIFIERS\\n     * ---------\\n     */\\n\\n    // Only allow a function to be called with a bondable asset\\n\\n    modifier onlyAsset(address _token) {\\n        require(\\n            assets[_token].isAdded,\\n            \\\"RebateTreasury: token is not a bondable asset\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyDaoOperator() {\\n        require(\\n            daoOperator == msg.sender,\\n            \\\"RebateTreasury: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * ------------------\\n     * EXTERNAL FUNCTIONS\\n     * ------------------\\n     */\\n\\n    // Initialize parameters\\n\\n    constructor(\\n        address _snow,\\n        address _snowOracle,\\n        address _treasury,\\n        address _usdc\\n    ) {\\n        Snow = IERC20(_snow);\\n        SnowOracle = IOracle(_snowOracle);\\n        Treasury = ITreasury(_treasury);\\n        USDC = _usdc;\\n        daoOperator = msg.sender;\\n    }\\n\\n    function daoFund() external view returns (address) {\\n        return Treasury.daoFund();\\n    }\\n\\n    function setDaoOperator(address _operator) external onlyOwner {\\n        daoOperator = _operator;\\n    }\\n\\n    // Bond asset for discounted Snow at bond rate\\n\\n    function bond(address _token, uint256 _amount) external onlyAsset(_token) {\\n        require(_amount > 0, \\\"RebateTreasury: invalid bond amount\\\");\\n        uint256 snowAmount = getSnowReturn(_token, _amount);\\n        require(\\n            snowAmount <= Snow.balanceOf(address(this)) - totalVested,\\n            \\\"RebateTreasury: insufficient snow balance\\\"\\n        );\\n\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        _claimVested(msg.sender);\\n\\n        VestingSchedule storage schedule = vesting[msg.sender];\\n        schedule.amount = schedule.amount - schedule.claimed + snowAmount;\\n        schedule.period = bondVesting;\\n        schedule.end = block.timestamp + bondVesting;\\n        schedule.claimed = 0;\\n        schedule.lastClaimed = block.timestamp;\\n        totalVested += snowAmount;\\n    }\\n\\n    // Claim available Snow rewards from bonding\\n\\n    function claimRewards() external {\\n        _claimVested(msg.sender);\\n    }\\n\\n    /*\\n     * --------------------\\n     * RESTRICTED FUNCTIONS\\n     * --------------------\\n     */\\n\\n    // Set Snow token\\n\\n    function setSnow(address _snow) external onlyOwner {\\n        Snow = IERC20(_snow);\\n    }\\n\\n    // Set Snow oracle\\n\\n    function setSnowOracle(address _oracle) external onlyOwner {\\n        SnowOracle = IOracle(_oracle);\\n    }\\n\\n    // Set Snow treasury\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        Treasury = ITreasury(_treasury);\\n    }\\n\\n    // Set bonding parameters of token\\n\\n    function setAsset(\\n        address _token,\\n        bool _isAdded,\\n        uint256 _multiplier,\\n        address _oracle,\\n        bool _isLP,\\n        address _pair\\n    ) external onlyOwner {\\n        require(_multiplier >= 1e6);\\n        assets[_token].isAdded = _isAdded;\\n        assets[_token].multiplier = _multiplier;\\n        assets[_token].oracle = _oracle;\\n        assets[_token].isLP = _isLP;\\n        assets[_token].pair = _pair;\\n    }\\n\\n    // Set bond pricing parameters\\n\\n    function setBondParameters(\\n        uint256 _primaryThreshold,\\n        uint256 _primaryFactor,\\n        uint256 _secondThreshold,\\n        uint256 _secondFactor,\\n        uint256 _vestingPeriod,\\n        uint256 _discount,\\n        bool _staticPremiumEnabled\\n    ) external onlyOwner {\\n        bondThreshold = _primaryThreshold;\\n        bondFactor = _primaryFactor;\\n        secondaryThreshold = _secondThreshold;\\n        secondaryFactor = _secondFactor;\\n        bondVesting = _vestingPeriod;\\n        discount = _discount;\\n        staticPremiumEnabled = _staticPremiumEnabled;\\n    }\\n\\n    // Redeem assets for buyback\\n\\n    function redeemAssetsForBuyback(address[] calldata _tokens)\\n        external\\n        onlyDaoOperator\\n    {\\n        uint256 epoch = Treasury.epoch();\\n        require(lastBuyback != epoch, \\\"RebateTreasury: already bought back\\\");\\n        lastBuyback = epoch;\\n\\n        for (uint256 t = 0; t < _tokens.length; t++) {\\n            require(\\n                assets[_tokens[t]].isAdded,\\n                \\\"RebateTreasury: invalid token\\\"\\n            );\\n            IERC20 Token = IERC20(_tokens[t]);\\n            Token.transfer(Treasury.daoFund(), Token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /*\\n     * ------------------\\n     * INTERNAL FUNCTIONS\\n     * ------------------\\n     */\\n\\n    function _claimVested(address _account) internal {\\n        VestingSchedule storage schedule = vesting[_account];\\n        if (schedule.amount == 0 || schedule.amount == schedule.claimed) return;\\n        if (\\n            block.timestamp <= schedule.lastClaimed ||\\n            schedule.lastClaimed >= schedule.end\\n        ) return;\\n\\n        uint256 duration = (\\n            block.timestamp > schedule.end ? schedule.end : block.timestamp\\n        ) - schedule.lastClaimed;\\n        uint256 claimable = (schedule.amount * duration) / schedule.period;\\n        if (claimable == 0) return;\\n\\n        schedule.claimed += claimable;\\n        schedule.lastClaimed = block.timestamp > schedule.end\\n            ? schedule.end\\n            : block.timestamp;\\n        totalVested -= claimable;\\n        Snow.transfer(_account, claimable);\\n    }\\n\\n    /*\\n     * --------------\\n     * VIEW FUNCTIONS\\n     * --------------\\n     */\\n\\n    // Calculate Snow return of bonding amount of token\\n\\n    function getSnowReturn(address _token, uint256 _amount)\\n        public\\n        view\\n        onlyAsset(_token)\\n        returns (uint256)\\n    {\\n        uint256 snowPrice = getSnowPrice();\\n        uint256 tokenPrice = getTokenPrice(_token);\\n        uint256 bondPremium = getBondPremium(_token);\\n        uint256 decimalsMultiplier = 10 **\\n            (18 - IERC20Metadata(_token).decimals());\\n        return\\n            (_amount * decimalsMultiplier * tokenPrice * bondPremium) /\\n            (DENOMINATOR * DENOMINATOR) /\\n            snowPrice;\\n    }\\n\\n    // Calculate premium for bonds based on bonding curve\\n\\n    function getBondPremium(address _token)\\n        public\\n        view\\n        onlyAsset(_token)\\n        returns (uint256)\\n    {\\n        if (staticPremiumEnabled) {\\n            return ((discount + DENOMINATOR) * assets[_token].multiplier);\\n        }\\n        uint256 premium;\\n        uint256 snowPrice = getSnowPrice();\\n        if (snowPrice < 1e17) return 0;\\n\\n        uint256 snowPremium = (snowPrice * DENOMINATOR) / 1e18 - DENOMINATOR;\\n        if (snowPremium < bondThreshold) return 0;\\n        if (snowPremium <= secondaryThreshold) {\\n            premium =\\n                ((snowPremium - bondThreshold) * bondFactor) /\\n                DENOMINATOR;\\n        } else {\\n            uint256 primaryPremium = ((secondaryThreshold - bondThreshold) *\\n                bondFactor) / DENOMINATOR;\\n            premium =\\n                primaryPremium +\\n                ((snowPremium - secondaryThreshold) * secondaryFactor) /\\n                DENOMINATOR;\\n        }\\n        return ((premium + DENOMINATOR) * assets[_token].multiplier);\\n    }\\n\\n    // Get SNOW price from Oracle\\n\\n    function getSnowPrice() public view returns (uint256) {\\n        return SnowOracle.consult(address(Snow), 1e18);\\n    }\\n\\n    // Get token price from Oracle\\n\\n    function getTokenPrice(address _token)\\n        public\\n        view\\n        onlyAsset(_token)\\n        returns (uint256)\\n    {\\n        Asset memory asset = assets[_token];\\n        IOracle Oracle = IOracle(asset.oracle);\\n        if (!asset.isLP) {\\n            return Oracle.consult(_token, 1e18);\\n        }\\n\\n        IUniswapV2Pair Pair = IUniswapV2Pair(asset.pair);\\n        uint256 totalPairSupply = Pair.totalSupply();\\n        address token0 = Pair.token0();\\n        address token1 = Pair.token1();\\n        (uint256 reserve0, uint256 reserve1, ) = Pair.getReserves();\\n\\n        if (token1 == USDC) {\\n            uint256 tokenPrice = Oracle.consult(token0, 1e18);\\n            return\\n                (tokenPrice * reserve0) /\\n                totalPairSupply +\\n                (reserve1 * 1e18) /\\n                totalPairSupply;\\n        } else {\\n            uint256 tokenPrice = Oracle.consult(token1, 1e18);\\n            return\\n                (tokenPrice * reserve1) /\\n                totalPairSupply +\\n                (reserve0 * 1e18) /\\n                totalPairSupply;\\n        }\\n    }\\n\\n    // Get claimable vested Snow for account\\n    function claimableSnow(address _account) external view returns (uint256) {\\n        VestingSchedule memory schedule = vesting[_account];\\n        if (\\n            block.timestamp <= schedule.lastClaimed ||\\n            schedule.lastClaimed >= schedule.end\\n        ) return 0;\\n        uint256 duration = (\\n            block.timestamp > schedule.end ? schedule.end : block.timestamp\\n        ) - schedule.lastClaimed;\\n        return (schedule.amount * duration) / schedule.period;\\n    }\\n}\\n\",\"keccak256\":\"0x77740a0026a6c842f37e24d880de4d5fcaa0563bff0786bd793e14730a539394\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle8.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut);\\n\\n    function getPegPrice() external view returns (int256);\\n\\n    function getPegPriceUpdated() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x63d652f31e2fd30ba0d68a844824212c053008dc25d8c1f13d8e3efa538cf198\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury8.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface ITreasury {\\n    function daoFund() external view returns (address);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getSnowPrice() external view returns (uint256);\\n\\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\\n\\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\\n}\\n\",\"keccak256\":\"0x32efab7471ca3b7af84b69df0be49b625617aac97a99446f0ef7839a24f29e6d\",\"license\":\"MIT\"},\"contracts/interfaces/lib/IUniswapV2Pair8.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x17d1f5e4d5c079920de671abe8771666fb12eb39e18ed9359f9b57585d1e4d29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526007805460ff1916600117905562030d40600855620c3500600955620aae60600a55620249f0600b5562015180600c556000600d55620186a0600f553480156200004d57600080fd5b50604051620021fe380380620021fe833981016040819052620000709162000140565b6200007b33620000d3565b600180546001600160a01b039586166001600160a01b0319918216179091556002805494861694821694909417909355600380549285169284169290921790915590911660805260108054909116331790556200019d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013b57600080fd5b919050565b600080600080608085870312156200015757600080fd5b620001628562000123565b9350620001726020860162000123565b9250620001826040860162000123565b9150620001926060860162000123565b905092959194509250565b60805161203e620001c060003960008181610396015261167f015261203e6000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806389a3027111610145578063d02641a0116100bd578063e388c4231161008c578063f0f4426011610071578063f0f44260146104e0578063f11b8188146104f3578063f2fde38b1461057c57600080fd5b8063e388c42314610468578063e3a7f783146104cd57600080fd5b8063d02641a014610430578063d411401d14610443578063d5ae728e1461044c578063db0a9c3d1461045f57600080fd5b8063918f8674116101145780639f882bd5116100f95780639f882bd5146103f7578063a515366a1461040a578063aa7de5091461041d57600080fd5b8063918f8674146103e45780639235f197146103ee57600080fd5b806389a30271146103915780638c9bc208146103b85780638d934f74146103cb5780638da5cb5b146103d357600080fd5b8063562e49fe116101d857806364354d65116101a75780636b6f4a9d1161018c5780636b6f4a9d1461036d578063715018a6146103765780638969ce391461037e57600080fd5b806364354d651461035157806367f77e9b1461036457600080fd5b8063562e49fe1461030f578063563df32f146103225780635f390ec01461033557806363fd7f491461034857600080fd5b806333920e291161022f578063372500ab11610214578063372500ab146102e157806338546e4c146102e95780633dd788a11461030657600080fd5b806333920e29146102d0578063367384ef146102d957600080fd5b80630e6fd74c14610261578063199cbc54146102765780631c73e44b146102925780632959fc0a146102a5575b600080fd5b61027461026f366004611b82565b61058f565b005b61027f600d5481565b6040519081526020015b60405180910390f35b61027f6102a0366004611bf7565b6105c5565b6002546102b8906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b61027f600c5481565b61027f61073a565b6102746107d6565b6007546102f69060ff1681565b6040519015158152602001610289565b61027f600e5481565b61027461031d366004611c23565b6107e1565b6003546102b8906001600160a01b031681565b610274610343366004611c47565b61080b565b61027f60085481565b61027461035f366004611c23565b610bea565b61027f600b5481565b61027f60065481565b610274610c14565b61027f61038c366004611c23565b610c26565b6102b87f000000000000000000000000000000000000000000000000000000000000000081565b6010546102b8906001600160a01b031681565b6102b8610cef565b6000546001600160a01b03166102b8565b61027f620f424081565b61027f600a5481565b610274610405366004611cbc565b610d7b565b610274610418366004611bf7565b610e1d565b61027f61042b366004611c23565b61111f565b61027f61043e366004611c23565b611333565b61027f60095481565b6001546102b8906001600160a01b031681565b61027f600f5481565b6104a5610476366004611c23565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610289565b6102746104db366004611c23565b61184e565b6102746104ee366004611c23565b611878565b610544610501366004611c23565b600460205260009081526040902080546001820154600283015460039093015460ff9283169391926001600160a01b0380841693600160a01b9004909116911685565b60408051951515865260208601949094526001600160a01b03928316938501939093521515606084015216608082015260a001610289565b61027461058a366004611c23565b6118a2565b610597611932565b600896909655600994909455600a92909255600b55600c556006556007805460ff1916911515919091179055565b6001600160a01b038216600090815260046020526040812054839060ff1661064a5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b60648201526084015b60405180910390fd5b600061065461073a565b9050600061066186611333565b9050600061066e8761111f565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190611d35565b6106df906012611d6e565b6106ea90600a611e71565b9050836106fa620f424080611e80565b8385610706858c611e80565b6107109190611e80565b61071a9190611e80565b6107249190611e97565b61072e9190611e97565b98975050505050505050565b600254600154604051633ddac95360e01b81526001600160a01b039182166004820152670de0b6b3a764000060248201526000929190911690633ddac95390604401602060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190611eb9565b71ffffffffffffffffffffffffffffffffffff16905090565b6107df3361198c565b565b6107e9611932565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b0316331461088b5760405162461bcd60e51b815260206004820152602a60248201527f52656261746554726561737572793a2063616c6c6572206973206e6f7420746860448201527f65206f70657261746f72000000000000000000000000000000000000000000006064820152608401610641565b600354604080517f900cf0cf00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163900cf0cf9160048083019260209291908290030181865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190611eed565b905080600e540361098b5760405162461bcd60e51b815260206004820152602360248201527f52656261746554726561737572793a20616c726561647920626f75676874206260448201527f61636b00000000000000000000000000000000000000000000000000000000006064820152608401610641565b600e81905560005b82811015610be457600460008585848181106109b1576109b1611f06565b90506020020160208101906109c69190611c23565b6001600160a01b0316815260208101919091526040016000205460ff16610a2f5760405162461bcd60e51b815260206004820152601d60248201527f52656261746554726561737572793a20696e76616c696420746f6b656e0000006044820152606401610641565b6000848483818110610a4357610a43611f06565b9050602002016020810190610a589190611c23565b9050806001600160a01b031663a9059cbb600360009054906101000a90046001600160a01b03166001600160a01b0316638d934f746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611f1c565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611eed565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190611f39565b50508080610bdc90611f56565b915050610993565b50505050565b610bf2611932565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b610c1c611932565b6107df6000611b24565b6001600160a01b0381166000908152600560209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905242111580610c9057508060400151816080015110155b15610c9e5750600092915050565b6000816080015182604001514211610cb65742610cbc565b82604001515b610cc69190611f6f565b90508160200151818360000151610cdd9190611e80565b610ce79190611e97565b949350505050565b600354604080517f8d934f7400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691638d934f749160048083019260209291908290030181865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190611f1c565b905090565b610d83611932565b620f4240841015610d9357600080fd5b6001600160a01b039586166000908152600460205260409020805460ff191695151595909517855560018501939093556002840180549286167fffffffffffffffffffffff00000000000000000000000000000000000000000090931692909217600160a01b91151591909102179055600390910180546001600160a01b03191691909216179055565b6001600160a01b038216600090815260046020526040902054829060ff16610e9d5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b60008211610f135760405162461bcd60e51b815260206004820152602360248201527f52656261746554726561737572793a20696e76616c696420626f6e6420616d6f60448201527f756e7400000000000000000000000000000000000000000000000000000000006064820152608401610641565b6000610f1f84846105c5565b600d546001546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f939190611eed565b610f9d9190611f6f565b8111156110125760405162461bcd60e51b815260206004820152602960248201527f52656261746554726561737572793a20696e73756666696369656e7420736e6f60448201527f772062616c616e636500000000000000000000000000000000000000000000006064820152608401610641565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af115801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190611f39565b506110ac3361198c565b3360009081526005602052604090206003810154815483916110cd91611f6f565b6110d79190611f82565b8155600c54600182018190556110ed9042611f82565b6002820155600060038201819055426004830155600d8054849290611113908490611f82565b90915550505050505050565b6001600160a01b038116600090815260046020526040812054829060ff1661119f5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b60075460ff16156111e8576001600160a01b0383166000908152600460205260409020600101546006546111d790620f424090611f82565b6111e19190611e80565b915061132d565b6000806111f361073a565b905067016345785d8a00008110156112105760009350505061132d565b6000620f4240670de0b6b3a76400006112298285611e80565b6112339190611e97565b61123d9190611f6f565b9050600854811015611255576000945050505061132d565b600a54811161128e57620f4240600954600854836112739190611f6f565b61127d9190611e80565b6112879190611e97565b92506112f4565b6000620f4240600954600854600a546112a79190611f6f565b6112b19190611e80565b6112bb9190611e97565b9050620f4240600b54600a54846112d29190611f6f565b6112dc9190611e80565b6112e69190611e97565b6112f09082611f82565b9350505b6001600160a01b03861660009081526004602052604090206001015461131d620f424085611f82565b6113279190611e80565b94505050505b50919050565b6001600160a01b038116600090815260046020526040812054829060ff166113b35760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b6001600160a01b03808416600090815260046020908152604091829020825160a081018452815460ff908116151582526001830154938201939093526002820154808616948201859052600160a01b90049092161515606083018190526003909101549093166080820152916114b857604051633ddac95360e01b81526001600160a01b038681166004830152670de0b6b3a76400006024830152821690633ddac95390604401602060405180830381865afa158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190611eb9565b71ffffffffffffffffffffffffffffffffffff169350505061132d565b6000826080015190506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115259190611eed565b90506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b9190611f1c565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190611f1c565b9050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190611fb8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361179457604051633ddac95360e01b81526001600160a01b038581166004830152670de0b6b3a7640000602483015260009190891690633ddac95390604401602060405180830381865afa15801561170e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117329190611eb9565b71ffffffffffffffffffffffffffffffffffff1690508561175b83670de0b6b3a7640000611e80565b6117659190611e97565b866117708584611e80565b61177a9190611e97565b6117849190611f82565b9a5050505050505050505061132d565b604051633ddac95360e01b81526001600160a01b038481166004830152670de0b6b3a7640000602483015260009190891690633ddac95390604401602060405180830381865afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118109190611eb9565b71ffffffffffffffffffffffffffffffffffff1690508561183984670de0b6b3a7640000611e80565b6118439190611e97565b866117708484611e80565b611856611932565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b611880611932565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6118aa611932565b6001600160a01b0381166119265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610641565b61192f81611b24565b50565b6000546001600160a01b031633146107df5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6001600160a01b0381166000908152600560205260409020805415806119b6575060038101548154145b156119bf575050565b8060040154421115806119da57508060020154816004015410155b156119e3575050565b60008160040154826002015442116119fb5742611a01565b82600201545b611a0b9190611f6f565b905060008260010154828460000154611a249190611e80565b611a2e9190611e97565b905080600003611a3e5750505050565b80836003016000828254611a529190611f82565b909155505060028301544211611a685742611a6e565b82600201545b836004018190555080600d6000828254611a889190611f6f565b90915550506001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1d9190611f39565b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801515811461192f57600080fd5b600080600080600080600060e0888a031215611b9d57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135915060c0880135611bd281611b74565b8091505092959891949750929550565b6001600160a01b038116811461192f57600080fd5b60008060408385031215611c0a57600080fd5b8235611c1581611be2565b946020939093013593505050565b600060208284031215611c3557600080fd5b8135611c4081611be2565b9392505050565b60008060208385031215611c5a57600080fd5b823567ffffffffffffffff80821115611c7257600080fd5b818501915085601f830112611c8657600080fd5b813581811115611c9557600080fd5b8660208260051b8501011115611caa57600080fd5b60209290920196919550909350505050565b60008060008060008060c08789031215611cd557600080fd5b8635611ce081611be2565b95506020870135611cf081611b74565b9450604087013593506060870135611d0781611be2565b92506080870135611d1781611b74565b915060a0870135611d2781611be2565b809150509295509295509295565b600060208284031215611d4757600080fd5b815160ff81168114611c4057600080fd5b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611d8757611d87611d58565b92915050565b600181815b80851115611dc8578160001904821115611dae57611dae611d58565b80851615611dbb57918102915b93841c9390800290611d92565b509250929050565b600082611ddf57506001611d87565b81611dec57506000611d87565b8160018114611e025760028114611e0c57611e28565b6001915050611d87565b60ff841115611e1d57611e1d611d58565b50506001821b611d87565b5060208310610133831016604e8410600b8410161715611e4b575081810a611d87565b611e558383611d8d565b8060001904821115611e6957611e69611d58565b029392505050565b6000611c4060ff841683611dd0565b8082028115828204841417611d8757611d87611d58565b600082611eb457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ecb57600080fd5b815171ffffffffffffffffffffffffffffffffffff81168114611c4057600080fd5b600060208284031215611eff57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f2e57600080fd5b8151611c4081611be2565b600060208284031215611f4b57600080fd5b8151611c4081611b74565b600060018201611f6857611f68611d58565b5060010190565b81810381811115611d8757611d87611d58565b80820180821115611d8757611d87611d58565b80516dffffffffffffffffffffffffffff81168114611fb357600080fd5b919050565b600080600060608486031215611fcd57600080fd5b611fd684611f95565b9250611fe460208501611f95565b9150604084015163ffffffff81168114611ffd57600080fd5b80915050925092509256fea2646970667358221220a491ee94a7c53c60396b67f0fe8900d48ec65fdcc331b0eae552eace9c0e0b1464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806389a3027111610145578063d02641a0116100bd578063e388c4231161008c578063f0f4426011610071578063f0f44260146104e0578063f11b8188146104f3578063f2fde38b1461057c57600080fd5b8063e388c42314610468578063e3a7f783146104cd57600080fd5b8063d02641a014610430578063d411401d14610443578063d5ae728e1461044c578063db0a9c3d1461045f57600080fd5b8063918f8674116101145780639f882bd5116100f95780639f882bd5146103f7578063a515366a1461040a578063aa7de5091461041d57600080fd5b8063918f8674146103e45780639235f197146103ee57600080fd5b806389a30271146103915780638c9bc208146103b85780638d934f74146103cb5780638da5cb5b146103d357600080fd5b8063562e49fe116101d857806364354d65116101a75780636b6f4a9d1161018c5780636b6f4a9d1461036d578063715018a6146103765780638969ce391461037e57600080fd5b806364354d651461035157806367f77e9b1461036457600080fd5b8063562e49fe1461030f578063563df32f146103225780635f390ec01461033557806363fd7f491461034857600080fd5b806333920e291161022f578063372500ab11610214578063372500ab146102e157806338546e4c146102e95780633dd788a11461030657600080fd5b806333920e29146102d0578063367384ef146102d957600080fd5b80630e6fd74c14610261578063199cbc54146102765780631c73e44b146102925780632959fc0a146102a5575b600080fd5b61027461026f366004611b82565b61058f565b005b61027f600d5481565b6040519081526020015b60405180910390f35b61027f6102a0366004611bf7565b6105c5565b6002546102b8906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b61027f600c5481565b61027f61073a565b6102746107d6565b6007546102f69060ff1681565b6040519015158152602001610289565b61027f600e5481565b61027461031d366004611c23565b6107e1565b6003546102b8906001600160a01b031681565b610274610343366004611c47565b61080b565b61027f60085481565b61027461035f366004611c23565b610bea565b61027f600b5481565b61027f60065481565b610274610c14565b61027f61038c366004611c23565b610c26565b6102b87f000000000000000000000000000000000000000000000000000000000000000081565b6010546102b8906001600160a01b031681565b6102b8610cef565b6000546001600160a01b03166102b8565b61027f620f424081565b61027f600a5481565b610274610405366004611cbc565b610d7b565b610274610418366004611bf7565b610e1d565b61027f61042b366004611c23565b61111f565b61027f61043e366004611c23565b611333565b61027f60095481565b6001546102b8906001600160a01b031681565b61027f600f5481565b6104a5610476366004611c23565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610289565b6102746104db366004611c23565b61184e565b6102746104ee366004611c23565b611878565b610544610501366004611c23565b600460205260009081526040902080546001820154600283015460039093015460ff9283169391926001600160a01b0380841693600160a01b9004909116911685565b60408051951515865260208601949094526001600160a01b03928316938501939093521515606084015216608082015260a001610289565b61027461058a366004611c23565b6118a2565b610597611932565b600896909655600994909455600a92909255600b55600c556006556007805460ff1916911515919091179055565b6001600160a01b038216600090815260046020526040812054839060ff1661064a5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b60648201526084015b60405180910390fd5b600061065461073a565b9050600061066186611333565b9050600061066e8761111f565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190611d35565b6106df906012611d6e565b6106ea90600a611e71565b9050836106fa620f424080611e80565b8385610706858c611e80565b6107109190611e80565b61071a9190611e80565b6107249190611e97565b61072e9190611e97565b98975050505050505050565b600254600154604051633ddac95360e01b81526001600160a01b039182166004820152670de0b6b3a764000060248201526000929190911690633ddac95390604401602060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190611eb9565b71ffffffffffffffffffffffffffffffffffff16905090565b6107df3361198c565b565b6107e9611932565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b0316331461088b5760405162461bcd60e51b815260206004820152602a60248201527f52656261746554726561737572793a2063616c6c6572206973206e6f7420746860448201527f65206f70657261746f72000000000000000000000000000000000000000000006064820152608401610641565b600354604080517f900cf0cf00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163900cf0cf9160048083019260209291908290030181865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190611eed565b905080600e540361098b5760405162461bcd60e51b815260206004820152602360248201527f52656261746554726561737572793a20616c726561647920626f75676874206260448201527f61636b00000000000000000000000000000000000000000000000000000000006064820152608401610641565b600e81905560005b82811015610be457600460008585848181106109b1576109b1611f06565b90506020020160208101906109c69190611c23565b6001600160a01b0316815260208101919091526040016000205460ff16610a2f5760405162461bcd60e51b815260206004820152601d60248201527f52656261746554726561737572793a20696e76616c696420746f6b656e0000006044820152606401610641565b6000848483818110610a4357610a43611f06565b9050602002016020810190610a589190611c23565b9050806001600160a01b031663a9059cbb600360009054906101000a90046001600160a01b03166001600160a01b0316638d934f746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611f1c565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611eed565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190611f39565b50508080610bdc90611f56565b915050610993565b50505050565b610bf2611932565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b610c1c611932565b6107df6000611b24565b6001600160a01b0381166000908152600560209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905242111580610c9057508060400151816080015110155b15610c9e5750600092915050565b6000816080015182604001514211610cb65742610cbc565b82604001515b610cc69190611f6f565b90508160200151818360000151610cdd9190611e80565b610ce79190611e97565b949350505050565b600354604080517f8d934f7400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691638d934f749160048083019260209291908290030181865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190611f1c565b905090565b610d83611932565b620f4240841015610d9357600080fd5b6001600160a01b039586166000908152600460205260409020805460ff191695151595909517855560018501939093556002840180549286167fffffffffffffffffffffff00000000000000000000000000000000000000000090931692909217600160a01b91151591909102179055600390910180546001600160a01b03191691909216179055565b6001600160a01b038216600090815260046020526040902054829060ff16610e9d5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b60008211610f135760405162461bcd60e51b815260206004820152602360248201527f52656261746554726561737572793a20696e76616c696420626f6e6420616d6f60448201527f756e7400000000000000000000000000000000000000000000000000000000006064820152608401610641565b6000610f1f84846105c5565b600d546001546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f939190611eed565b610f9d9190611f6f565b8111156110125760405162461bcd60e51b815260206004820152602960248201527f52656261746554726561737572793a20696e73756666696369656e7420736e6f60448201527f772062616c616e636500000000000000000000000000000000000000000000006064820152608401610641565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af115801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190611f39565b506110ac3361198c565b3360009081526005602052604090206003810154815483916110cd91611f6f565b6110d79190611f82565b8155600c54600182018190556110ed9042611f82565b6002820155600060038201819055426004830155600d8054849290611113908490611f82565b90915550505050505050565b6001600160a01b038116600090815260046020526040812054829060ff1661119f5760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b60075460ff16156111e8576001600160a01b0383166000908152600460205260409020600101546006546111d790620f424090611f82565b6111e19190611e80565b915061132d565b6000806111f361073a565b905067016345785d8a00008110156112105760009350505061132d565b6000620f4240670de0b6b3a76400006112298285611e80565b6112339190611e97565b61123d9190611f6f565b9050600854811015611255576000945050505061132d565b600a54811161128e57620f4240600954600854836112739190611f6f565b61127d9190611e80565b6112879190611e97565b92506112f4565b6000620f4240600954600854600a546112a79190611f6f565b6112b19190611e80565b6112bb9190611e97565b9050620f4240600b54600a54846112d29190611f6f565b6112dc9190611e80565b6112e69190611e97565b6112f09082611f82565b9350505b6001600160a01b03861660009081526004602052604090206001015461131d620f424085611f82565b6113279190611e80565b94505050505b50919050565b6001600160a01b038116600090815260046020526040812054829060ff166113b35760405162461bcd60e51b815260206004820152602d60248201527f52656261746554726561737572793a20746f6b656e206973206e6f742061206260448201526c1bdb9918589b1948185cdcd95d609a1b6064820152608401610641565b6001600160a01b03808416600090815260046020908152604091829020825160a081018452815460ff908116151582526001830154938201939093526002820154808616948201859052600160a01b90049092161515606083018190526003909101549093166080820152916114b857604051633ddac95360e01b81526001600160a01b038681166004830152670de0b6b3a76400006024830152821690633ddac95390604401602060405180830381865afa158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190611eb9565b71ffffffffffffffffffffffffffffffffffff169350505061132d565b6000826080015190506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115259190611eed565b90506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b9190611f1c565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190611f1c565b9050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190611fb8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361179457604051633ddac95360e01b81526001600160a01b038581166004830152670de0b6b3a7640000602483015260009190891690633ddac95390604401602060405180830381865afa15801561170e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117329190611eb9565b71ffffffffffffffffffffffffffffffffffff1690508561175b83670de0b6b3a7640000611e80565b6117659190611e97565b866117708584611e80565b61177a9190611e97565b6117849190611f82565b9a5050505050505050505061132d565b604051633ddac95360e01b81526001600160a01b038481166004830152670de0b6b3a7640000602483015260009190891690633ddac95390604401602060405180830381865afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118109190611eb9565b71ffffffffffffffffffffffffffffffffffff1690508561183984670de0b6b3a7640000611e80565b6118439190611e97565b866117708484611e80565b611856611932565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b611880611932565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6118aa611932565b6001600160a01b0381166119265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610641565b61192f81611b24565b50565b6000546001600160a01b031633146107df5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6001600160a01b0381166000908152600560205260409020805415806119b6575060038101548154145b156119bf575050565b8060040154421115806119da57508060020154816004015410155b156119e3575050565b60008160040154826002015442116119fb5742611a01565b82600201545b611a0b9190611f6f565b905060008260010154828460000154611a249190611e80565b611a2e9190611e97565b905080600003611a3e5750505050565b80836003016000828254611a529190611f82565b909155505060028301544211611a685742611a6e565b82600201545b836004018190555080600d6000828254611a889190611f6f565b90915550506001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1d9190611f39565b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801515811461192f57600080fd5b600080600080600080600060e0888a031215611b9d57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135915060c0880135611bd281611b74565b8091505092959891949750929550565b6001600160a01b038116811461192f57600080fd5b60008060408385031215611c0a57600080fd5b8235611c1581611be2565b946020939093013593505050565b600060208284031215611c3557600080fd5b8135611c4081611be2565b9392505050565b60008060208385031215611c5a57600080fd5b823567ffffffffffffffff80821115611c7257600080fd5b818501915085601f830112611c8657600080fd5b813581811115611c9557600080fd5b8660208260051b8501011115611caa57600080fd5b60209290920196919550909350505050565b60008060008060008060c08789031215611cd557600080fd5b8635611ce081611be2565b95506020870135611cf081611b74565b9450604087013593506060870135611d0781611be2565b92506080870135611d1781611b74565b915060a0870135611d2781611be2565b809150509295509295509295565b600060208284031215611d4757600080fd5b815160ff81168114611c4057600080fd5b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611d8757611d87611d58565b92915050565b600181815b80851115611dc8578160001904821115611dae57611dae611d58565b80851615611dbb57918102915b93841c9390800290611d92565b509250929050565b600082611ddf57506001611d87565b81611dec57506000611d87565b8160018114611e025760028114611e0c57611e28565b6001915050611d87565b60ff841115611e1d57611e1d611d58565b50506001821b611d87565b5060208310610133831016604e8410600b8410161715611e4b575081810a611d87565b611e558383611d8d565b8060001904821115611e6957611e69611d58565b029392505050565b6000611c4060ff841683611dd0565b8082028115828204841417611d8757611d87611d58565b600082611eb457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ecb57600080fd5b815171ffffffffffffffffffffffffffffffffffff81168114611c4057600080fd5b600060208284031215611eff57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f2e57600080fd5b8151611c4081611be2565b600060208284031215611f4b57600080fd5b8151611c4081611b74565b600060018201611f6857611f68611d58565b5060010190565b81810381811115611d8757611d87611d58565b80820180821115611d8757611d87611d58565b80516dffffffffffffffffffffffffffff81168114611fb357600080fd5b919050565b600080600060608486031215611fcd57600080fd5b611fd684611f95565b9250611fe460208501611f95565b9150604084015163ffffffff81168114611ffd57600080fd5b80915050925092509256fea2646970667358221220a491ee94a7c53c60396b67f0fe8900d48ec65fdcc331b0eae552eace9c0e0b1464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2929,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "Snow",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 2932,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "SnowOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOracle)8512"
      },
      {
        "astId": 2935,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "Treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITreasury)8549"
      },
      {
        "astId": 2940,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "assets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Asset)2915_storage)"
      },
      {
        "astId": 2945,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "vesting",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(VestingSchedule)2926_storage)"
      },
      {
        "astId": 2947,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "discount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2950,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "staticPremiumEnabled",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2955,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "bondThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2960,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "bondFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2965,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "secondaryThreshold",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2970,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "secondaryFactor",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2973,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "bondVesting",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2976,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "totalVested",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2978,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "lastBuyback",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2983,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "buybackAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2990,
        "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
        "label": "daoOperator",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)8512": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)8549": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Asset)2915_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SnowRebateTreasury.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)2915_storage"
      },
      "t_mapping(t_address,t_struct(VestingSchedule)2926_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SnowRebateTreasury.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)2926_storage"
      },
      "t_struct(Asset)2915_storage": {
        "encoding": "inplace",
        "label": "struct SnowRebateTreasury.Asset",
        "members": [
          {
            "astId": 2906,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "isAdded",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2908,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "multiplier",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2910,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "oracle",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2912,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "isLP",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2914,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "pair",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VestingSchedule)2926_storage": {
        "encoding": "inplace",
        "label": "struct SnowRebateTreasury.VestingSchedule",
        "members": [
          {
            "astId": 2917,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2919,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2921,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2923,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2925,
            "contract": "contracts/SnowRebateTreasury.sol:SnowRebateTreasury",
            "label": "lastClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}