{
  "address": "0x12043742F8C5cF20bB7f1969357be99EC66fCFEa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_glcr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RUNNING_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_REWARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardTime",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTime",
          "type": "uint256"
        }
      ],
      "name": "getGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glcr",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glcrPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accglcrPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        }
      ],
      "name": "setDaoFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setStakingTiersEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setTaxTiersEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableTaxes",
          "type": "bool"
        }
      ],
      "name": "setTaxesStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingTires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxTires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x253a3052bfc1b2b5b19b71f3257ae3c0060dd4f08b5f51032c42245ee595c32b",
  "receipt": {
    "to": null,
    "from": "0x4750751212D9266CB03dd381145b10adb058dfA9",
    "contractAddress": "0x12043742F8C5cF20bB7f1969357be99EC66fCFEa",
    "transactionIndex": 0,
    "gasUsed": "2239155",
    "logsBloom": "0x
    "blockHash": "0x3116bf13597f88899a6fa85145674e59b0a8e88ad5865fd9ea0093305735cc6e",
    "transactionHash": "0x253a3052bfc1b2b5b19b71f3257ae3c0060dd4f08b5f51032c42245ee595c32b",
    "logs": [],
    "blockNumber": 5819218,
    "cumulativeGasUsed": "2239155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6C8afC3EEe9bc98bAa8327Fac1073bE1c8B23729",
    "0xeDc5E564811b96Ec8ca2336895C66b3B88F9ef66",
    1667088000
  ],
  "numDeployments": 1,
  "solcInputHash": "58f94548748d66a94013e493b84ea0e7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_glcr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RUNNING_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTime\",\"type\":\"uint256\"}],\"name\":\"getGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glcr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glcrPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accglcrPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"}],\"name\":\"setDaoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStakingTiersEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTaxTiersEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableTaxes\",\"type\":\"bool\"}],\"name\":\"setTaxesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxTires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GlcrRewardPool.sol\":\"GlcrRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/GlcrRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of glcr (rewards).\\n// Instead, the governance will call glcr distributeReward method and send reward to this pool at the beginning.\\ncontract GlcrRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n    address public daoFund;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. glcrs to distribute per block.\\n        uint256 lastRewardTime; // Last time that glcrs distribution occurs.\\n        uint256 accglcrPerShare; // Accumulated glcrs per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardTime has passed\\n    }\\n\\n    IERC20 public immutable glcr;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when glcr mining starts.\\n    uint256 public immutable poolStartTime;\\n\\n    // The time when glcr mining ends.\\n    uint256 public immutable poolEndTime;\\n\\n    uint256 public immutable glcrPerSecond;\\n    uint256 public constant RUNNING_TIME = 52 weeks;\\n    uint256 public constant TOTAL_REWARDS = 21500 ether;\\n\\n    bool enableTaxes = true;\\n    uint256[] public stakingTires = [\\n        1 weeks,\\n        2 weeks,\\n        3 weeks,\\n        4 weeks,\\n        5 weeks\\n    ];\\n    uint256[] public withdrawTaxTires = [500, 400, 300, 200, 100];\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _glcr,\\n        address _daoFund,\\n        uint256 _poolStartTime\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        require(_glcr != address(0), \\\"_glcr\\\");\\n        require(_daoFund != address(0), \\\"_daoFund\\\");\\n        glcr = IERC20(_glcr);\\n        daoFund = _daoFund;\\n        glcrPerSecond = TOTAL_REWARDS.div(365).div(24).div(60).div(60);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = _poolStartTime + RUNNING_TIME;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            operator == msg.sender,\\n            \\\"glcrRewardPool: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(\\n                poolInfo[pid].token != _token,\\n                \\\"glcrRewardPool: existing pool?\\\"\\n            );\\n        }\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) ||\\n            (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                lastRewardTime: _lastRewardTime,\\n                accglcrPerShare: 0,\\n                isStarted: _isStarted\\n            })\\n        );\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's glcr allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return poolEndTime.sub(poolStartTime).mul(glcrPerSecond);\\n            return poolEndTime.sub(_fromTime).mul(glcrPerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return _toTime.sub(poolStartTime).mul(glcrPerSecond);\\n            return _toTime.sub(_fromTime).mul(glcrPerSecond);\\n        }\\n    }\\n\\n    // View function to see pending glcrs on frontend.\\n    function pendingShare(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accglcrPerShare = pool.accglcrPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _glcrReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            accglcrPerShare = accglcrPerShare.add(\\n                _glcrReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        return user.amount.mul(accglcrPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _glcrReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            pool.accglcrPerShare = pool.accglcrPerShare.add(\\n                _glcrReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user\\n                .amount\\n                .mul(pool.accglcrPerShare)\\n                .div(1e18)\\n                .sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeglcrTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accglcrPerShare).div(1e18);\\n\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    function setTaxesStatus(bool _enableTaxes) external onlyOperator {\\n        enableTaxes = _enableTaxes;\\n    }\\n\\n    function setStakingTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < stakingTires.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        if (_index > 0) {\\n            require(_value < stakingTires[_index - 1]);\\n        }\\n\\n        if (_index < stakingTires.length - 1) {\\n            require(_value > stakingTires[_index + 1]);\\n        }\\n\\n        stakingTires[_index] = _value;\\n    }\\n\\n    function setTaxTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < withdrawTaxTires.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        require(_value >= 10 && _value <= 2000, \\\"_value: out of range\\\"); // [0.1%, 20%]\\n        withdrawTaxTires[_index] = _value;\\n    }\\n\\n    function getWithdrawFeePercent() public view returns (uint256) {\\n        if (poolStartTime > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 timePassed = block.timestamp - poolStartTime;\\n        uint256 taxPercent = 100;\\n        for (uint256 i = 0; i < stakingTires.length; i++) {\\n            if (timePassed <= stakingTires[i]) {\\n                taxPercent = withdrawTaxTires[i];\\n                break;\\n            }\\n        }\\n\\n        return taxPercent;\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accglcrPerShare).div(1e18).sub(\\n            user.rewardDebt\\n        );\\n        if (_pending > 0) {\\n            safeglcrTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n\\n            uint256 taxAmount = _amount.mul(getWithdrawFeePercent()).div(10000);\\n            if (enableTaxes && taxAmount != 0) {\\n                pool.token.safeTransfer(daoFund, taxAmount);\\n                pool.token.safeTransfer(_sender, _amount.sub(taxAmount));\\n            } else {\\n                pool.token.safeTransfer(_sender, _amount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accglcrPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        uint256 taxAmount = _amount.mul(getWithdrawFeePercent()).div(10000);\\n        pool.token.safeTransfer(daoFund, taxAmount);\\n        pool.token.safeTransfer(msg.sender, _amount.sub(taxAmount));\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe glcr transfer function, just in case if rounding error causes pool to not have enough glcrs.\\n    function safeglcrTransfer(address _to, uint256 _amount) internal {\\n        uint256 _glcrBal = glcr.balanceOf(address(this));\\n        if (_glcrBal > 0) {\\n            if (_amount > _glcrBal) {\\n                glcr.safeTransfer(_to, _glcrBal);\\n            } else {\\n                glcr.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setDaoFund(address _daoFund) external onlyOperator {\\n        daoFund = _daoFund;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (glcr or lps) if less than 90 days after pool ends\\n            require(IERC20(_token) != glcr, \\\"glcr\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(IERC20(_token) != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        IERC20(_token).transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x79e5c09673aa52a8fa0cc1ae8bc86abd67cd01335cf0898725a58b88949945ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60006004556005805460ff191660011781556101a060405262093a806101009081526212750061012052621baf80610140526224ea0061016052622e248061018052620000509160069190620002a2565b506040805160a0810182526101f48152610190602082015261012c9181019190915260c860608201526064608082015262000090906007906005620002f9565b503480156200009e57600080fd5b50604051620025c1380380620025c183398181016040526060811015620000c457600080fd5b508051602082015160409092015190919042811162000113576040805162461bcd60e51b815260206004808301919091526024820152636c61746560e01b604482015290519081900360640190fd5b6001600160a01b03831662000157576040805162461bcd60e51b81526020600482015260056024820152642fb3b631b960d91b604482015290519081900360640190fd5b6001600160a01b0382166200019e576040805162461bcd60e51b815260206004820152600860248201526717d9185bd19d5b9960c21b604482015290519081900360640190fd5b606083901b6001600160601b031916608052600180546001600160a01b0319166001600160a01b0384161790556200020e603c620001fa818160188169048d8470181e3270000061016d62000239602090811b620019b717901c565b6200023960201b620019b71790919060201c565b60e05260a08190526301dfe2000160c0525050600080546001600160a01b0319163317905562000354565b600080821162000290576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816200029a57fe5b049392505050565b828054828255906000526020600020908101928215620002e7579160200282015b82811115620002e7578251829062ffffff16905591602001919060010190620002c3565b50620002f59291506200033d565b5090565b828054828255906000526020600020908101928215620002e7579160200282015b82811115620002e7578251829061ffff169055916020019190600101906200031a565b5b80821115620002f557600081556001016200033e565b60805160601c60a05160c05160e0516121b76200040a6000398061084852806108c3528061096752806109b552806115a05250806107c852806107ef528061086c52806108e7528061101c528061124e52508061081e528061088d528061090e528061093d528061098c52806112075280611361528061138f52806113b552806113de528061141b52806115c752806115f652508061079352806110495280611b395280611bed5280611c2652506121b76000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635312ea8e116101045780638d934f74116100a2578063b334988011610071578063b3349880146104cb578063b3ab15fb146104d3578063cf4b55cb146104f9578063e2bbb15814610525576101cf565b80638d934f741461043c57806393f1a40b1461044457806396805e5414610489578063b0e2a014146104c3576101cf565b80635f96dc11116100de5780635f96dc1114610405578063630b5ba11461040d5780636e271dd5146104155780637a42481a1461041d576101cf565b80635312ea8e146103aa57806354575af4146103c7578063570ca735146103fd576101cf565b80631cc9092a116101715780633406037f1161014b5780633406037f1461033c578063441a3e7014610344578063497b21db1461036757806351eb05a61461038d576101cf565b80631cc9092a146102cf578063231f0c6a146102f35780632c559d2714610316576101cf565b80631526fe27116101ad5780631526fe271461023357806317caf6f1146102875780631ab06ee51461028f5780631c6e253f146102b2576101cf565b806304567280146101d4578063070889b21461020357806309cf60911461022b575b600080fd5b6101f1600480360360208110156101ea57600080fd5b5035610548565b60408051918252519081900360200190f35b6102296004803603604081101561021957600080fd5b5060ff8135169060200135610566565b005b6101f1610677565b6102506004803603602081101561024957600080fd5b5035610685565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101f16106d0565b610229600480360360408110156102a557600080fd5b50803590602001356106d6565b6101f1600480360360208110156102c857600080fd5b5035610784565b6102d7610791565b604080516001600160a01b039092168252519081900360200190f35b6101f16004803603604081101561030957600080fd5b50803590602001356107b5565b6102296004803603602081101561032c57600080fd5b50356001600160a01b03166109e4565b6101f1610a5c565b6102296004803603604081101561035a57600080fd5b5080359060200135610a64565b6102296004803603604081101561037d57600080fd5b5060ff8135169060200135610ca2565b610229600480360360208110156103a357600080fd5b5035610dab565b610229600480360360208110156103c057600080fd5b5035610f09565b610229600480360360608110156103dd57600080fd5b506001600160a01b03813581169160208101359160409091013516610fd1565b6102d76111f6565b6101f1611205565b610229611229565b6101f161124c565b6102296004803603602081101561043357600080fd5b50351515611270565b6102d76112cc565b6104706004803603604081101561045a57600080fd5b50803590602001356001600160a01b03166112db565b6040805192835260208301919091528051918290030190f35b6102296004803603608081101561049f57600080fd5b508035906001600160a01b03602082013516906040810135151590606001356112ff565b6101f161159e565b6101f16115c2565b610229600480360360208110156104e957600080fd5b50356001600160a01b0316611673565b6101f16004803603604081101561050f57600080fd5b50803590602001356001600160a01b03166116eb565b6102296004803603604081101561053b57600080fd5b5080359060200135611847565b6006818154811061055557fe5b600091825260209091200154905081565b6000546001600160a01b031633146105af5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b60075460ff8316106105f25760405162461bcd60e51b815260040180806020018281038252602981526020018061212f6029913960400191505060405180910390fd5b600a811015801561060557506107d08111155b610656576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b8060078360ff168154811061066757fe5b6000918252602090912001555050565b69048d8470181e3270000081565b6002818154811061069257fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b610727611229565b60006002838154811061073657fe5b60009182526020909120600590910201600481015490915060ff161561077d57610779826107738360010154600454611a1e90919063ffffffff16565b90611a7b565b6004555b6001015550565b6007818154811061055557fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b60008183106107c6575060006109de565b7f0000000000000000000000000000000000000000000000000000000000000000821061090c577f0000000000000000000000000000000000000000000000000000000000000000831061081c575060006109de565b7f000000000000000000000000000000000000000000000000000000000000000083116108be576108b77f00000000000000000000000000000000000000000000000000000000000000006108b17f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a1e565b90611adc565b90506109de565b6108b77f00000000000000000000000000000000000000000000000000000000000000006108b17f000000000000000000000000000000000000000000000000000000000000000086611a1e565b7f0000000000000000000000000000000000000000000000000000000000000000821161093b575060006109de565b7f000000000000000000000000000000000000000000000000000000000000000083116109b0576108b77f00000000000000000000000000000000000000000000000000000000000000006108b1847f0000000000000000000000000000000000000000000000000000000000000000611a1e565b6108b77f00000000000000000000000000000000000000000000000000000000000000006108b18486611a1e565b92915050565b6000546001600160a01b03163314610a2d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6301dfe20081565b6000339050600060028481548110610a7857fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220805460059092029092019250841115610aff576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b610b0885610dab565b6000610b458260010154610b3f670de0b6b3a7640000610b3987600301548760000154611adc90919063ffffffff16565b906119b7565b90611a1e565b90508015610b9757610b578482611b35565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b8415610c37578154610ba99086611a1e565b82556000610bc5612710610b39610bbe6115c2565b8990611adc565b60055490915060ff168015610bd957508015155b15610c1f576001548454610bfa916001600160a01b03918216911683611c52565b610c1a85610c088884611a1e565b86546001600160a01b03169190611c52565b610c35565b8354610c35906001600160a01b03168688611c52565b505b60038301548254610c5591670de0b6b3a764000091610b3991611adc565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b6000546001600160a01b03163314610ceb5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b60065460ff831610610d2e5760405162461bcd60e51b815260040180806020018281038252602981526020018061212f6029913960400191505060405180910390fd5b60ff821615610d605760066001830360ff1681548110610d4a57fe5b90600052602060002001548110610d6057600080fd5b6006546000190160ff83161015610d9a5760068260010160ff1681548110610d8457fe5b90600052602060002001548111610d9a57600080fd5b8060068360ff168154811061066757fe5b600060028281548110610dba57fe5b9060005260206000209060050201905080600201544211610ddb5750610f06565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610e2557600080fd5b505afa158015610e39573d6000803e3d6000fd5b505050506040513d6020811015610e4f57600080fd5b5051905080610e65575042600290910155610f06565b600482015460ff16610e96576004808301805460ff191660019081179091558301549054610e9291611a7b565b6004555b60045415610efd576000610eae8360020154426107b5565b90506000610ecf600454610b39866001015485611adc90919063ffffffff16565b9050610ef5610eea84610b3984670de0b6b3a7640000611adc565b600386015490611a7b565b600385015550505b50426002909101555b50565b600060028281548110610f1857fe5b600091825260208083208584526003825260408085203386529092529083208054848255600182018590556005909302909101935091610f66612710610b39610f5f6115c2565b8590611adc565b6001548554919250610f85916001600160a01b03908116911683611c52565b610f9333610c088484611a1e565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b6000546001600160a01b0316331461101a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006276a7000142101561116e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156110d0576040805162461bcd60e51b8152602060048083019190915260248201527f676c637200000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b8181101561116b576000600282815481106110ed57fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415611162576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b506001016110d6565b50505b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b5050505050565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025460005b818110156112485761124081610dab565b60010161122f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146112b95760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6005805460ff1916911515919091179055565b6001546001600160a01b031681565b60036020908152600092835260408084209091529082529020805460019091015482565b6000546001600160a01b031633146113485760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b61135183611cd2565b811561135f5761135f611229565b7f000000000000000000000000000000000000000000000000000000000000000042101561140357806113b357507f00000000000000000000000000000000000000000000000000000000000000006113fe565b7f00000000000000000000000000000000000000000000000000000000000000008110156113fe57507f00000000000000000000000000000000000000000000000000000000000000005b611417565b80158061140f57504281105b156114175750425b60007f0000000000000000000000000000000000000000000000000000000000000000821115806114485750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace6005909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad2909201805460ff1916921515929092179091559091506111ef576004546115949086611a7b565b6004555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000427f000000000000000000000000000000000000000000000000000000000000000011156115f457506000611670565b7f00000000000000000000000000000000000000000000000000000000000000004203606460005b60065481101561166b576006818154811061163357fe5b90600052602060002001548311611663576007818154811061165157fe5b9060005260206000200154915061166b565b60010161161c565b509150505b90565b6000546001600160a01b031633146116bc5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080600284815481106116fb57fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b15801561177357600080fd5b505afa158015611787573d6000803e3d6000fd5b505050506040513d602081101561179d57600080fd5b50516002850154909150421180156117b457508015155b156118115760006117c98560020154426107b5565b905060006117ea600454610b39886001015485611adc90919063ffffffff16565b905061180c61180584610b3984670de0b6b3a7640000611adc565b8590611a7b565b935050505b61183c8360010154610b3f670de0b6b3a7640000610b39868860000154611adc90919063ffffffff16565b979650505050505050565b600033905060006002848154811061185b57fe5b600091825260208083208784526003825260408085206001600160a01b038816865290925292206005909102909101915061189585610dab565b8054156119215760006118cd8260010154610b3f670de0b6b3a7640000610b3987600301548760000154611adc90919063ffffffff16565b9050801561191f576118df8482611b35565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b831561194d57815461193e906001600160a01b0316843087611d6c565b805461194a9085611a7b565b81555b6003820154815461196b91670de0b6b3a764000091610b3991611adc565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000808211611a0d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a1657fe5b049392505050565b600082821115611a75576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015611ad5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082611aeb575060006109de565b82820282848281611af857fe5b0414611ad55760405162461bcd60e51b815260040180806020018281038252602181526020018061210e6021913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b505190508015611c4d5780821115611c1957611c146001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611c52565b611c4d565b611c4d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611c52565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611c4d908490611dfa565b60025460005b81811015611c4d57826001600160a01b031660028281548110611cf757fe5b60009182526020909120600590910201546001600160a01b03161415611d64576040805162461bcd60e51b815260206004820152601e60248201527f676c6372526577617264506f6f6c3a206578697374696e6720706f6f6c3f0000604482015290519081900360640190fd5b600101611cd8565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611df4908590611dfa565b50505050565b6060611e4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eab9092919063ffffffff16565b805190915015611c4d57808060200190516020811015611e6e57600080fd5b5051611c4d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612158602a913960400191505060405180910390fd5b6060611eba8484600085611ec2565b949350505050565b606082471015611f035760405162461bcd60e51b81526004018080602001828103825260268152602001806120be6026913960400191505060405180910390fd5b611f0c85612013565b611f5d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611f9c5780518252601f199092019160209182019101611f7d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ffe576040519150601f19603f3d011682016040523d82523d6000602084013e612003565b606091505b509150915061183c828286612019565b3b151590565b60608315612028575081611ad5565b8251156120385782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561208257818101518382015260200161206a565b50505050905090810190601f1680156120af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c676c6372526577617264506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f662074696572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201ba97de6f31c755e42e8a2bbf35ac0b8b40d1f5f186804c98326e9f9d81f102e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635312ea8e116101045780638d934f74116100a2578063b334988011610071578063b3349880146104cb578063b3ab15fb146104d3578063cf4b55cb146104f9578063e2bbb15814610525576101cf565b80638d934f741461043c57806393f1a40b1461044457806396805e5414610489578063b0e2a014146104c3576101cf565b80635f96dc11116100de5780635f96dc1114610405578063630b5ba11461040d5780636e271dd5146104155780637a42481a1461041d576101cf565b80635312ea8e146103aa57806354575af4146103c7578063570ca735146103fd576101cf565b80631cc9092a116101715780633406037f1161014b5780633406037f1461033c578063441a3e7014610344578063497b21db1461036757806351eb05a61461038d576101cf565b80631cc9092a146102cf578063231f0c6a146102f35780632c559d2714610316576101cf565b80631526fe27116101ad5780631526fe271461023357806317caf6f1146102875780631ab06ee51461028f5780631c6e253f146102b2576101cf565b806304567280146101d4578063070889b21461020357806309cf60911461022b575b600080fd5b6101f1600480360360208110156101ea57600080fd5b5035610548565b60408051918252519081900360200190f35b6102296004803603604081101561021957600080fd5b5060ff8135169060200135610566565b005b6101f1610677565b6102506004803603602081101561024957600080fd5b5035610685565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101f16106d0565b610229600480360360408110156102a557600080fd5b50803590602001356106d6565b6101f1600480360360208110156102c857600080fd5b5035610784565b6102d7610791565b604080516001600160a01b039092168252519081900360200190f35b6101f16004803603604081101561030957600080fd5b50803590602001356107b5565b6102296004803603602081101561032c57600080fd5b50356001600160a01b03166109e4565b6101f1610a5c565b6102296004803603604081101561035a57600080fd5b5080359060200135610a64565b6102296004803603604081101561037d57600080fd5b5060ff8135169060200135610ca2565b610229600480360360208110156103a357600080fd5b5035610dab565b610229600480360360208110156103c057600080fd5b5035610f09565b610229600480360360608110156103dd57600080fd5b506001600160a01b03813581169160208101359160409091013516610fd1565b6102d76111f6565b6101f1611205565b610229611229565b6101f161124c565b6102296004803603602081101561043357600080fd5b50351515611270565b6102d76112cc565b6104706004803603604081101561045a57600080fd5b50803590602001356001600160a01b03166112db565b6040805192835260208301919091528051918290030190f35b6102296004803603608081101561049f57600080fd5b508035906001600160a01b03602082013516906040810135151590606001356112ff565b6101f161159e565b6101f16115c2565b610229600480360360208110156104e957600080fd5b50356001600160a01b0316611673565b6101f16004803603604081101561050f57600080fd5b50803590602001356001600160a01b03166116eb565b6102296004803603604081101561053b57600080fd5b5080359060200135611847565b6006818154811061055557fe5b600091825260209091200154905081565b6000546001600160a01b031633146105af5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b60075460ff8316106105f25760405162461bcd60e51b815260040180806020018281038252602981526020018061212f6029913960400191505060405180910390fd5b600a811015801561060557506107d08111155b610656576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b8060078360ff168154811061066757fe5b6000918252602090912001555050565b69048d8470181e3270000081565b6002818154811061069257fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b610727611229565b60006002838154811061073657fe5b60009182526020909120600590910201600481015490915060ff161561077d57610779826107738360010154600454611a1e90919063ffffffff16565b90611a7b565b6004555b6001015550565b6007818154811061055557fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b60008183106107c6575060006109de565b7f0000000000000000000000000000000000000000000000000000000000000000821061090c577f0000000000000000000000000000000000000000000000000000000000000000831061081c575060006109de565b7f000000000000000000000000000000000000000000000000000000000000000083116108be576108b77f00000000000000000000000000000000000000000000000000000000000000006108b17f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611a1e565b90611adc565b90506109de565b6108b77f00000000000000000000000000000000000000000000000000000000000000006108b17f000000000000000000000000000000000000000000000000000000000000000086611a1e565b7f0000000000000000000000000000000000000000000000000000000000000000821161093b575060006109de565b7f000000000000000000000000000000000000000000000000000000000000000083116109b0576108b77f00000000000000000000000000000000000000000000000000000000000000006108b1847f0000000000000000000000000000000000000000000000000000000000000000611a1e565b6108b77f00000000000000000000000000000000000000000000000000000000000000006108b18486611a1e565b92915050565b6000546001600160a01b03163314610a2d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6301dfe20081565b6000339050600060028481548110610a7857fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220805460059092029092019250841115610aff576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b610b0885610dab565b6000610b458260010154610b3f670de0b6b3a7640000610b3987600301548760000154611adc90919063ffffffff16565b906119b7565b90611a1e565b90508015610b9757610b578482611b35565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b8415610c37578154610ba99086611a1e565b82556000610bc5612710610b39610bbe6115c2565b8990611adc565b60055490915060ff168015610bd957508015155b15610c1f576001548454610bfa916001600160a01b03918216911683611c52565b610c1a85610c088884611a1e565b86546001600160a01b03169190611c52565b610c35565b8354610c35906001600160a01b03168688611c52565b505b60038301548254610c5591670de0b6b3a764000091610b3991611adc565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b6000546001600160a01b03163314610ceb5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b60065460ff831610610d2e5760405162461bcd60e51b815260040180806020018281038252602981526020018061212f6029913960400191505060405180910390fd5b60ff821615610d605760066001830360ff1681548110610d4a57fe5b90600052602060002001548110610d6057600080fd5b6006546000190160ff83161015610d9a5760068260010160ff1681548110610d8457fe5b90600052602060002001548111610d9a57600080fd5b8060068360ff168154811061066757fe5b600060028281548110610dba57fe5b9060005260206000209060050201905080600201544211610ddb5750610f06565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610e2557600080fd5b505afa158015610e39573d6000803e3d6000fd5b505050506040513d6020811015610e4f57600080fd5b5051905080610e65575042600290910155610f06565b600482015460ff16610e96576004808301805460ff191660019081179091558301549054610e9291611a7b565b6004555b60045415610efd576000610eae8360020154426107b5565b90506000610ecf600454610b39866001015485611adc90919063ffffffff16565b9050610ef5610eea84610b3984670de0b6b3a7640000611adc565b600386015490611a7b565b600385015550505b50426002909101555b50565b600060028281548110610f1857fe5b600091825260208083208584526003825260408085203386529092529083208054848255600182018590556005909302909101935091610f66612710610b39610f5f6115c2565b8590611adc565b6001548554919250610f85916001600160a01b03908116911683611c52565b610f9333610c088484611a1e565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b6000546001600160a01b0316331461101a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006276a7000142101561116e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156110d0576040805162461bcd60e51b8152602060048083019190915260248201527f676c637200000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b8181101561116b576000600282815481106110ed57fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415611162576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b506001016110d6565b50505b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b5050505050565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025460005b818110156112485761124081610dab565b60010161122f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146112b95760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6005805460ff1916911515919091179055565b6001546001600160a01b031681565b60036020908152600092835260408084209091529082529020805460019091015482565b6000546001600160a01b031633146113485760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b61135183611cd2565b811561135f5761135f611229565b7f000000000000000000000000000000000000000000000000000000000000000042101561140357806113b357507f00000000000000000000000000000000000000000000000000000000000000006113fe565b7f00000000000000000000000000000000000000000000000000000000000000008110156113fe57507f00000000000000000000000000000000000000000000000000000000000000005b611417565b80158061140f57504281105b156114175750425b60007f0000000000000000000000000000000000000000000000000000000000000000821115806114485750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace6005909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad2909201805460ff1916921515929092179091559091506111ef576004546115949086611a7b565b6004555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000427f000000000000000000000000000000000000000000000000000000000000000011156115f457506000611670565b7f00000000000000000000000000000000000000000000000000000000000000004203606460005b60065481101561166b576006818154811061163357fe5b90600052602060002001548311611663576007818154811061165157fe5b9060005260206000200154915061166b565b60010161161c565b509150505b90565b6000546001600160a01b031633146116bc5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e4602a913960400191505060405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080600284815481106116fb57fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b15801561177357600080fd5b505afa158015611787573d6000803e3d6000fd5b505050506040513d602081101561179d57600080fd5b50516002850154909150421180156117b457508015155b156118115760006117c98560020154426107b5565b905060006117ea600454610b39886001015485611adc90919063ffffffff16565b905061180c61180584610b3984670de0b6b3a7640000611adc565b8590611a7b565b935050505b61183c8360010154610b3f670de0b6b3a7640000610b39868860000154611adc90919063ffffffff16565b979650505050505050565b600033905060006002848154811061185b57fe5b600091825260208083208784526003825260408085206001600160a01b038816865290925292206005909102909101915061189585610dab565b8054156119215760006118cd8260010154610b3f670de0b6b3a7640000610b3987600301548760000154611adc90919063ffffffff16565b9050801561191f576118df8482611b35565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b831561194d57815461193e906001600160a01b0316843087611d6c565b805461194a9085611a7b565b81555b6003820154815461196b91670de0b6b3a764000091610b3991611adc565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000808211611a0d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a1657fe5b049392505050565b600082821115611a75576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015611ad5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082611aeb575060006109de565b82820282848281611af857fe5b0414611ad55760405162461bcd60e51b815260040180806020018281038252602181526020018061210e6021913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b505190508015611c4d5780821115611c1957611c146001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611c52565b611c4d565b611c4d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611c52565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611c4d908490611dfa565b60025460005b81811015611c4d57826001600160a01b031660028281548110611cf757fe5b60009182526020909120600590910201546001600160a01b03161415611d64576040805162461bcd60e51b815260206004820152601e60248201527f676c6372526577617264506f6f6c3a206578697374696e6720706f6f6c3f0000604482015290519081900360640190fd5b600101611cd8565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611df4908590611dfa565b50505050565b6060611e4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eab9092919063ffffffff16565b805190915015611c4d57808060200190516020811015611e6e57600080fd5b5051611c4d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612158602a913960400191505060405180910390fd5b6060611eba8484600085611ec2565b949350505050565b606082471015611f035760405162461bcd60e51b81526004018080602001828103825260268152602001806120be6026913960400191505060405180910390fd5b611f0c85612013565b611f5d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611f9c5780518252601f199092019160209182019101611f7d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ffe576040519150601f19603f3d011682016040523d82523d6000602084013e612003565b606091505b509150915061183c828286612019565b3b151590565b60608315612028575081611ad5565b8251156120385782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561208257818101518382015260200161206a565b50505050905090810190601f1680156120af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c676c6372526577617264506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f662074696572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201ba97de6f31c755e42e8a2bbf35ac0b8b40d1f5f186804c98326e9f9d81f102e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4777,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "operator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4779,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "daoFund",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4800,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)4795_storage)dyn_storage"
      },
      {
        "astId": 4806,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4784_storage))"
      },
      {
        "astId": 4809,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4824,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "enableTaxes",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 4833,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "stakingTires",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4842,
        "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
        "label": "withdrawTaxTires",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)4795_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)4795_storage",
        "encoding": "dynamic_array",
        "label": "struct GlcrRewardPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1177": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4784_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GlcrRewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4784_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4784_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct GlcrRewardPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)4784_storage)"
      },
      "t_struct(PoolInfo)4795_storage": {
        "encoding": "inplace",
        "label": "struct GlcrRewardPool.PoolInfo",
        "members": [
          {
            "astId": 4786,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1177"
          },
          {
            "astId": 4788,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4790,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4792,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "accglcrPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4794,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "isStarted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)4784_storage": {
        "encoding": "inplace",
        "label": "struct GlcrRewardPool.UserInfo",
        "members": [
          {
            "astId": 4781,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4783,
            "contract": "contracts/GlcrRewardPool.sol:GlcrRewardPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}