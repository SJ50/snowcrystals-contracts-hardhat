{
  "address": "0x1f29C402B3B9Ac0fe0aF60ee9eb74986a4A3e621",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "CreateNode",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "allocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDev",
          "type": "address"
        }
      ],
      "name": "changeDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTreasuryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nodeTier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numNodes",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalancePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDayDripEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDistributionRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getNodes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNodes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isMaxPayout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDripTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReturnPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nodeId",
          "type": "uint256"
        }
      ],
      "name": "numNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setDripRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setLastDripTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setMaxReturnPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_nodes",
          "type": "uint256[]"
        }
      ],
      "name": "setNodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tierAllocPoints",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setTierValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total_deposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total_claims",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "last_distPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct GlcrNode.User",
          "name": "_user",
          "type": "tuple"
        }
      ],
      "name": "setUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributePoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIndices",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total_deposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_claims",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "last_distPoints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb2750582ec2b208ba8230f2ae089f0c2ad970c90b5b5b03fa460bb39f5d26a0b",
  "receipt": {
    "to": null,
    "from": "0x4750751212D9266CB03dd381145b10adb058dfA9",
    "contractAddress": "0x1f29C402B3B9Ac0fe0aF60ee9eb74986a4A3e621",
    "transactionIndex": 0,
    "gasUsed": "2494995",
    "logsBloom": "0x
    "blockHash": "0x915e1c529b13e0ad948f703a6b12befc226166dd5c98a6e04f01845653fd52e4",
    "transactionHash": "0xb2750582ec2b208ba8230f2ae089f0c2ad970c90b5b5b03fa460bb39f5d26a0b",
    "logs": [],
    "blockNumber": 5848707,
    "cumulativeGasUsed": "2494995",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1668038400,
    "0xB4586CAb2e3Aa47A3586854AfD35592a78D62cF3"
  ],
  "numDeployments": 1,
  "solcInputHash": "63674f7f37222e2e62c35a0995ff0fc0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CreateNode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numNodes\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDayDripEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDistributionRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getNodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isMaxPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReturnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nodeId\",\"type\":\"uint256\"}],\"name\":\"numNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDripRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setLastDripTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxReturnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodes\",\"type\":\"uint256[]\"}],\"name\":\"setNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tierAllocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setTierValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct GlcrNode.User\",\"name\":\"_user\",\"type\":\"tuple\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIndices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GlcrNode.sol\":\"GlcrNode\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/GlcrNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\n\\ncontract GlcrNode {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public TOKEN;\\n    uint256[] public tierAllocPoints = [1 ether, 1 ether, 1 ether];\\n    uint256[] public tierAmounts = [0.00002 ether, 1 ether, 1 ether];\\n    struct User {\\n        uint256 total_deposits;\\n        uint256 total_claims;\\n        uint256 last_distPoints;\\n    }\\n\\n    event CreateNode(uint256 timestamp, address account, uint256 num);\\n\\n    address private dev;\\n\\n    mapping(address => User) public users;\\n    mapping(address => mapping(uint256 => uint256)) public nodes;\\n    mapping(uint256 => uint256) public totalNodes;\\n    address[] public userIndices;\\n\\n    uint256 public total_deposited;\\n    uint256 public total_claimed;\\n    uint256 public total_rewards;\\n    uint256 public treasury_rewards;\\n    uint256 public treasuryFeePercent;\\n    uint256 public totalDistributeRewards;\\n    uint256 public totalDistributePoints;\\n    uint256 public maxReturnPercent;\\n    uint256 public dripRate;\\n    uint256 public lastDripTime;\\n    uint256 public startTime;\\n    bool public enabled;\\n    uint256 public constant MULTIPLIER = 10e18;\\n\\n    constructor(uint256 _startTime, address _token) public {\\n        maxReturnPercent = 500;\\n        dripRate = 2100000;\\n        treasuryFeePercent = 25;\\n\\n        lastDripTime = _startTime > block.timestamp\\n            ? _startTime\\n            : block.timestamp;\\n        startTime = _startTime;\\n        enabled = true;\\n        TOKEN = IERC20(_token);\\n        dev = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Do not send CRO.\\\");\\n    }\\n\\n    modifier onlyDev() {\\n        require(msg.sender == dev, \\\"Caller is not the dev!\\\");\\n        _;\\n    }\\n\\n    function changeDev(address payable newDev) external onlyDev {\\n        require(newDev != address(0), \\\"Zero address\\\");\\n        dev = newDev;\\n    }\\n\\n    function claimTreasuryRewards() external {\\n        if (treasury_rewards > 0) {\\n            TOKEN.safeTransfer(dev, treasury_rewards);\\n            treasury_rewards = 0;\\n        }\\n    }\\n\\n    function setStartTime(uint256 _startTime) external onlyDev {\\n        startTime = _startTime;\\n    }\\n\\n    function setEnabled(bool _enabled) external onlyDev {\\n        enabled = _enabled;\\n    }\\n\\n    function setTreasuryFeePercent(uint256 percent) external onlyDev {\\n        treasuryFeePercent = percent;\\n    }\\n\\n    function setDripRate(uint256 rate) external onlyDev {\\n        dripRate = rate;\\n    }\\n\\n    function setLastDripTime(uint256 timestamp) external onlyDev {\\n        lastDripTime = timestamp;\\n    }\\n\\n    function setMaxReturnPercent(uint256 percent) external onlyDev {\\n        maxReturnPercent = percent;\\n    }\\n\\n    function setTierValues(\\n        uint256[] memory _tierAllocPoints,\\n        uint256[] memory _tierAmounts\\n    ) external onlyDev {\\n        require(\\n            _tierAllocPoints.length == _tierAmounts.length,\\n            \\\"Length mismatch\\\"\\n        );\\n        tierAllocPoints = _tierAllocPoints;\\n        tierAmounts = _tierAmounts;\\n    }\\n\\n    function setUser(address _addr, User memory _user) external onlyDev {\\n        total_deposited = total_deposited.sub(users[_addr].total_deposits).add(\\n            _user.total_deposits\\n        );\\n        total_claimed = total_claimed.sub(users[_addr].total_claims).add(\\n            _user.total_claims\\n        );\\n        users[_addr].total_deposits = _user.total_deposits;\\n        users[_addr].total_claims = _user.total_claims;\\n    }\\n\\n    function setNodes(address _user, uint256[] memory _nodes) external onlyDev {\\n        for (uint256 i = 0; i < _nodes.length; i++) {\\n            totalNodes[i] = totalNodes[i].sub(nodes[_user][i]).add(_nodes[i]);\\n            nodes[_user][i] = _nodes[i];\\n        }\\n    }\\n\\n    function totalAllocPoints() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(totalNodes[i]));\\n        }\\n        return total;\\n    }\\n\\n    function allocPoints(address account) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(nodes[account][i]));\\n        }\\n        return total;\\n    }\\n\\n    function getDistributionRewards(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (isMaxPayout(account)) return 0;\\n\\n        uint256 newDividendPoints = totalDistributePoints.sub(\\n            users[account].last_distPoints\\n        );\\n        uint256 distribute = allocPoints(account).mul(newDividendPoints).div(\\n            MULTIPLIER\\n        );\\n        return distribute > total_rewards ? total_rewards : distribute;\\n    }\\n\\n    function getTotalRewards(address _sender) public view returns (uint256) {\\n        if (users[_sender].total_deposits == 0) return 0;\\n\\n        uint256 rewards = getDistributionRewards(_sender).add(\\n            getRewardDrip().mul(allocPoints(_sender)).div(totalAllocPoints())\\n        );\\n        uint256 totalClaims = users[_sender].total_claims;\\n        uint256 maxPay = maxPayout(_sender);\\n\\n        // Payout remaining if exceeds max payout\\n        return\\n            totalClaims.add(rewards) > maxPay\\n                ? maxPay.sub(totalClaims)\\n                : rewards;\\n    }\\n\\n    function create(uint256 nodeTier, uint256 numNodes) external {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        claim();\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function claim() public {\\n        dripRewards();\\n\\n        address _sender = msg.sender;\\n        uint256 _rewards = getDistributionRewards(_sender);\\n\\n        if (_rewards > 0) {\\n            total_rewards = total_rewards.sub(_rewards);\\n            uint256 totalClaims = users[_sender].total_claims;\\n            uint256 maxPay = maxPayout(_sender);\\n\\n            // Payout remaining if exceeds max payout\\n            if (totalClaims.add(_rewards) > maxPay) {\\n                _rewards = maxPay.sub(totalClaims);\\n            }\\n\\n            users[_sender].total_claims = users[_sender].total_claims.add(\\n                _rewards\\n            );\\n            total_claimed = total_claimed.add(_rewards);\\n\\n            IERC20(TOKEN).safeTransfer(_sender, _rewards);\\n\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n    }\\n\\n    function _compound(uint256 nodeTier, uint256 numNodes) internal {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function compound() public {\\n        uint256 rewardsPending = getTotalRewards(msg.sender);\\n        require(rewardsPending >= tierAmounts[0], \\\"Not enough to compound\\\");\\n        uint256 numPossible = rewardsPending.div(tierAmounts[0]);\\n        claim();\\n        _compound(0, numPossible);\\n    }\\n\\n    function maxPayout(address _sender) public view returns (uint256) {\\n        return users[_sender].total_deposits.mul(maxReturnPercent).div(100);\\n    }\\n\\n    function isMaxPayout(address _sender) public view returns (bool) {\\n        return users[_sender].total_claims >= maxPayout(_sender);\\n    }\\n\\n    function _disperse(uint256 amount) internal {\\n        if (amount > 0) {\\n            totalDistributePoints = totalDistributePoints.add(\\n                amount.mul(MULTIPLIER).div(totalAllocPoints())\\n            );\\n            totalDistributeRewards = totalDistributeRewards.add(amount);\\n            total_rewards = total_rewards.add(amount);\\n        }\\n    }\\n\\n    function dripRewards() public {\\n        uint256 drip = getRewardDrip();\\n\\n        if (drip > 0) {\\n            _disperse(drip);\\n            lastDripTime = block.timestamp;\\n        }\\n    }\\n\\n    function getRewardDrip() public view returns (uint256) {\\n        if (lastDripTime < block.timestamp) {\\n            uint256 poolBalance = getBalancePool();\\n            uint256 secondsPassed = block.timestamp.sub(lastDripTime);\\n            uint256 drip = secondsPassed.mul(poolBalance).div(dripRate);\\n\\n            if (drip > poolBalance) {\\n                drip = poolBalance;\\n            }\\n\\n            return drip;\\n        }\\n        return 0;\\n    }\\n\\n    function getDayDripEstimate(address _user) external view returns (uint256) {\\n        return\\n            allocPoints(_user) > 0 && !isMaxPayout(_user)\\n                ? getBalancePool()\\n                    .mul(86400)\\n                    .mul(allocPoints(_user))\\n                    .div(totalAllocPoints())\\n                    .div(dripRate)\\n                : 0;\\n    }\\n\\n    function total_users() external view returns (uint256) {\\n        return userIndices.length;\\n    }\\n\\n    function numNodes(address _sender, uint256 _nodeId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return nodes[_sender][_nodeId];\\n    }\\n\\n    function getNodes(address _sender)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory userNodes = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            userNodes[i] = userNodes[i].add(nodes[_sender][i]);\\n        }\\n        return userNodes;\\n    }\\n\\n    function getTotalNodes() external view returns (uint256[] memory) {\\n        uint256[] memory totals = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            totals[i] = totals[i].add(totalNodes[i]);\\n        }\\n        return totals;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return IERC20(TOKEN).balanceOf(address(this));\\n    }\\n\\n    function getBalancePool() public view returns (uint256) {\\n        return getBalance().sub(total_rewards).sub(treasury_rewards);\\n    }\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyDev {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7a111afea0c64e8556063568577f312e58f06aeeab94626f77848298d3d4ae0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061032d5760003560e01c80635b2f3c8e116101a55780639f7b4579116100ec578063d326159211610095578063e7cc62bd1161006f578063e7cc62bd1461088a578063f65f4eaf1461089f578063f69e2046146108b4578063fba1f7b0146108c957610353565b8063d326159214610840578063de560cca14610855578063e300e98b1461086a57610353565b8063adf1b67e116100c6578063adf1b67e146107eb578063bcb116391461080b578063c7ce95601461082b57610353565b80639f7b457914610787578063a87430ba146107a7578063ab4e2785146107d657610353565b80636af904c61161014e57806382bfefc81161012857806382bfefc81461073257806388a8c95c1461074757806394ac42cc1461076757610353565b80636af904c6146106f3578063740c8af71461070857806378e979251461071d57610353565b80635fbb48dc1161017f5780635fbb48dc1461069e57806363584ecd146106be578063648acb09146106d357610353565b80635b2f3c8e146106545780635c75dcbc146106695780635fb11d7e1461067e57610353565b80632ae2707111610274578063486af96a1161021d5780635083f17b116101f75780635083f17b146105df578063551512de146105ff57806356e1221c1461061f5780635b0d2d8c1461063f57610353565b8063486af96a146105885780634b3dd5b5146105b55780634e71d92d146105ca57610353565b806335771fe01161024e57806335771fe0146105285780633e0a322d1461054857806344886d701461056857610353565b80632ae27071146104c85780632bcf161c146104e8578063328d8f721461050857610353565b80631fa36cbe116102d6578063238dafe0116102b0578063238dafe0146104665780632702dfe714610488578063277e5316146104a857610353565b80631fa36cbe14610404578063211aea02146104195780632365d7bc1461044657610353565b806312065fe01161030757806312065fe0146103af5780631d1c7b4e146103c45780631ed5c6c2146103e457610353565b8063059f8b161461035857806305c4744b1461038357806305d6bbf41461039a57610353565b366103535760405162461bcd60e51b815260040161034a90612285565b60405180910390fd5b600080fd5b34801561036457600080fd5b5061036d6108de565b60405161037a919061251d565b60405180910390f35b34801561038f57600080fd5b506103986108ea565b005b3480156103a657600080fd5b5061036d61091b565b3480156103bb57600080fd5b5061036d610921565b3480156103d057600080fd5b5061036d6103df366004611fe1565b6109a8565b3480156103f057600080fd5b506103986103ff366004611fe1565b6109ba565b34801561041057600080fd5b5061036d6109e9565b34801561042557600080fd5b50610439610434366004611fe1565b610a4f565b60405161037a919061204e565b34801561045257600080fd5b5061036d610461366004611fe1565b610a76565b34801561047257600080fd5b5061047b610a94565b60405161037a91906120fd565b34801561049457600080fd5b506103986104a3366004611e84565b610a9d565b3480156104b457600080fd5b5061036d6104c3366004611e1a565b610b60565b3480156104d457600080fd5b506103986104e3366004611f52565b610be8565b3480156104f457600080fd5b5061036d610503366004611e1a565b610c5f565b34801561051457600080fd5b50610398610523366004611fa9565b610d04565b34801561053457600080fd5b5061036d610543366004611fe1565b610d41565b34801561055457600080fd5b50610398610563366004611fe1565b610d4e565b34801561057457600080fd5b5061047b610583366004611e1a565b610d7d565b34801561059457600080fd5b506105a86105a3366004611e1a565b610dad565b60405161037a91906120b9565b3480156105c157600080fd5b5061036d610e78565b3480156105d657600080fd5b50610398610ee1565b3480156105eb57600080fd5b506103986105fa366004611e36565b610fe2565b34801561060b57600080fd5b5061039861061a366004611f11565b6110bc565b34801561062b57600080fd5b5061039861063a366004611fe1565b611185565b34801561064b57600080fd5b5061036d6111b4565b34801561066057600080fd5b506103986111d0565b34801561067557600080fd5b5061036d6111f3565b34801561068a57600080fd5b5061036d610699366004611e1a565b6111f9565b3480156106aa57600080fd5b506103986106b9366004611fe1565b61124e565b3480156106ca57600080fd5b506105a861127d565b3480156106df57600080fd5b506103986106ee366004611fe1565b611317565b3480156106ff57600080fd5b5061036d611346565b34801561071457600080fd5b5061036d61134c565b34801561072957600080fd5b5061036d611352565b34801561073e57600080fd5b50610439611358565b34801561075357600080fd5b50610398610762366004611e1a565b611367565b34801561077357600080fd5b5061036d610782366004611e1a565b6113e6565b34801561079357600080fd5b506103986107a2366004612011565b611442565b3480156107b357600080fd5b506107c76107c2366004611e1a565b611835565b60405161037a93929190612545565b3480156107e257600080fd5b5061036d611856565b3480156107f757600080fd5b5061036d610806366004611ee6565b61185c565b34801561081757600080fd5b5061036d610826366004611ee6565b611879565b34801561083757600080fd5b5061036d6118a1565b34801561084c57600080fd5b5061036d6118a7565b34801561086157600080fd5b5061036d6118ad565b34801561087657600080fd5b5061036d610885366004611e1a565b6118b3565b34801561089657600080fd5b5061036d6118e2565b3480156108ab57600080fd5b5061036d6118e8565b3480156108c057600080fd5b506103986118ee565b3480156108d557600080fd5b5061036d611975565b678ac7230489e8000081565b600b541561091957600354600b54600054610913926001600160a01b039182169291169061197b565b6000600b555b565b600a5481565b600080546040516370a0823160e01b81526001600160a01b03909116906370a082319061095290309060040161204e565b60206040518083038186803b15801561096a57600080fd5b505afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190611ff9565b90505b90565b60066020526000908152604090205481565b6003546001600160a01b031633146109e45760405162461bcd60e51b815260040161034a9061213b565b601155565b600080805b600154811015610a4957610a3f610a38600660008481526020019081526020016000205460018481548110610a1f57fe5b90600052602060002001546119fe90919063ffffffff16565b8390611a3f565b91506001016109ee565b50905090565b60078181548110610a5c57fe5b6000918252602090912001546001600160a01b0316905081565b60018181548110610a8357fe5b600091825260209091200154905081565b60135460ff1681565b6003546001600160a01b03163314610ac75760405162461bcd60e51b815260040161034a9061213b565b80516001600160a01b038316600090815260046020526040902054600854610afa9291610af49190611a64565b90611a3f565b6008556020808201516001600160a01b03841660009081526004909252604090912060010154600954610b329291610af49190611a64565b60095580516001600160a01b0390921660009081526004602090815260409091209283550151600190910155565b6000610b6b82610d7d565b15610b7857506000610be3565b6001600160a01b038216600090815260046020526040812060020154600e54610ba091611a64565b90506000610bc9678ac7230489e80000610bc384610bbd886111f9565b906119fe565b90611a8c565b9050600a548111610bda5780610bde565b600a545b925050505b919050565b6003546001600160a01b03163314610c125760405162461bcd60e51b815260040161034a9061213b565b8051825114610c335760405162461bcd60e51b815260040161034a9061241b565b8151610c46906001906020850190611d3a565b508051610c5a906002906020840190611d3a565b505050565b6001600160a01b038116600090815260046020526040812054610c8457506000610be3565b6000610cb1610ca8610c946109e9565b610bc3610ca0876111f9565b610bbd610e78565b610af485610b60565b6001600160a01b038416600090815260046020526040812060010154919250610cd9856118b3565b905080610ce68385611a3f565b11610cf15782610cfb565b610cfb8183611a64565b95945050505050565b6003546001600160a01b03163314610d2e5760405162461bcd60e51b815260040161034a9061213b565b6013805460ff1916911515919091179055565b60028181548110610a8357fe5b6003546001600160a01b03163314610d785760405162461bcd60e51b815260040161034a9061213b565b601255565b6000610d88826118b3565b6001600160a01b03831660009081526004602052604090206001015410159050919050565b600154606090819067ffffffffffffffff81118015610dcb57600080fd5b50604051908082528060200260200182016040528015610df5578160200160208202803683370190505b50905060005b600154811015610e71576001600160a01b03841660009081526005602090815260408083208484529091529020548251610e529190849084908110610e3c57fe5b6020026020010151611a3f90919063ffffffff16565b828281518110610e5e57fe5b6020908102919091010152600101610dfb565b5092915050565b6000426011541015610edb576000610e8e6111b4565b90506000610ea760115442611a6490919063ffffffff16565b90506000610ec4601054610bc385856119fe90919063ffffffff16565b905082811115610ed15750815b92506109a5915050565b50600090565b610ee96111d0565b336000610ef582610b60565b90508015610fde57600a54610f0a9082611a64565b600a556001600160a01b03821660009081526004602052604081206001015490610f33846118b3565b905080610f408385611a3f565b1115610f5357610f508183611a64565b92505b6001600160a01b038416600090815260046020526040902060010154610f799084611a3f565b6001600160a01b038516600090815260046020526040902060010155600954610fa29084611a3f565b600955600054610fbc906001600160a01b0316858561197b565b5050600e546001600160a01b0383166000908152600460205260409020600201555b5050565b6003546001600160a01b0316331461100c5760405162461bcd60e51b815260040161034a9061213b565b60005b8151811015610c5a5761106882828151811061102757fe5b6020908102919091018101516001600160a01b038616600090815260058352604080822086835284528082205460069094529020549091610af49190611a64565b600082815260066020526040902055815182908290811061108557fe5b6020908102919091018101516001600160a01b0385166000908152600583526040808220858352909352919091205560010161100f565b6003546001600160a01b031633146110e65760405162461bcd60e51b815260040161034a9061213b565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a9059cbb9061112d90849086906004016120a0565b602060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f9190611fc5565b50505050565b6003546001600160a01b031633146111af5760405162461bcd60e51b815260040161034a9061213b565b600c55565b60006109a2600b546111ca600a546111ca610921565b90611a64565b60006111da610e78565b905080156111f0576111eb81611abe565b426011555b50565b600c5481565b600080805b600154811015610e71576001600160a01b03841660009081526005602090815260408083208484529091529020546001805461124492610a3892909185908110610a1f57fe5b91506001016111fe565b6003546001600160a01b031633146112785760405162461bcd60e51b815260040161034a9061213b565b601055565b600154606090819067ffffffffffffffff8111801561129b57600080fd5b506040519080825280602002602001820160405280156112c5578160200160208202803683370190505b50905060005b600154811015610a49576112f86006600083815260200190815260200160002054838381518110610e3c57fe5b82828151811061130457fe5b60209081029190910101526001016112cb565b6003546001600160a01b031633146113415760405162461bcd60e51b815260040161034a9061213b565b600f55565b60095481565b600f5481565b60125481565b6000546001600160a01b031681565b6003546001600160a01b031633146113915760405162461bcd60e51b815260040161034a9061213b565b6001600160a01b0381166113b75760405162461bcd60e51b815260040161034a906122bc565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000806113f2836111f9565b118015611405575061140382610d7d565b155b61141057600061143c565b61143c601054610bc36114216109e9565b610bc361142d876111f9565b610bbd62015180610bbd6111b4565b92915050565b601354339060ff16801561145857506012544210155b6114745760405162461bcd60e51b815260040161034a90612489565b60015483108015611486575060025483105b6114a25760405162461bcd60e51b815260040161034a90612387565b6114aa610ee1565b6001600160a01b0381166000908152600460205260409020546115345760078054600181019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155600e54600091825260046020526040909120600201555b6001600160a01b0381166000908152600460205260409020541580159061155f575061155f81610d7d565b1561158457600e546001600160a01b0382166000908152600460205260409020600201555b60006115978360028681548110610a1f57fe5b6000546040516370a0823160e01b815291925082916001600160a01b03909116906370a08231906115cc90869060040161204e565b60206040518083038186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190611ff9565b101561163a5760405162461bcd60e51b815260040161034a90612217565b6000546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815282916001600160a01b03169063dd62ed3e906116859086903090600401612062565b60206040518083038186803b15801561169d57600080fd5b505afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190611ff9565b10156116f35760405162461bcd60e51b815260040161034a906121e0565b60005461170b906001600160a01b0316833084611b13565b6001600160a01b03821660009081526004602052604090205461172e9082611a3f565b6001600160a01b0383166000908152600460205260409020556008546117549082611a3f565b600855600c546117799061177090606490610bc39085906119fe565b600b5490611a3f565b600b556001600160a01b03821660009081526005602090815260408083208784529091529020546117aa9084611a3f565b6001600160a01b03831660009081526005602090815260408083208884528252808320939093556006905220546117e19084611a3f565b6000858152600660205260409081902091909155517fddc82401ab579d868e816af720a563cdf9f9d0350abb3fa3266bcf33dd4f48ab9061182790429085908790612526565b60405180910390a150505050565b60046020526000908152604090208054600182015460029092015490919083565b600b5481565b600560209081526000928352604080842090915290825290205481565b6001600160a01b03919091166000908152600560209081526040808320938352929052205490565b600e5481565b60105481565b60085481565b600f546001600160a01b038216600090815260046020526040812054909161143c91606491610bc391906119fe565b60075490565b600d5481565b60006118f933610c5f565b9050600260008154811061190957fe5b90600052602060002001548110156119335760405162461bcd60e51b815260040161034a90612172565b6000611960600260008154811061194657fe5b906000526020600020015483611a8c90919063ffffffff16565b905061196a610ee1565b610fde600082611b34565b60115481565b610c5a8363a9059cbb60e01b848460405160240161199a9291906120a0565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b94565b600082611a0d5750600061143c565b82820282848281611a1a57fe5b0414611a385760405162461bcd60e51b815260040161034a906123be565b9392505050565b600082820183811015611a385760405162461bcd60e51b815260040161034a906121a9565b600082821115611a865760405162461bcd60e51b815260040161034a9061224e565b50900390565b6000808211611aad5760405162461bcd60e51b815260040161034a90612350565b818381611ab657fe5b049392505050565b80156111f057611aed611ae4611ad26109e9565b610bc384678ac7230489e800006119fe565b600e5490611a3f565b600e55600d54611afd9082611a3f565b600d55600a54611b0d9082611a3f565b600a5550565b61117f846323b872dd60e01b85858560405160240161199a9392919061207c565b601354339060ff168015611b4a57506012544210155b611b665760405162461bcd60e51b815260040161034a90612489565b60015483108015611b78575060025483105b6114aa5760405162461bcd60e51b815260040161034a90612387565b6060611be9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c239092919063ffffffff16565b805190915015610c5a5780806020019051810190611c079190611fc5565b610c5a5760405162461bcd60e51b815260040161034a906124c0565b6060611c328484600085611c3a565b949350505050565b606082471015611c5c5760405162461bcd60e51b815260040161034a906122f3565b611c6585611cfb565b611c815760405162461bcd60e51b815260040161034a90612452565b60006060866001600160a01b03168587604051611c9e9190612032565b60006040518083038185875af1925050503d8060008114611cdb576040519150601f19603f3d011682016040523d82523d6000602084013e611ce0565b606091505b5091509150611cf0828286611d01565b979650505050505050565b3b151590565b60608315611d10575081611a38565b825115611d205782518084602001fd5b8160405162461bcd60e51b815260040161034a9190612108565b828054828255906000526020600020908101928215611d75579160200282015b82811115611d75578251825591602001919060010190611d5a565b50611d81929150611d85565b5090565b5b80821115611d815760008155600101611d86565b600082601f830112611daa578081fd5b813567ffffffffffffffff811115611dc0578182fd5b6020808202611dd082820161255b565b83815293508184018583018287018401881015611dec57600080fd5b600092505b84831015611e0f578035825260019290920191908301908301611df1565b505050505092915050565b600060208284031215611e2b578081fd5b8135611a38816125ae565b60008060408385031215611e48578081fd5b8235611e53816125ae565b9150602083013567ffffffffffffffff811115611e6e578182fd5b611e7a85828601611d9a565b9150509250929050565b6000808284036080811215611e97578283fd5b8335611ea2816125ae565b92506060601f1982011215611eb5578182fd5b50611ec0606061255b565b602084013581526040840135602082015260608401356040820152809150509250929050565b60008060408385031215611ef8578182fd5b8235611f03816125ae565b946020939093013593505050565b600080600060608486031215611f25578081fd5b8335611f30816125ae565b9250602084013591506040840135611f47816125ae565b809150509250925092565b60008060408385031215611f64578182fd5b823567ffffffffffffffff80821115611f7b578384fd5b611f8786838701611d9a565b93506020850135915080821115611f9c578283fd5b50611e7a85828601611d9a565b600060208284031215611fba578081fd5b8135611a38816125c3565b600060208284031215611fd6578081fd5b8151611a38816125c3565b600060208284031215611ff2578081fd5b5035919050565b60006020828403121561200a578081fd5b5051919050565b60008060408385031215612023578182fd5b50508035926020909101359150565b60008251612044818460208701612582565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156120f1578351835292840192918401916001016120d5565b50909695505050505050565b901515815260200190565b6000602082528251806020840152612127816040850160208701612582565b601f01601f19169190910160400192915050565b60208082526016908201527f43616c6c6572206973206e6f7420746865206465762100000000000000000000604082015260600190565b60208082526016908201527f4e6f7420656e6f75676820746f20636f6d706f756e6400000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604082015260600190565b60208082526014908201527f496e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526010908201527f446f206e6f742073656e642043524f2e00000000000000000000000000000000604082015260600190565b6020808252600c908201527f5a65726f20616464726573730000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f496e76616c6964206e6f64655469657200000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f4c656e677468206d69736d617463680000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526008908201527f44697361626c6564000000000000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526001600160a01b03919091166020830152604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561257a57600080fd5b604052919050565b60005b8381101561259d578181015183820152602001612585565b8381111561117f5750506000910152565b6001600160a01b03811681146111f057600080fd5b80151581146111f057600080fdfea26469706673582212208ce69bca0830912c5c7e40f0533532db2f9dc20620b88571929cd7875c4ca6d464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2961,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "TOKEN",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1177"
      },
      {
        "astId": 2968,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "tierAllocPoints",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2975,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "tierAmounts",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2992,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "dev",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2996,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "users",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)2982_storage)"
      },
      {
        "astId": 3002,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3006,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalNodes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3009,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "userIndices",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3011,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_deposited",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3013,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_claimed",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3015,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3017,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "treasury_rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3019,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "treasuryFeePercent",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3021,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalDistributeRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3023,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalDistributePoints",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3025,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "maxReturnPercent",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3027,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "dripRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3029,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "lastDripTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3031,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "startTime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3033,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "enabled",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1177": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(User)2982_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GlcrNode.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2982_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(User)2982_storage": {
        "encoding": "inplace",
        "label": "struct GlcrNode.User",
        "members": [
          {
            "astId": 2977,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "total_deposits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2979,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "total_claims",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2981,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "last_distPoints",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}