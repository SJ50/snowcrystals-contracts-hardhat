{
  "address": "0xcf02a7d02dE8131c7938e3DF3a6Cb50B0802E0D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolStartTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RUNNING_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_REWARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardTime",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTime",
          "type": "uint256"
        }
      ],
      "name": "getGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingSNOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accSnowPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snow",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snowPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6906679fba0fbe1cfa7432e1a934eab9c286d855bd0187ed7a86890326de105",
  "receipt": {
    "to": null,
    "from": "0x4750751212D9266CB03dd381145b10adb058dfA9",
    "contractAddress": "0xcf02a7d02dE8131c7938e3DF3a6Cb50B0802E0D5",
    "transactionIndex": 0,
    "gasUsed": "1929813",
    "logsBloom": "0x
    "blockHash": "0xb0af2756c2c9a2746809070c9011c3f28cfcaf90b689d186986ecfdaaffc4401",
    "transactionHash": "0xa6906679fba0fbe1cfa7432e1a934eab9c286d855bd0187ed7a86890326de105",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5932254,
        "transactionHash": "0xa6906679fba0fbe1cfa7432e1a934eab9c286d855bd0187ed7a86890326de105",
        "address": "0xcf02a7d02dE8131c7938e3DF3a6Cb50B0802E0D5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004750751212d9266cb03dd381145b10adb058dfa9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb0af2756c2c9a2746809070c9011c3f28cfcaf90b689d186986ecfdaaffc4401"
      }
    ],
    "blockNumber": 5932254,
    "cumulativeGasUsed": "1929813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F79bb07123d133C4eB82174014DC58585Cb7f68",
    1667606400,
    "0xeDc5E564811b96Ec8ca2336895C66b3B88F9ef66",
    120,
    "0xc3F95DeDacFEA28a3d657FfbCc74e9BaB6FB949B"
  ],
  "numDeployments": 1,
  "solcInputHash": "67ac06147645ed6882113c15d4a11556",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RUNNING_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTime\",\"type\":\"uint256\"}],\"name\":\"getGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSNOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSnowPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snow\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snowPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SnowGenesisRewardPool.sol\":\"SnowGenesisRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/SnowGenesisRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Note that this pool has no minter key of SNOW (rewards).\\n// Instead, the governance will call SNOW distributeReward method and send reward to this pool at the beginning.\\ncontract SnowGenesisRewardPool is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n    address public immutable daoFund;\\n    uint256 public immutable depositFee;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SNOW to distribute.\\n        uint256 lastRewardTime; // Last time that SNOW distribution occurs.\\n        uint256 accSnowPerShare; // Accumulated SNOW per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardBlock has passed\\n    }\\n\\n    IERC20 public snow;\\n    IERC20 public depositToken;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when SNOW mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when SNOW mining ends.\\n    uint256 public poolEndTime;\\n\\n    uint256 public snowPerSecond;\\n    uint256 public constant RUNNING_TIME = 48 hours;\\n    uint256 public constant TOTAL_REWARDS = 24_000 ether;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _snow,\\n        uint256 _poolStartTime,\\n        address _daoFund,\\n        uint256 _depositFee,\\n        address _depositToken\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_snow != address(0)) snow = IERC20(_snow);\\n        snowPerSecond = TOTAL_REWARDS.div(RUNNING_TIME);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = _poolStartTime + RUNNING_TIME;\\n        daoFund = _daoFund;\\n        depositFee = _depositFee;\\n        operator = msg.sender;\\n        add(12_000, IERC20(_depositToken), false, 0);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            operator == msg.sender,\\n            \\\"SnowUsdcGenesis: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(\\n                poolInfo[pid].token != _token,\\n                \\\"SnowUsdcGenesis: existing pool?\\\"\\n            );\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) ||\\n            (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                lastRewardTime: _lastRewardTime,\\n                accSnowPerShare: 0,\\n                isStarted: _isStarted\\n            })\\n        );\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's SNOW allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return poolEndTime.sub(poolStartTime).mul(snowPerSecond);\\n            return poolEndTime.sub(_fromTime).mul(snowPerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return _toTime.sub(poolStartTime).mul(snowPerSecond);\\n            return _toTime.sub(_fromTime).mul(snowPerSecond);\\n        }\\n    }\\n\\n    // View function to see pending SNOW on frontend.\\n    function pendingSNOW(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accSnowPerShare = pool.accSnowPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _snowReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            accSnowPerShare = accSnowPerShare.add(\\n                _snowReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        return user.amount.mul(accSnowPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _snowReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            pool.accSnowPerShare = pool.accSnowPerShare.add(\\n                _snowReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user\\n                .amount\\n                .mul(pool.accSnowPerShare)\\n                .div(1e18)\\n                .sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeSnowTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            if (daoFund != address(0) && depositFee != 0) {\\n                uint256 feeAmount = _amount.mul(depositFee).div(10000);\\n                pool.token.safeTransferFrom(_sender, daoFund, feeAmount);\\n                pool.token.safeTransferFrom(\\n                    _sender,\\n                    address(this),\\n                    _amount.sub(feeAmount)\\n                );\\n                user.amount = user.amount.add(_amount.sub(feeAmount));\\n            } else {\\n                pool.token.safeTransferFrom(_sender, address(this), _amount);\\n                user.amount = user.amount.add(_amount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accSnowPerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accSnowPerShare).div(1e18).sub(\\n            user.rewardDebt\\n        );\\n        if (_pending > 0) {\\n            safeSnowTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSnowPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe SNOW transfer function, just in case if rounding error causes pool to not have enough SNOWs.\\n    function safeSnowTransfer(address _to, uint256 _amount) internal {\\n        uint256 _snowBalance = snow.balanceOf(address(this));\\n        if (_snowBalance > 0) {\\n            if (_amount > _snowBalance) {\\n                snow.safeTransfer(_to, _snowBalance);\\n            } else {\\n                snow.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (SNOW or lps) if less than 90 days after pool ends\\n            require(IERC20(_token) != snow, \\\"snow\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(IERC20(_token) != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        IERC20(_token).safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x183430f5c147106981dbce66a2a535216b6296909fe23a34088beebb88c685a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260006006553480156200001657600080fd5b50604051620025b9380380620025b9833981810160405260a08110156200003c57600080fd5b5080516020820151604083015160608401516080909401519293919290919060006200006762000198565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350834210620000ef576040805162461bcd60e51b815260206004808301919091526024820152636c61746560e01b604482015290519081900360640190fd5b6001600160a01b038516156200011b57600280546001600160a01b0319166001600160a01b0387161790555b620001426202a3006905150ae84a8cdf0000006200019c60201b620014d21790919060201c565b60095560078490556202a30084016008556001600160601b0319606084901b1660805260a0829052600180546001600160a01b031916331790556200018d612ee08260008062000207565b5050505050620008c5565b3390565b6000808211620001f3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381620001fd57fe5b0490505b92915050565b6001546001600160a01b03163314620002525760405162461bcd60e51b815260040180806020018281038252602b8152602001806200258e602b913960400191505060405180910390fd5b6200025d8362000423565b81156200026e576200026e620004c6565b6007544210156200029f578062000289575060075462000299565b6007548110156200029957506007545b620002b5565b801580620002ac57504281105b15620002b55750425b600060075482111580620002c95750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260048054600181018255945295517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600590940293840180546001600160a01b031916919096161790945594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909201805460ff1916921515929092179091559091506200041c576200041885600654620004ed60201b620015391790919060201c565b6006555b5050505050565b60045460005b81811015620004c157826001600160a01b0316600482815481106200044a57fe5b60009182526020909120600590910201546001600160a01b03161415620004b8576040805162461bcd60e51b815260206004820152601f60248201527f536e6f775573646347656e657369733a206578697374696e6720706f6f6c3f00604482015290519081900360640190fd5b60010162000429565b505050565b60045460005b81811015620004e957620004e0816200054f565b600101620004cc565b5050565b60008282018381101562000548576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000600482815481106200055f57fe5b906000526020600020906005020190508060020154421162000582575062000707565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015620005cd57600080fd5b505afa158015620005e2573d6000803e3d6000fd5b505050506040513d6020811015620005f957600080fd5b50519050806200061157504260029091015562000707565b600482015460ff166200065257600482018054600160ff1990911681179091558201546006546200064e91620004ed602090811b6200153917901c565b6006555b60065415620006fe576000620006738360020154426200070a60201b60201c565b90506000620006b06006546200069c8660010154856200080960201b6200159a1790919060201c565b6200019c60201b620014d21790919060201c565b9050620006f6620006dd846200069c670de0b6b3a7640000856200080960201b6200159a1790919060201c565b8560030154620004ed60201b620015391790919060201c565b600385015550505b50426002909101555b50565b60008183106200071d5750600062000201565b6008548210620007a85760085483106200073a5750600062000201565b600754831162000785576200077d600954620007696007546008546200086760201b620015f31790919060201c565b6200080960201b6200159a1790919060201c565b905062000201565b6200077d60095462000769856008546200086760201b620015f31790919060201c565b6007548211620007bb5750600062000201565b6007548311620007e8576200077d60095462000769600754856200086760201b620015f31790919060201c565b6200077d6009546200076985856200086760201b620015f31790919060201c565b6000826200081a5750600062000201565b828202828482816200082857fe5b0414620005485760405162461bcd60e51b81526004018080602001828103825260218152602001806200256d6021913960400191505060405180910390fd5b600082821115620008bf576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60805160601c60a051611c6d6200090060003980610bfc5280611249528061127e525080610cf1528061121652806112b75250611c6d6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063630b5ba1116100f957806396805e5411610097578063dd62ab3011610071578063dd62ab3014610428578063e2bbb15814610454578063e4affbc814610477578063f2fde38b1461047f576101b9565b806396805e54146103c0578063b3ab15fb146103fa578063c89039c514610420576101b9565b8063715018a6116100d3578063715018a6146103635780638d934f741461036b5780638da5cb5b1461037357806393f1a40b1461037b576101b9565b8063630b5ba11461034b57806367a52793146103535780636e271dd51461035b576101b9565b80633a2b9626116101665780635312ea8e116101405780635312ea8e146102e857806354575af414610305578063570ca7351461033b5780635f96dc1114610343576101b9565b80633a2b962614610284578063441a3e70146102a857806351eb05a6146102cb576101b9565b80631ab06ee5116101975780631ab06ee514610234578063231f0c6a146102595780633406037f1461027c576101b9565b806309cf6091146101be5780631526fe27146101d857806317caf6f11461022c575b600080fd5b6101c66104a5565b60408051918252519081900360200190f35b6101f5600480360360208110156101ee57600080fd5b50356104b3565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101c66104fe565b6102576004803603604081101561024a57600080fd5b5080359060200135610504565b005b6101c66004803603604081101561026f57600080fd5b50803590602001356105b2565b6101c6610677565b61028c61067e565b604080516001600160a01b039092168252519081900360200190f35b610257600480360360408110156102be57600080fd5b508035906020013561068d565b610257600480360360208110156102e157600080fd5b5035610857565b610257600480360360208110156102fe57600080fd5b50356109b5565b6102576004803603606081101561031b57600080fd5b506001600160a01b03813581169160208101359160409091013516610a4e565b61028c610bc2565b6101c6610bd1565b610257610bd7565b6101c6610bfa565b6101c6610c1e565b610257610c24565b61028c610cef565b61028c610d13565b6103a76004803603604081101561039157600080fd5b50803590602001356001600160a01b0316610d22565b6040805192835260208301919091528051918290030190f35b610257600480360360808110156103d657600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610d46565b6102576004803603602081101561041057600080fd5b50356001600160a01b0316610f50565b61028c610fc8565b6101c66004803603604081101561043e57600080fd5b50803590602001356001600160a01b0316610fd7565b6102576004803603604081101561046a57600080fd5b5080359060200135611134565b6101c66113ab565b6102576004803603602081101561049557600080fd5b50356001600160a01b03166113b1565b6905150ae84a8cdf00000081565b600481815481106104c057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60065481565b6001546001600160a01b0316331461054d5760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b610555610bd7565b60006004838154811061056457fe5b60009182526020909120600590910201600481015490915060ff16156105ab576105a7826105a183600101546006546115f390919063ffffffff16565b90611539565b6006555b6001015550565b60008183106105c357506000610671565b600854821061062b5760085483106105dd57506000610671565b6007548311610610576106096009546106036007546008546115f390919063ffffffff16565b9061159a565b9050610671565b610609600954610603856008546115f390919063ffffffff16565b600754821161063c57506000610671565b600754831161066057610609600954610603600754856115f390919063ffffffff16565b6009546106099061060384866115f3565b92915050565b6202a30081565b6002546001600160a01b031681565b60003390506000600484815481106106a157fe5b60009182526020808320878452600580835260408086206001600160a01b038916875290935291909320805492909102909201925084111561072a576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61073385610857565b6000610770826001015461076a670de0b6b3a76400006107648760030154876000015461159a90919063ffffffff16565b906114d2565b906115f3565b905080156107c2576107828482611650565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b84156107ec5781546107d490866115f3565b825582546107ec906001600160a01b03168587611706565b6003830154825461080a91670de0b6b3a7640000916107649161159a565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b60006004828154811061086657fe5b906000526020600020906005020190508060020154421161088757506109b2565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b50519050806109115750426002909101556109b2565b600482015460ff166109425760048201805460ff1916600190811790915582015460065461093e91611539565b6006555b600654156109a957600061095a8360020154426105b2565b9050600061097b60065461076486600101548561159a90919063ffffffff16565b90506109a16109968461076484670de0b6b3a764000061159a565b600386015490611539565b600385015550505b50426002909101555b50565b6000600482815481106109c457fe5b60009182526020808320858452600580835260408086203380885294528520805486825560018201969096559302018054909450919291610a11916001600160a01b039091169083611706565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6001546001600160a01b03163314610a975760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b6008546276a70001421015610ba9576002546001600160a01b0384811691161415610b0b576040805162461bcd60e51b8152602060048083019190915260248201527f736e6f7700000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460005b81811015610ba657600060048281548110610b2857fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610b9d576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610b11565b50505b610bbd6001600160a01b0384168284611706565b505050565b6001546001600160a01b031681565b60075481565b60045460005b81811015610bf657610bee81610857565b600101610bdd565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085481565b610c2c611786565b6001600160a01b0316610c3d610d13565b6001600160a01b031614610c98576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b60056020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b03163314610d8f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b610d988361178a565b8115610da657610da6610bd7565b600754421015610dd25780610dbe5750600754610dcd565b600754811015610dcd57506007545b610de6565b801580610dde57504281105b15610de65750425b600060075482111580610df95750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260048054600181018255945295517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6005909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919096161790945594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909201805460ff191692151592909217909155909150610f4957600654610f459086611539565b6006555b5050505050565b6001546001600160a01b03163314610f995760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b60008060048481548110610fe757fe5b60009182526020808320878452600580835260408086206001600160a01b03808b16885290855281872060039390960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d602081101561108a57600080fd5b50516002850154909150421180156110a157508015155b156110fe5760006110b68560020154426105b2565b905060006110d760065461076488600101548561159a90919063ffffffff16565b90506110f96110f28461076484670de0b6b3a764000061159a565b8590611539565b935050505b611129836001015461076a670de0b6b3a764000061076486886000015461159a90919063ffffffff16565b979650505050505050565b600033905060006004848154811061114857fe5b60009182526020808320878452600580835260408086206001600160a01b0389168752909352919093209102909101915061118285610857565b80541561120e5760006111ba826001015461076a670de0b6b3a76400006107648760030154876000015461159a90919063ffffffff16565b9050801561120c576111cc8482611650565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b8315611341577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061126b57507f000000000000000000000000000000000000000000000000000000000000000015155b1561131b5760006112a2612710610764877f000000000000000000000000000000000000000000000000000000000000000061159a565b83549091506112dc906001600160a01b0316857f000000000000000000000000000000000000000000000000000000000000000084611824565b6112fe84306112eb88856115f3565b86546001600160a01b0316929190611824565b61131361130b86836115f3565b835490611539565b825550611341565b8154611332906001600160a01b0316843087611824565b805461133e9085611539565b81555b6003820154815461135f91670de0b6b3a7640000916107649161159a565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60095481565b6113b9611786565b6001600160a01b03166113ca610d13565b6001600160a01b031614611425576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661146a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611b766026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808211611528576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161153157fe5b049392505050565b600082820183811015611593576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826115a957506000610671565b828202828482816115b657fe5b04146115935760405162461bcd60e51b8152600401808060200182810382526021815260200180611bc26021913960400191505060405180910390fd5b60008282111561164a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561169b57600080fd5b505afa1580156116af573d6000803e3d6000fd5b505050506040513d60208110156116c557600080fd5b505190508015610bbd57808211156116f3576002546116ee906001600160a01b03168483611706565b610bbd565b600254610bbd906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610bbd9084906118b2565b3390565b60045460005b81811015610bbd57826001600160a01b0316600482815481106117af57fe5b60009182526020909120600590910201546001600160a01b0316141561181c576040805162461bcd60e51b815260206004820152601f60248201527f536e6f775573646347656e657369733a206578697374696e6720706f6f6c3f00604482015290519081900360640190fd5b600101611790565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526118ac9085906118b2565b50505050565b6060611907826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119639092919063ffffffff16565b805190915015610bbd5780806020019051602081101561192657600080fd5b5051610bbd5760405162461bcd60e51b815260040180806020018281038252602a815260200180611c0e602a913960400191505060405180910390fd5b6060611972848460008561197a565b949350505050565b6060824710156119bb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611b9c6026913960400191505060405180910390fd5b6119c485611acb565b611a15576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611a545780518252601f199092019160209182019101611a35565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ab6576040519150601f19603f3d011682016040523d82523d6000602084013e611abb565b606091505b5091509150611129828286611ad1565b3b151590565b60608315611ae0575081611593565b825115611af05782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b3a578181015183820152602001611b22565b50505050905090810190601f168015611b675780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536e6f775573646347656e657369733a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f37e9938cbe40c5004e7b604a8de8ac0a091a719911322158560b51f80de7e3764736f6c634300060c0033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536e6f775573646347656e657369733a2063616c6c6572206973206e6f7420746865206f70657261746f72",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063630b5ba1116100f957806396805e5411610097578063dd62ab3011610071578063dd62ab3014610428578063e2bbb15814610454578063e4affbc814610477578063f2fde38b1461047f576101b9565b806396805e54146103c0578063b3ab15fb146103fa578063c89039c514610420576101b9565b8063715018a6116100d3578063715018a6146103635780638d934f741461036b5780638da5cb5b1461037357806393f1a40b1461037b576101b9565b8063630b5ba11461034b57806367a52793146103535780636e271dd51461035b576101b9565b80633a2b9626116101665780635312ea8e116101405780635312ea8e146102e857806354575af414610305578063570ca7351461033b5780635f96dc1114610343576101b9565b80633a2b962614610284578063441a3e70146102a857806351eb05a6146102cb576101b9565b80631ab06ee5116101975780631ab06ee514610234578063231f0c6a146102595780633406037f1461027c576101b9565b806309cf6091146101be5780631526fe27146101d857806317caf6f11461022c575b600080fd5b6101c66104a5565b60408051918252519081900360200190f35b6101f5600480360360208110156101ee57600080fd5b50356104b3565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101c66104fe565b6102576004803603604081101561024a57600080fd5b5080359060200135610504565b005b6101c66004803603604081101561026f57600080fd5b50803590602001356105b2565b6101c6610677565b61028c61067e565b604080516001600160a01b039092168252519081900360200190f35b610257600480360360408110156102be57600080fd5b508035906020013561068d565b610257600480360360208110156102e157600080fd5b5035610857565b610257600480360360208110156102fe57600080fd5b50356109b5565b6102576004803603606081101561031b57600080fd5b506001600160a01b03813581169160208101359160409091013516610a4e565b61028c610bc2565b6101c6610bd1565b610257610bd7565b6101c6610bfa565b6101c6610c1e565b610257610c24565b61028c610cef565b61028c610d13565b6103a76004803603604081101561039157600080fd5b50803590602001356001600160a01b0316610d22565b6040805192835260208301919091528051918290030190f35b610257600480360360808110156103d657600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610d46565b6102576004803603602081101561041057600080fd5b50356001600160a01b0316610f50565b61028c610fc8565b6101c66004803603604081101561043e57600080fd5b50803590602001356001600160a01b0316610fd7565b6102576004803603604081101561046a57600080fd5b5080359060200135611134565b6101c66113ab565b6102576004803603602081101561049557600080fd5b50356001600160a01b03166113b1565b6905150ae84a8cdf00000081565b600481815481106104c057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60065481565b6001546001600160a01b0316331461054d5760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b610555610bd7565b60006004838154811061056457fe5b60009182526020909120600590910201600481015490915060ff16156105ab576105a7826105a183600101546006546115f390919063ffffffff16565b90611539565b6006555b6001015550565b60008183106105c357506000610671565b600854821061062b5760085483106105dd57506000610671565b6007548311610610576106096009546106036007546008546115f390919063ffffffff16565b9061159a565b9050610671565b610609600954610603856008546115f390919063ffffffff16565b600754821161063c57506000610671565b600754831161066057610609600954610603600754856115f390919063ffffffff16565b6009546106099061060384866115f3565b92915050565b6202a30081565b6002546001600160a01b031681565b60003390506000600484815481106106a157fe5b60009182526020808320878452600580835260408086206001600160a01b038916875290935291909320805492909102909201925084111561072a576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61073385610857565b6000610770826001015461076a670de0b6b3a76400006107648760030154876000015461159a90919063ffffffff16565b906114d2565b906115f3565b905080156107c2576107828482611650565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b84156107ec5781546107d490866115f3565b825582546107ec906001600160a01b03168587611706565b6003830154825461080a91670de0b6b3a7640000916107649161159a565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b60006004828154811061086657fe5b906000526020600020906005020190508060020154421161088757506109b2565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b50519050806109115750426002909101556109b2565b600482015460ff166109425760048201805460ff1916600190811790915582015460065461093e91611539565b6006555b600654156109a957600061095a8360020154426105b2565b9050600061097b60065461076486600101548561159a90919063ffffffff16565b90506109a16109968461076484670de0b6b3a764000061159a565b600386015490611539565b600385015550505b50426002909101555b50565b6000600482815481106109c457fe5b60009182526020808320858452600580835260408086203380885294528520805486825560018201969096559302018054909450919291610a11916001600160a01b039091169083611706565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6001546001600160a01b03163314610a975760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b6008546276a70001421015610ba9576002546001600160a01b0384811691161415610b0b576040805162461bcd60e51b8152602060048083019190915260248201527f736e6f7700000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460005b81811015610ba657600060048281548110610b2857fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610b9d576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610b11565b50505b610bbd6001600160a01b0384168284611706565b505050565b6001546001600160a01b031681565b60075481565b60045460005b81811015610bf657610bee81610857565b600101610bdd565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085481565b610c2c611786565b6001600160a01b0316610c3d610d13565b6001600160a01b031614610c98576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b60056020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b03163314610d8f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b610d988361178a565b8115610da657610da6610bd7565b600754421015610dd25780610dbe5750600754610dcd565b600754811015610dcd57506007545b610de6565b801580610dde57504281105b15610de65750425b600060075482111580610df95750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260048054600181018255945295517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6005909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919096161790945594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909201805460ff191692151592909217909155909150610f4957600654610f459086611539565b6006555b5050505050565b6001546001600160a01b03163314610f995760405162461bcd60e51b815260040180806020018281038252602b815260200180611be3602b913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b60008060048481548110610fe757fe5b60009182526020808320878452600580835260408086206001600160a01b03808b16885290855281872060039390960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d602081101561108a57600080fd5b50516002850154909150421180156110a157508015155b156110fe5760006110b68560020154426105b2565b905060006110d760065461076488600101548561159a90919063ffffffff16565b90506110f96110f28461076484670de0b6b3a764000061159a565b8590611539565b935050505b611129836001015461076a670de0b6b3a764000061076486886000015461159a90919063ffffffff16565b979650505050505050565b600033905060006004848154811061114857fe5b60009182526020808320878452600580835260408086206001600160a01b0389168752909352919093209102909101915061118285610857565b80541561120e5760006111ba826001015461076a670de0b6b3a76400006107648760030154876000015461159a90919063ffffffff16565b9050801561120c576111cc8482611650565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b8315611341577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061126b57507f000000000000000000000000000000000000000000000000000000000000000015155b1561131b5760006112a2612710610764877f000000000000000000000000000000000000000000000000000000000000000061159a565b83549091506112dc906001600160a01b0316857f000000000000000000000000000000000000000000000000000000000000000084611824565b6112fe84306112eb88856115f3565b86546001600160a01b0316929190611824565b61131361130b86836115f3565b835490611539565b825550611341565b8154611332906001600160a01b0316843087611824565b805461133e9085611539565b81555b6003820154815461135f91670de0b6b3a7640000916107649161159a565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60095481565b6113b9611786565b6001600160a01b03166113ca610d13565b6001600160a01b031614611425576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661146a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611b766026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808211611528576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161153157fe5b049392505050565b600082820183811015611593576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826115a957506000610671565b828202828482816115b657fe5b04146115935760405162461bcd60e51b8152600401808060200182810382526021815260200180611bc26021913960400191505060405180910390fd5b60008282111561164a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561169b57600080fd5b505afa1580156116af573d6000803e3d6000fd5b505050506040513d60208110156116c557600080fd5b505190508015610bbd57808211156116f3576002546116ee906001600160a01b03168483611706565b610bbd565b600254610bbd906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610bbd9084906118b2565b3390565b60045460005b81811015610bbd57826001600160a01b0316600482815481106117af57fe5b60009182526020909120600590910201546001600160a01b0316141561181c576040805162461bcd60e51b815260206004820152601f60248201527f536e6f775573646347656e657369733a206578697374696e6720706f6f6c3f00604482015290519081900360640190fd5b600101611790565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526118ac9085906118b2565b50505050565b6060611907826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119639092919063ffffffff16565b805190915015610bbd5780806020019051602081101561192657600080fd5b5051610bbd5760405162461bcd60e51b815260040180806020018281038252602a815260200180611c0e602a913960400191505060405180910390fd5b6060611972848460008561197a565b949350505050565b6060824710156119bb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611b9c6026913960400191505060405180910390fd5b6119c485611acb565b611a15576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611a545780518252601f199092019160209182019101611a35565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ab6576040519150601f19603f3d011682016040523d82523d6000602084013e611abb565b606091505b5091509150611129828286611ad1565b3b151590565b60608315611ae0575081611593565b825115611af05782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b3a578181015183820152602001611b22565b50505050905090810190601f168015611b675780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536e6f775573646347656e657369733a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f37e9938cbe40c5004e7b604a8de8ac0a091a719911322158560b51f80de7e3764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6849,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6871,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "snow",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1177"
      },
      {
        "astId": 6873,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "depositToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1177"
      },
      {
        "astId": 6876,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)6869_storage)dyn_storage"
      },
      {
        "astId": 6882,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6858_storage))"
      },
      {
        "astId": 6885,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6887,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "poolStartTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6889,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "poolEndTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6891,
        "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
        "label": "snowPerSecond",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)6869_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6869_storage",
        "encoding": "dynamic_array",
        "label": "struct SnowGenesisRewardPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1177": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)6858_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SnowGenesisRewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6858_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6858_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SnowGenesisRewardPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6858_storage)"
      },
      "t_struct(PoolInfo)6869_storage": {
        "encoding": "inplace",
        "label": "struct SnowGenesisRewardPool.PoolInfo",
        "members": [
          {
            "astId": 6860,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1177"
          },
          {
            "astId": 6862,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6864,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6866,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "accSnowPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6868,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "isStarted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)6858_storage": {
        "encoding": "inplace",
        "label": "struct SnowGenesisRewardPool.UserInfo",
        "members": [
          {
            "astId": 6855,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6857,
            "contract": "contracts/SnowGenesisRewardPool.sol:SnowGenesisRewardPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}