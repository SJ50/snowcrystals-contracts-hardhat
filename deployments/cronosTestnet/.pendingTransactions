{
  "0xcf9c1f734f672b55a6a9d8f3d50864b86c49c0b3d170a09d26941b96c2501ea0": {
    "name": "Snow",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Snow",
      "sourceName": "contracts/Snow.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol_",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOperator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOperator",
              "type": "address"
            }
          ],
          "name": "OperatorTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "TokenBurned",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BASIS_POINTS_DENOM",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "INITIAL_DAO_WALLET_DISTRIBUTION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "INITIAL_GENESIS_POOL_DISTRIBUTION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_TAX_RATE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "burnFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_genesisPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_daoWallet",
              "type": "address"
            }
          ],
          "name": "distributeReward",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "dynamicTaxRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "enableDynamicTax",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getCurrentTaxRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "governanceRecoverUnsupported",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isOperator",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            }
          ],
          "name": "isWhitelistedRecipient",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isWhitelisted",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            }
          ],
          "name": "isWhitelistedSender",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isWhitelisted",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount_",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "operator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardPoolDistributed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_enableDynamicTax",
              "type": "bool"
            }
          ],
          "name": "setEnableDynamicTax",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_taxRate",
              "type": "uint256"
            }
          ],
          "name": "setStaticTaxRate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_taxOffice",
              "type": "address"
            }
          ],
          "name": "setTaxOffice",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            }
          ],
          "name": "setWhitelistType",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "staticTaxRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "taxOffice",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "taxRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalBurned",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "successFlag",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOperator_",
              "type": "address"
            }
          ],
          "name": "transferOperator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "whitelistType",
          "outputs": [
            {
              "internalType": "enum ERC20Taxable.WhitelistType",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6080604052600d805460ff191690553480156200001b57600080fd5b506040516200251638038062002516833981810160405260408110156200004157600080fd5b81019080805160405193929190846401000000008211156200006257600080fd5b9083019060208201858111156200007857600080fd5b82516401000000008111828201881017156200009357600080fd5b82525081516020918201929091019080838360005b83811015620000c2578181015183820152602001620000a8565b50505050905090810190601f168015620000f05780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011457600080fd5b9083019060208201858111156200012a57600080fd5b82516401000000008111828201881017156200014557600080fd5b82525081516020918201929091019080838360005b83811015620001745781810151838201526020016200015a565b50505050905090810190601f168015620001a25780820380516001836020036101000a031916815260200191505b50604052505050818181818160039080519060200190620001c59291906200043d565b508051620001db9060049060208401906200043d565b50506005805460ff19166012179055506000620001f7620002c3565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000257620002c3565b600680546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a350620002bb905033683635c9adc5dea00000620002c7565b5050620004d9565b3390565b6001600160a01b03821662000323576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200033160008383620003d6565b6200034d81600254620003db60201b620014621790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200038091839062001462620003db821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000436576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048057805160ff1916838001178555620004b0565b82800160010185558215620004b0579182015b82811115620004b057825182559160200191906001019062000493565b50620004be929150620004c2565b5090565b5b80821115620004be5760008155600101620004c3565b61202d80620004e96000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c8063570ca7351161018657806395d89b41116100e3578063dd62ed3e11610097578063f2fde38b11610071578063f2fde38b1461072f578063f4fd47cf14610755578063fe46be4414610783576102d3565b8063dd62ed3e146106dc578063e1ea1fa31461070a578063f1b15c9414610727576102d3565b8063a457c2d7116100c8578063a457c2d71461067c578063a9059cbb146106a8578063d89135cd146106d4576102d3565b806395d89b411461066c5780639662676c14610674576102d3565b8063715018a61161013a57806379cc67901161011f57806379cc6790146106305780638da5cb5b1461065c5780638fa8173214610664576102d3565b8063715018a614610620578063771a3a1d14610628576102d3565b806364f53f2e1161016b57806364f53f2e146105ea578063678014b0146105f257806370a08231146105fa576102d3565b8063570ca735146105da57806361482bed146105e2576102d3565b806339509351116102345780634456eda2116101e85780634e20a02c116101cd5780634e20a02c146105945780635024ec1f1461059c57806354575af4146105a4576102d3565b80634456eda214610566578063483846401461056e576102d3565b80633f07d76a116102195780633f07d76a146104f757806340c10f191461051d57806342966c6814610549576102d3565b806339509351146104a75780633e5f13d4146104d3576102d3565b806323b872dd1161028b578063313ce56711610270578063313ce56714610462578063323440d11461048057806338d2776e14610488576102d3565b806323b872dd1461040657806329605e771461043c576102d3565b806318160ddd116102bc57806318160ddd146103955780631b9e2fad146103af578063232798df146103d5576102d3565b806306fdde03146102d8578063095ea7b314610355575b600080fd5b6102e06107ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103816004803603604081101561036b57600080fd5b506001600160a01b038135169060200135610860565b604080519115158252519081900360200190f35b61039d61087e565b60408051918252519081900360200190f35b610381600480360360208110156103c557600080fd5b50356001600160a01b0316610884565b610404600480360360408110156103eb57600080fd5b5080356001600160a01b0316906020013560ff166108e7565b005b6103816004803603606081101561041c57600080fd5b506001600160a01b03813581169160208101359091169060400135610974565b6104046004803603602081101561045257600080fd5b50356001600160a01b0316610aad565b61046a610b2d565b6040805160ff9092168252519081900360200190f35b61039d610b36565b6104046004803603602081101561049e57600080fd5b50351515610b43565b610381600480360360408110156104bd57600080fd5b506001600160a01b038135169060200135610b9f565b6104db610bf2565b604080516001600160a01b039092168252519081900360200190f35b6104046004803603602081101561050d57600080fd5b50356001600160a01b0316610c01565b6103816004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c79565b6104046004803603602081101561055f57600080fd5b5035610cf3565b610381610cfc565b6103816004803603602081101561058457600080fd5b50356001600160a01b0316610d22565b61039d610d2b565b61039d610d39565b610404600480360360608110156105ba57600080fd5b506001600160a01b03813581169160208101359160409091013516610d3f565b6104db610e10565b61039d610e1f565b61039d610e25565b61039d610e67565b61039d6004803603602081101561061057600080fd5b50356001600160a01b0316610e6d565b610404610e88565b61039d610f59565b6104046004803603604081101561064657600080fd5b506001600160a01b038135169060200135610f5f565b6104db610fb6565b61039d610fca565b6102e0610fd0565b610381611031565b6103816004803603604081101561069257600080fd5b506001600160a01b03813516906020013561103a565b610381600480360360408110156106be57600080fd5b506001600160a01b0381351690602001356110a2565b61039d6110b6565b61039d600480360360408110156106f257600080fd5b506001600160a01b03813581169160200135166110bc565b6104046004803603602081101561072057600080fd5b50356110e7565b61038161118c565b6104046004803603602081101561074557600080fd5b50356001600160a01b0316611195565b6104046004803603604081101561076b57600080fd5b506001600160a01b03813581169160200135166112c2565b6107a96004803603602081101561079957600080fd5b50356001600160a01b031661144d565b604051808260038111156107b957fe5b815260200191505060405180910390f35b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600061087461086d6114c3565b84846114c7565b5060015b92915050565b60025490565b600060015b6001600160a01b03831660009081526007602052604090205460ff1660038111156108b057fe5b1480610878575060036001600160a01b03831660009081526007602052604090205460ff1660038111156108e057fe5b1492915050565b600b546001600160a01b031633146109305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b8060ff16600381111561093f57fe5b6001600160a01b0383166000908152600760205260409020805460ff1916600183600381111561096b57fe5b02179055505050565b600061097f84610884565b158015610992575061099083610d22565b155b15610a9a5760006109a1610e25565b90508015610a9857600b54604080517f5803abaa0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301529151600093610a51931691635803abaa91604480830192602092919082900301818887803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b5051612710906115b3565b9050610a69612710610a638484611610565b90611669565b91506000610a7d612710610a638786611610565b9050610a8985826115b3565b9450610a9587826116d0565b50505b505b610aa5848484611783565b949350505050565b610ab56114c3565b6001600160a01b0316610ac6610fb6565b6001600160a01b031614610b21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b2a81611805565b50565b60055460ff1690565b683635c9adc5dea0000081565b600b546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b6008805460ff1916911515919091179055565b6000610874610bac6114c3565b84610bed8560016000610bbd6114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611462565b6114c7565b600b546001600160a01b031681565b6006546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610cc55760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b6000610cd084610e6d565b9050610cdc84846118af565b6000610ce785610e6d565b91909111949350505050565b610b2a8161199f565b6006546000906001600160a01b0316610d136114c3565b6001600160a01b031614905090565b60006002610889565b6905150ae84a8cdf00000081565b60095481565b6006546001600160a01b03163314610d885760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b5050505050565b6006546001600160a01b031690565b600a5481565b600954600c5560085460009060ff16151560011415610e6057610e466119b0565b610dac600a541115610e5957610dac600a555b600a54600c555b50600c5490565b61271081565b6001600160a01b031660009081526020819052604090205490565b610e906114c3565b6001600160a01b0316610ea1610fb6565b6001600160a01b031614610efc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600c5481565b6006546001600160a01b03163314610fa85760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b610fb28282611a2f565b5050565b60055461010090046001600160a01b031690565b610dac81565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b600d5460ff1681565b60006108746110476114c3565b84610bed85604051806060016040528060258152602001611fd360259139600160006110716114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611a89565b60006108746110af6114c3565b8484611b20565b600e5481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546001600160a01b031633146111305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b610dac811115611187576040805162461bcd60e51b815260206004820152601d60248201527f4572726f723a204d61782074617820726174652065786365656465642e000000604482015290519081900360640190fd5b600955565b60085460ff1681565b61119d6114c3565b6001600160a01b03166111ae610fb6565b6001600160a01b031614611209576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661124e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e1a6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6006546001600160a01b0316331461130b5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600d5460ff1615611363576040805162461bcd60e51b815260206004820152601f60248201527f4572726f723a2063616e206f6e6c792064697374726962757465206f6e636500604482015290519081900360640190fd5b6001600160a01b0382166113be576040805162461bcd60e51b815260206004820152600d60248201527f215f67656e65736973506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611419576040805162461bcd60e51b815260206004820152600b60248201527f215f64616f57616c6c6574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905561143a826905150ae84a8cdf0000006118af565b610fb281683635c9adc5dea000006118af565b60076020526000908152604090205460ff1681565b6000828201838110156114bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b03831661150c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611faf6024913960400191505060405180910390fd5b6001600160a01b0382166115515760405162461bcd60e51b8152600401808060200182810382526022815260200180611e406022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008282111561160a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261161f57506000610878565b8282028284828161162c57fe5b04146114bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ed86021913960400191505060405180910390fd5b60008082116116bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116c857fe5b049392505050565b600b546116e89083906001600160a01b0316836114c7565b600b546117009083906001600160a01b031683611783565b50600b54604080517fbfc770a80000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163bfc770a89160248082019260009290919082900301818387803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b505050505050565b6000611790848484611b20565b6117fb8461179c6114c3565b610bed85604051806060016040528060288152602001611ef9602891396001600160a01b038a166000908152600160205260408120906117da6114c3565b6001600160a01b031681526020810191909152604001600020549190611a89565b5060019392505050565b6001600160a01b03811661184a5760405162461bcd60e51b815260040180806020018281038252602d815260200180611eab602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03821661190a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61191660008383611a84565b6002546119239082611462565b6002556001600160a01b0382166000908152602081905260409020546119499082611462565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610b2a6119aa6114c3565b82611c7b565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d39abead6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600a55565b6000611a6682604051806060016040528060248152602001611f2160249139611a5f86611a5a6114c3565b6110bc565b9190611a89565b9050611a7a83611a746114c3565b836114c7565b611a848383611c7b565b505050565b60008184841115611b185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038316611b655760405162461bcd60e51b8152600401808060200182810382526025815260200180611f8a6025913960400191505060405180910390fd5b6001600160a01b038216611baa5760405162461bcd60e51b8152600401808060200182810382526023815260200180611dd56023913960400191505060405180910390fd5b611bb5838383611a84565b611bf281604051806060016040528060268152602001611e62602691396001600160a01b0386166000908152602081905260409020549190611a89565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611c219082611462565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c858282611cd8565b600e54611c929082611462565b600e556040805182815290516001600160a01b038416917f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa2919081900360200190a25050565b6001600160a01b038216611d1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f696021913960400191505060405180910390fd5b611d2982600083611a84565b611d6681604051806060016040528060228152602001611df8602291396001600160a01b0385166000908152602081905260409020549190611a89565b6001600160a01b038316600090815260208190526040902055600254611d8c90826115b3565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654572726f723a2043616c6c6572206973206e6f742074686520746178206f66666963656f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63656f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f7245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220458e7a72a15d3459227200b9e2b0574ffd68dcc2ff0a198b86adc3aba3df980d64736f6c634300060c0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c8063570ca7351161018657806395d89b41116100e3578063dd62ed3e11610097578063f2fde38b11610071578063f2fde38b1461072f578063f4fd47cf14610755578063fe46be4414610783576102d3565b8063dd62ed3e146106dc578063e1ea1fa31461070a578063f1b15c9414610727576102d3565b8063a457c2d7116100c8578063a457c2d71461067c578063a9059cbb146106a8578063d89135cd146106d4576102d3565b806395d89b411461066c5780639662676c14610674576102d3565b8063715018a61161013a57806379cc67901161011f57806379cc6790146106305780638da5cb5b1461065c5780638fa8173214610664576102d3565b8063715018a614610620578063771a3a1d14610628576102d3565b806364f53f2e1161016b57806364f53f2e146105ea578063678014b0146105f257806370a08231146105fa576102d3565b8063570ca735146105da57806361482bed146105e2576102d3565b806339509351116102345780634456eda2116101e85780634e20a02c116101cd5780634e20a02c146105945780635024ec1f1461059c57806354575af4146105a4576102d3565b80634456eda214610566578063483846401461056e576102d3565b80633f07d76a116102195780633f07d76a146104f757806340c10f191461051d57806342966c6814610549576102d3565b806339509351146104a75780633e5f13d4146104d3576102d3565b806323b872dd1161028b578063313ce56711610270578063313ce56714610462578063323440d11461048057806338d2776e14610488576102d3565b806323b872dd1461040657806329605e771461043c576102d3565b806318160ddd116102bc57806318160ddd146103955780631b9e2fad146103af578063232798df146103d5576102d3565b806306fdde03146102d8578063095ea7b314610355575b600080fd5b6102e06107ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103816004803603604081101561036b57600080fd5b506001600160a01b038135169060200135610860565b604080519115158252519081900360200190f35b61039d61087e565b60408051918252519081900360200190f35b610381600480360360208110156103c557600080fd5b50356001600160a01b0316610884565b610404600480360360408110156103eb57600080fd5b5080356001600160a01b0316906020013560ff166108e7565b005b6103816004803603606081101561041c57600080fd5b506001600160a01b03813581169160208101359091169060400135610974565b6104046004803603602081101561045257600080fd5b50356001600160a01b0316610aad565b61046a610b2d565b6040805160ff9092168252519081900360200190f35b61039d610b36565b6104046004803603602081101561049e57600080fd5b50351515610b43565b610381600480360360408110156104bd57600080fd5b506001600160a01b038135169060200135610b9f565b6104db610bf2565b604080516001600160a01b039092168252519081900360200190f35b6104046004803603602081101561050d57600080fd5b50356001600160a01b0316610c01565b6103816004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c79565b6104046004803603602081101561055f57600080fd5b5035610cf3565b610381610cfc565b6103816004803603602081101561058457600080fd5b50356001600160a01b0316610d22565b61039d610d2b565b61039d610d39565b610404600480360360608110156105ba57600080fd5b506001600160a01b03813581169160208101359160409091013516610d3f565b6104db610e10565b61039d610e1f565b61039d610e25565b61039d610e67565b61039d6004803603602081101561061057600080fd5b50356001600160a01b0316610e6d565b610404610e88565b61039d610f59565b6104046004803603604081101561064657600080fd5b506001600160a01b038135169060200135610f5f565b6104db610fb6565b61039d610fca565b6102e0610fd0565b610381611031565b6103816004803603604081101561069257600080fd5b506001600160a01b03813516906020013561103a565b610381600480360360408110156106be57600080fd5b506001600160a01b0381351690602001356110a2565b61039d6110b6565b61039d600480360360408110156106f257600080fd5b506001600160a01b03813581169160200135166110bc565b6104046004803603602081101561072057600080fd5b50356110e7565b61038161118c565b6104046004803603602081101561074557600080fd5b50356001600160a01b0316611195565b6104046004803603604081101561076b57600080fd5b506001600160a01b03813581169160200135166112c2565b6107a96004803603602081101561079957600080fd5b50356001600160a01b031661144d565b604051808260038111156107b957fe5b815260200191505060405180910390f35b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600061087461086d6114c3565b84846114c7565b5060015b92915050565b60025490565b600060015b6001600160a01b03831660009081526007602052604090205460ff1660038111156108b057fe5b1480610878575060036001600160a01b03831660009081526007602052604090205460ff1660038111156108e057fe5b1492915050565b600b546001600160a01b031633146109305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b8060ff16600381111561093f57fe5b6001600160a01b0383166000908152600760205260409020805460ff1916600183600381111561096b57fe5b02179055505050565b600061097f84610884565b158015610992575061099083610d22565b155b15610a9a5760006109a1610e25565b90508015610a9857600b54604080517f5803abaa0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301529151600093610a51931691635803abaa91604480830192602092919082900301818887803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b5051612710906115b3565b9050610a69612710610a638484611610565b90611669565b91506000610a7d612710610a638786611610565b9050610a8985826115b3565b9450610a9587826116d0565b50505b505b610aa5848484611783565b949350505050565b610ab56114c3565b6001600160a01b0316610ac6610fb6565b6001600160a01b031614610b21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b2a81611805565b50565b60055460ff1690565b683635c9adc5dea0000081565b600b546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b6008805460ff1916911515919091179055565b6000610874610bac6114c3565b84610bed8560016000610bbd6114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611462565b6114c7565b600b546001600160a01b031681565b6006546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610cc55760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b6000610cd084610e6d565b9050610cdc84846118af565b6000610ce785610e6d565b91909111949350505050565b610b2a8161199f565b6006546000906001600160a01b0316610d136114c3565b6001600160a01b031614905090565b60006002610889565b6905150ae84a8cdf00000081565b60095481565b6006546001600160a01b03163314610d885760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b5050505050565b6006546001600160a01b031690565b600a5481565b600954600c5560085460009060ff16151560011415610e6057610e466119b0565b610dac600a541115610e5957610dac600a555b600a54600c555b50600c5490565b61271081565b6001600160a01b031660009081526020819052604090205490565b610e906114c3565b6001600160a01b0316610ea1610fb6565b6001600160a01b031614610efc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600c5481565b6006546001600160a01b03163314610fa85760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b610fb28282611a2f565b5050565b60055461010090046001600160a01b031690565b610dac81565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b600d5460ff1681565b60006108746110476114c3565b84610bed85604051806060016040528060258152602001611fd360259139600160006110716114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611a89565b60006108746110af6114c3565b8484611b20565b600e5481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546001600160a01b031633146111305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b610dac811115611187576040805162461bcd60e51b815260206004820152601d60248201527f4572726f723a204d61782074617820726174652065786365656465642e000000604482015290519081900360640190fd5b600955565b60085460ff1681565b61119d6114c3565b6001600160a01b03166111ae610fb6565b6001600160a01b031614611209576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661124e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e1a6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6006546001600160a01b0316331461130b5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600d5460ff1615611363576040805162461bcd60e51b815260206004820152601f60248201527f4572726f723a2063616e206f6e6c792064697374726962757465206f6e636500604482015290519081900360640190fd5b6001600160a01b0382166113be576040805162461bcd60e51b815260206004820152600d60248201527f215f67656e65736973506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611419576040805162461bcd60e51b815260206004820152600b60248201527f215f64616f57616c6c6574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905561143a826905150ae84a8cdf0000006118af565b610fb281683635c9adc5dea000006118af565b60076020526000908152604090205460ff1681565b6000828201838110156114bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b03831661150c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611faf6024913960400191505060405180910390fd5b6001600160a01b0382166115515760405162461bcd60e51b8152600401808060200182810382526022815260200180611e406022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008282111561160a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261161f57506000610878565b8282028284828161162c57fe5b04146114bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ed86021913960400191505060405180910390fd5b60008082116116bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116c857fe5b049392505050565b600b546116e89083906001600160a01b0316836114c7565b600b546117009083906001600160a01b031683611783565b50600b54604080517fbfc770a80000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163bfc770a89160248082019260009290919082900301818387803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b505050505050565b6000611790848484611b20565b6117fb8461179c6114c3565b610bed85604051806060016040528060288152602001611ef9602891396001600160a01b038a166000908152600160205260408120906117da6114c3565b6001600160a01b031681526020810191909152604001600020549190611a89565b5060019392505050565b6001600160a01b03811661184a5760405162461bcd60e51b815260040180806020018281038252602d815260200180611eab602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03821661190a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61191660008383611a84565b6002546119239082611462565b6002556001600160a01b0382166000908152602081905260409020546119499082611462565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610b2a6119aa6114c3565b82611c7b565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d39abead6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600a55565b6000611a6682604051806060016040528060248152602001611f2160249139611a5f86611a5a6114c3565b6110bc565b9190611a89565b9050611a7a83611a746114c3565b836114c7565b611a848383611c7b565b505050565b60008184841115611b185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038316611b655760405162461bcd60e51b8152600401808060200182810382526025815260200180611f8a6025913960400191505060405180910390fd5b6001600160a01b038216611baa5760405162461bcd60e51b8152600401808060200182810382526023815260200180611dd56023913960400191505060405180910390fd5b611bb5838383611a84565b611bf281604051806060016040528060268152602001611e62602691396001600160a01b0386166000908152602081905260409020549190611a89565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611c219082611462565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c858282611cd8565b600e54611c929082611462565b600e556040805182815290516001600160a01b038416917f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa2919081900360200190a25050565b6001600160a01b038216611d1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f696021913960400191505060405180910390fd5b611d2982600083611a84565b611d6681604051806060016040528060228152602001611df8602291396001600160a01b0385166000908152602081905260409020549190611a89565b6001600160a01b038316600090815260208190526040902055600254611d8c90826115b3565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654572726f723a2043616c6c6572206973206e6f742074686520746178206f66666963656f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63656f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f7245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220458e7a72a15d3459227200b9e2b0574ffd68dcc2ff0a198b86adc3aba3df980d64736f6c634300060c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
          },
          "burnFrom(address,uint256)": {
            "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "6080604052600d805460ff191690553480156200001b57600080fd5b506040516200251638038062002516833981810160405260408110156200004157600080fd5b81019080805160405193929190846401000000008211156200006257600080fd5b9083019060208201858111156200007857600080fd5b82516401000000008111828201881017156200009357600080fd5b82525081516020918201929091019080838360005b83811015620000c2578181015183820152602001620000a8565b50505050905090810190601f168015620000f05780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011457600080fd5b9083019060208201858111156200012a57600080fd5b82516401000000008111828201881017156200014557600080fd5b82525081516020918201929091019080838360005b83811015620001745781810151838201526020016200015a565b50505050905090810190601f168015620001a25780820380516001836020036101000a031916815260200191505b50604052505050818181818160039080519060200190620001c59291906200043d565b508051620001db9060049060208401906200043d565b50506005805460ff19166012179055506000620001f7620002c3565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000257620002c3565b600680546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a350620002bb905033683635c9adc5dea00000620002c7565b5050620004d9565b3390565b6001600160a01b03821662000323576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200033160008383620003d6565b6200034d81600254620003db60201b620014621790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200038091839062001462620003db821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000436576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048057805160ff1916838001178555620004b0565b82800160010185558215620004b0579182015b82811115620004b057825182559160200191906001019062000493565b50620004be929150620004c2565b5090565b5b80821115620004be5760008155600101620004c3565b61202d80620004e96000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c8063570ca7351161018657806395d89b41116100e3578063dd62ed3e11610097578063f2fde38b11610071578063f2fde38b1461072f578063f4fd47cf14610755578063fe46be4414610783576102d3565b8063dd62ed3e146106dc578063e1ea1fa31461070a578063f1b15c9414610727576102d3565b8063a457c2d7116100c8578063a457c2d71461067c578063a9059cbb146106a8578063d89135cd146106d4576102d3565b806395d89b411461066c5780639662676c14610674576102d3565b8063715018a61161013a57806379cc67901161011f57806379cc6790146106305780638da5cb5b1461065c5780638fa8173214610664576102d3565b8063715018a614610620578063771a3a1d14610628576102d3565b806364f53f2e1161016b57806364f53f2e146105ea578063678014b0146105f257806370a08231146105fa576102d3565b8063570ca735146105da57806361482bed146105e2576102d3565b806339509351116102345780634456eda2116101e85780634e20a02c116101cd5780634e20a02c146105945780635024ec1f1461059c57806354575af4146105a4576102d3565b80634456eda214610566578063483846401461056e576102d3565b80633f07d76a116102195780633f07d76a146104f757806340c10f191461051d57806342966c6814610549576102d3565b806339509351146104a75780633e5f13d4146104d3576102d3565b806323b872dd1161028b578063313ce56711610270578063313ce56714610462578063323440d11461048057806338d2776e14610488576102d3565b806323b872dd1461040657806329605e771461043c576102d3565b806318160ddd116102bc57806318160ddd146103955780631b9e2fad146103af578063232798df146103d5576102d3565b806306fdde03146102d8578063095ea7b314610355575b600080fd5b6102e06107ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103816004803603604081101561036b57600080fd5b506001600160a01b038135169060200135610860565b604080519115158252519081900360200190f35b61039d61087e565b60408051918252519081900360200190f35b610381600480360360208110156103c557600080fd5b50356001600160a01b0316610884565b610404600480360360408110156103eb57600080fd5b5080356001600160a01b0316906020013560ff166108e7565b005b6103816004803603606081101561041c57600080fd5b506001600160a01b03813581169160208101359091169060400135610974565b6104046004803603602081101561045257600080fd5b50356001600160a01b0316610aad565b61046a610b2d565b6040805160ff9092168252519081900360200190f35b61039d610b36565b6104046004803603602081101561049e57600080fd5b50351515610b43565b610381600480360360408110156104bd57600080fd5b506001600160a01b038135169060200135610b9f565b6104db610bf2565b604080516001600160a01b039092168252519081900360200190f35b6104046004803603602081101561050d57600080fd5b50356001600160a01b0316610c01565b6103816004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c79565b6104046004803603602081101561055f57600080fd5b5035610cf3565b610381610cfc565b6103816004803603602081101561058457600080fd5b50356001600160a01b0316610d22565b61039d610d2b565b61039d610d39565b610404600480360360608110156105ba57600080fd5b506001600160a01b03813581169160208101359160409091013516610d3f565b6104db610e10565b61039d610e1f565b61039d610e25565b61039d610e67565b61039d6004803603602081101561061057600080fd5b50356001600160a01b0316610e6d565b610404610e88565b61039d610f59565b6104046004803603604081101561064657600080fd5b506001600160a01b038135169060200135610f5f565b6104db610fb6565b61039d610fca565b6102e0610fd0565b610381611031565b6103816004803603604081101561069257600080fd5b506001600160a01b03813516906020013561103a565b610381600480360360408110156106be57600080fd5b506001600160a01b0381351690602001356110a2565b61039d6110b6565b61039d600480360360408110156106f257600080fd5b506001600160a01b03813581169160200135166110bc565b6104046004803603602081101561072057600080fd5b50356110e7565b61038161118c565b6104046004803603602081101561074557600080fd5b50356001600160a01b0316611195565b6104046004803603604081101561076b57600080fd5b506001600160a01b03813581169160200135166112c2565b6107a96004803603602081101561079957600080fd5b50356001600160a01b031661144d565b604051808260038111156107b957fe5b815260200191505060405180910390f35b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600061087461086d6114c3565b84846114c7565b5060015b92915050565b60025490565b600060015b6001600160a01b03831660009081526007602052604090205460ff1660038111156108b057fe5b1480610878575060036001600160a01b03831660009081526007602052604090205460ff1660038111156108e057fe5b1492915050565b600b546001600160a01b031633146109305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b8060ff16600381111561093f57fe5b6001600160a01b0383166000908152600760205260409020805460ff1916600183600381111561096b57fe5b02179055505050565b600061097f84610884565b158015610992575061099083610d22565b155b15610a9a5760006109a1610e25565b90508015610a9857600b54604080517f5803abaa0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301529151600093610a51931691635803abaa91604480830192602092919082900301818887803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b5051612710906115b3565b9050610a69612710610a638484611610565b90611669565b91506000610a7d612710610a638786611610565b9050610a8985826115b3565b9450610a9587826116d0565b50505b505b610aa5848484611783565b949350505050565b610ab56114c3565b6001600160a01b0316610ac6610fb6565b6001600160a01b031614610b21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b2a81611805565b50565b60055460ff1690565b683635c9adc5dea0000081565b600b546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b6008805460ff1916911515919091179055565b6000610874610bac6114c3565b84610bed8560016000610bbd6114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611462565b6114c7565b600b546001600160a01b031681565b6006546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610cc55760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b6000610cd084610e6d565b9050610cdc84846118af565b6000610ce785610e6d565b91909111949350505050565b610b2a8161199f565b6006546000906001600160a01b0316610d136114c3565b6001600160a01b031614905090565b60006002610889565b6905150ae84a8cdf00000081565b60095481565b6006546001600160a01b03163314610d885760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b5050505050565b6006546001600160a01b031690565b600a5481565b600954600c5560085460009060ff16151560011415610e6057610e466119b0565b610dac600a541115610e5957610dac600a555b600a54600c555b50600c5490565b61271081565b6001600160a01b031660009081526020819052604090205490565b610e906114c3565b6001600160a01b0316610ea1610fb6565b6001600160a01b031614610efc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600c5481565b6006546001600160a01b03163314610fa85760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b610fb28282611a2f565b5050565b60055461010090046001600160a01b031690565b610dac81565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b600d5460ff1681565b60006108746110476114c3565b84610bed85604051806060016040528060258152602001611fd360259139600160006110716114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611a89565b60006108746110af6114c3565b8484611b20565b600e5481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546001600160a01b031633146111305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b610dac811115611187576040805162461bcd60e51b815260206004820152601d60248201527f4572726f723a204d61782074617820726174652065786365656465642e000000604482015290519081900360640190fd5b600955565b60085460ff1681565b61119d6114c3565b6001600160a01b03166111ae610fb6565b6001600160a01b031614611209576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661124e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e1a6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6006546001600160a01b0316331461130b5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600d5460ff1615611363576040805162461bcd60e51b815260206004820152601f60248201527f4572726f723a2063616e206f6e6c792064697374726962757465206f6e636500604482015290519081900360640190fd5b6001600160a01b0382166113be576040805162461bcd60e51b815260206004820152600d60248201527f215f67656e65736973506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611419576040805162461bcd60e51b815260206004820152600b60248201527f215f64616f57616c6c6574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905561143a826905150ae84a8cdf0000006118af565b610fb281683635c9adc5dea000006118af565b60076020526000908152604090205460ff1681565b6000828201838110156114bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b03831661150c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611faf6024913960400191505060405180910390fd5b6001600160a01b0382166115515760405162461bcd60e51b8152600401808060200182810382526022815260200180611e406022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008282111561160a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261161f57506000610878565b8282028284828161162c57fe5b04146114bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ed86021913960400191505060405180910390fd5b60008082116116bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116c857fe5b049392505050565b600b546116e89083906001600160a01b0316836114c7565b600b546117009083906001600160a01b031683611783565b50600b54604080517fbfc770a80000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163bfc770a89160248082019260009290919082900301818387803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b505050505050565b6000611790848484611b20565b6117fb8461179c6114c3565b610bed85604051806060016040528060288152602001611ef9602891396001600160a01b038a166000908152600160205260408120906117da6114c3565b6001600160a01b031681526020810191909152604001600020549190611a89565b5060019392505050565b6001600160a01b03811661184a5760405162461bcd60e51b815260040180806020018281038252602d815260200180611eab602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03821661190a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61191660008383611a84565b6002546119239082611462565b6002556001600160a01b0382166000908152602081905260409020546119499082611462565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610b2a6119aa6114c3565b82611c7b565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d39abead6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600a55565b6000611a6682604051806060016040528060248152602001611f2160249139611a5f86611a5a6114c3565b6110bc565b9190611a89565b9050611a7a83611a746114c3565b836114c7565b611a848383611c7b565b505050565b60008184841115611b185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038316611b655760405162461bcd60e51b8152600401808060200182810382526025815260200180611f8a6025913960400191505060405180910390fd5b6001600160a01b038216611baa5760405162461bcd60e51b8152600401808060200182810382526023815260200180611dd56023913960400191505060405180910390fd5b611bb5838383611a84565b611bf281604051806060016040528060268152602001611e62602691396001600160a01b0386166000908152602081905260409020549190611a89565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611c219082611462565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c858282611cd8565b600e54611c929082611462565b600e556040805182815290516001600160a01b038416917f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa2919081900360200190a25050565b6001600160a01b038216611d1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f696021913960400191505060405180910390fd5b611d2982600083611a84565b611d6681604051806060016040528060228152602001611df8602291396001600160a01b0385166000908152602081905260409020549190611a89565b6001600160a01b038316600090815260208190526040902055600254611d8c90826115b3565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654572726f723a2043616c6c6572206973206e6f742074686520746178206f66666963656f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63656f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f7245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220458e7a72a15d3459227200b9e2b0574ffd68dcc2ff0a198b86adc3aba3df980d64736f6c634300060c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2516 CODESIZE SUB DUP1 PUSH3 0x2516 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH3 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0xA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xF0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH3 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x174 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x15A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1A2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP DUP2 DUP2 DUP2 DUP2 DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1C5 SWAP3 SWAP2 SWAP1 PUSH3 0x43D JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x1DB SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x43D JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE POP PUSH1 0x0 PUSH3 0x1F7 PUSH3 0x2C3 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH3 0x257 PUSH3 0x2C3 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 POP PUSH3 0x2BB SWAP1 POP CALLER PUSH9 0x3635C9ADC5DEA00000 PUSH3 0x2C7 JUMP JUMPDEST POP POP PUSH3 0x4D9 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x323 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH3 0x331 PUSH1 0x0 DUP4 DUP4 PUSH3 0x3D6 JUMP JUMPDEST PUSH3 0x34D DUP2 PUSH1 0x2 SLOAD PUSH3 0x3DB PUSH1 0x20 SHL PUSH3 0x1462 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH3 0x380 SWAP2 DUP4 SWAP1 PUSH3 0x1462 PUSH3 0x3DB DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 0x436 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x480 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x4B0 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x4B0 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x4B0 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x493 JUMP JUMPDEST POP PUSH3 0x4BE SWAP3 SWAP2 POP PUSH3 0x4C2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x4BE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x4C3 JUMP JUMPDEST PUSH2 0x202D DUP1 PUSH3 0x4E9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x570CA735 GT PUSH2 0x186 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x72F JUMPI DUP1 PUSH4 0xF4FD47CF EQ PUSH2 0x755 JUMPI DUP1 PUSH4 0xFE46BE44 EQ PUSH2 0x783 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0xE1EA1FA3 EQ PUSH2 0x70A JUMPI DUP1 PUSH4 0xF1B15C94 EQ PUSH2 0x727 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x67C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0xD89135CD EQ PUSH2 0x6D4 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0x9662676C EQ PUSH2 0x674 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x79CC6790 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0x8FA81732 EQ PUSH2 0x664 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x620 JUMPI DUP1 PUSH4 0x771A3A1D EQ PUSH2 0x628 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x64F53F2E GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x64F53F2E EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0x678014B0 EQ PUSH2 0x5F2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x5FA JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x570CA735 EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0x61482BED EQ PUSH2 0x5E2 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x234 JUMPI DUP1 PUSH4 0x4456EDA2 GT PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x4E20A02C GT PUSH2 0x1CD JUMPI DUP1 PUSH4 0x4E20A02C EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0x5024EC1F EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0x54575AF4 EQ PUSH2 0x5A4 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x4456EDA2 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x48384640 EQ PUSH2 0x56E JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x3F07D76A GT PUSH2 0x219 JUMPI DUP1 PUSH4 0x3F07D76A EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x549 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0x3E5F13D4 EQ PUSH2 0x4D3 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x28B JUMPI DUP1 PUSH4 0x313CE567 GT PUSH2 0x270 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0x323440D1 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0x38D2776E EQ PUSH2 0x488 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x43C JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x2BC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0x1B9E2FAD EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x232798DF EQ PUSH2 0x3D5 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x355 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x302 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x347 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x884 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0x8E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x974 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x46A PUSH2 0xB2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xBF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x381 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x39D PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE25 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x404 PUSH2 0xE88 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xF59 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x381 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x103A JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x39D PUSH2 0x10B6 JUMP JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x381 PUSH2 0x118C JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1195 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x7A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x799 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x144D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x7B9 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x856 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x82B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x856 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x839 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x86D PUSH2 0x14C3 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x14C7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8B0 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x878 JUMPI POP PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8E0 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x93F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x96B JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97F DUP5 PUSH2 0x884 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x992 JUMPI POP PUSH2 0x990 DUP4 PUSH2 0xD22 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 PUSH2 0x9A1 PUSH2 0xE25 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA98 JUMPI PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x5803ABAA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH2 0xA51 SWAP4 AND SWAP2 PUSH4 0x5803ABAA SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP9 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2710 SWAP1 PUSH2 0x15B3 JUMP JUMPDEST SWAP1 POP PUSH2 0xA69 PUSH2 0x2710 PUSH2 0xA63 DUP5 DUP5 PUSH2 0x1610 JUMP JUMPDEST SWAP1 PUSH2 0x1669 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xA7D PUSH2 0x2710 PUSH2 0xA63 DUP8 DUP7 PUSH2 0x1610 JUMP JUMPDEST SWAP1 POP PUSH2 0xA89 DUP6 DUP3 PUSH2 0x15B3 JUMP JUMPDEST SWAP5 POP PUSH2 0xA95 DUP8 DUP3 PUSH2 0x16D0 JUMP JUMPDEST POP POP JUMPDEST POP JUMPDEST PUSH2 0xAA5 DUP5 DUP5 DUP5 PUSH2 0x1783 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAC6 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0x1805 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0xBAC PUSH2 0x14C3 JUMP JUMPDEST DUP5 PUSH2 0xBED DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0xBBD PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1462 JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCD0 DUP5 PUSH2 0xE6D JUMP JUMPDEST SWAP1 POP PUSH2 0xCDC DUP5 DUP5 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE7 DUP6 PUSH2 0xE6D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 GT SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0x199F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD13 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0x889 JUMP JUMPDEST PUSH10 0x5150AE84A8CDF000000 DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xC SSTORE PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xE60 JUMPI PUSH2 0xE46 PUSH2 0x19B0 JUMP JUMPDEST PUSH2 0xDAC PUSH1 0xA SLOAD GT ISZERO PUSH2 0xE59 JUMPI PUSH2 0xDAC PUSH1 0xA SSTORE JUMPDEST PUSH1 0xA SLOAD PUSH1 0xC SSTORE JUMPDEST POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE90 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEA1 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xEFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFB2 DUP3 DUP3 PUSH2 0x1A2F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xDAC DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x856 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x82B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x856 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x1047 PUSH2 0x14C3 JUMP JUMPDEST DUP5 PUSH2 0xBED DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD3 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x1071 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x10AF PUSH2 0x14C3 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1130 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDAC DUP2 GT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A204D61782074617820726174652065786365656465642E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x119D PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11AE PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1209 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E1A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH2 0x100 SWAP1 DIV AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x130B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1363 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A2063616E206F6E6C792064697374726962757465206F6E636500 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x215F67656E65736973506F6F6C00000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1419 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x215F64616F57616C6C6574000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x143A DUP3 PUSH10 0x5150AE84A8CDF000000 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xFB2 DUP2 PUSH9 0x3635C9ADC5DEA00000 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x14BC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x150C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1FAF PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E40 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x160A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x161F JUMPI POP PUSH1 0x0 PUSH2 0x878 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x162C JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1ED8 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x16BF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x16C8 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x16E8 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x1700 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1783 JUMP JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xBFC770A800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xBFC770A8 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x177B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1790 DUP5 DUP5 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x17FB DUP5 PUSH2 0x179C PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0xBED DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EF9 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x17DA PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x184A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1EAB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x6 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x190A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1916 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1923 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1949 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xB2A PUSH2 0x19AA PUSH2 0x14C3 JUMP JUMPDEST DUP3 PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD39ABEAD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A66 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F21 PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x1A5F DUP7 PUSH2 0x1A5A PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x10BC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A7A DUP4 PUSH2 0x1A74 PUSH2 0x14C3 JUMP JUMPDEST DUP4 PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x1A84 DUP4 DUP4 PUSH2 0x1C7B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x1B18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1ADD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1AC5 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1B0A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1B65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F8A PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1BAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1DD5 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB5 DUP4 DUP4 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x1BF2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E62 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1C21 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1C85 DUP3 DUP3 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x1C92 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0x1AF5163F80E79B5E554F61E1D052084D3A3FE1166E42A265798C4E2DDCE8FFA2 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F69 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D29 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x1D66 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DF8 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x1D8C SWAP1 DUP3 PUSH2 0x15B3 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63654F776E61 PUSH3 0x6C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652074 PUSH16 0x20746865207A65726F20616464726573 PUSH20 0x45524332303A207472616E7366657220616D6F75 PUSH15 0x7420657863656564732062616C616E PUSH4 0x65457272 PUSH16 0x723A2043616C6C6572206973206E6F74 KECCAK256 PUSH21 0x686520746178206F66666963656F70657261746F72 GASPRICE KECCAK256 PUSH27 0x65726F206164647265737320676976656E20666F72206E6577206F PUSH17 0x657261746F72536166654D6174683A206D PUSH22 0x6C7469706C69636174696F6E206F766572666C6F7745 MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20627572 PUSH15 0x20616D6F756E742065786365656473 KECCAK256 PUSH2 0x6C6C PUSH16 0x77616E63656F70657261746F723A2063 PUSH2 0x6C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F70657261746F724552 NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A207472616E7366657220 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220458E PUSH27 0x72A15D3459227200B9E2B0574FFD68DCC2FF0A198B86ADC3ABA3DF SWAP9 0xD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMap": "135:3190:17:-:0;;;512:41;;;-1:-1:-1;;512:41:17;;;661:231;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;661:231:17;;;;;;;;;;-1:-1:-1;661:231:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;661:231:17;;;;;;;;;;-1:-1:-1;661:231:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;753:5;760:7;909:5:46;916:7;2040:5:3;2032;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2055:17:3;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2082:9:3;:14;;-1:-1:-1;;2082:14:3;2094:2;2082:14;;;-1:-1:-1;2082:9:3;904:12:0;:10;:12::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:0;;-1:-1:-1;;;;;926:18:0;;;;;;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:0;-1:-1:-1;;959:43:0;;-1:-1:-1;;959:43:0;-1:-1:-1;411:12:25;:10;:12::i;:::-;399:9;:24;;-1:-1:-1;;;;;;399:24:25;-1:-1:-1;;;;;399:24:25;;;;;;;;438:42;;470:9;;;-1:-1:-1;;438:42:25;;-1:-1:-1;;438:42:25;-1:-1:-1;855:30:17::1;::::0;-1:-1:-1;861:10:17::1;873:11;855:5;:30::i;:::-;661:231:::0;;135:3190;;598:104:8;685:10;598:104;:::o;7832:370:3:-;-1:-1:-1;;;;;7915:21:3;;7907:65;;;;;-1:-1:-1;;;7907:65:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7983:49;8012:1;8016:7;8025:6;7983:20;:49::i;:::-;8058:24;8075:6;8058:12;;:16;;;;;;:24;;;;:::i;:::-;8043:12;:39;-1:-1:-1;;;;;8113:18:3;;:9;:18;;;;;;;;;;;;:30;;8136:6;;8113:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;8092:18:3;;:9;:18;;;;;;;;;;;:51;;;;8158:37;;;;;;;8092:18;;:9;;8158:37;;;;;;;;;;7832:370;;:::o;10701:92::-;;;;:::o;2690:175:2:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2690:175;-1:-1:-1;;;2690:175:2:o;135:3190:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;135:3190:17;;;-1:-1:-1;135:3190:17;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106102d35760003560e01c8063570ca7351161018657806395d89b41116100e3578063dd62ed3e11610097578063f2fde38b11610071578063f2fde38b1461072f578063f4fd47cf14610755578063fe46be4414610783576102d3565b8063dd62ed3e146106dc578063e1ea1fa31461070a578063f1b15c9414610727576102d3565b8063a457c2d7116100c8578063a457c2d71461067c578063a9059cbb146106a8578063d89135cd146106d4576102d3565b806395d89b411461066c5780639662676c14610674576102d3565b8063715018a61161013a57806379cc67901161011f57806379cc6790146106305780638da5cb5b1461065c5780638fa8173214610664576102d3565b8063715018a614610620578063771a3a1d14610628576102d3565b806364f53f2e1161016b57806364f53f2e146105ea578063678014b0146105f257806370a08231146105fa576102d3565b8063570ca735146105da57806361482bed146105e2576102d3565b806339509351116102345780634456eda2116101e85780634e20a02c116101cd5780634e20a02c146105945780635024ec1f1461059c57806354575af4146105a4576102d3565b80634456eda214610566578063483846401461056e576102d3565b80633f07d76a116102195780633f07d76a146104f757806340c10f191461051d57806342966c6814610549576102d3565b806339509351146104a75780633e5f13d4146104d3576102d3565b806323b872dd1161028b578063313ce56711610270578063313ce56714610462578063323440d11461048057806338d2776e14610488576102d3565b806323b872dd1461040657806329605e771461043c576102d3565b806318160ddd116102bc57806318160ddd146103955780631b9e2fad146103af578063232798df146103d5576102d3565b806306fdde03146102d8578063095ea7b314610355575b600080fd5b6102e06107ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103816004803603604081101561036b57600080fd5b506001600160a01b038135169060200135610860565b604080519115158252519081900360200190f35b61039d61087e565b60408051918252519081900360200190f35b610381600480360360208110156103c557600080fd5b50356001600160a01b0316610884565b610404600480360360408110156103eb57600080fd5b5080356001600160a01b0316906020013560ff166108e7565b005b6103816004803603606081101561041c57600080fd5b506001600160a01b03813581169160208101359091169060400135610974565b6104046004803603602081101561045257600080fd5b50356001600160a01b0316610aad565b61046a610b2d565b6040805160ff9092168252519081900360200190f35b61039d610b36565b6104046004803603602081101561049e57600080fd5b50351515610b43565b610381600480360360408110156104bd57600080fd5b506001600160a01b038135169060200135610b9f565b6104db610bf2565b604080516001600160a01b039092168252519081900360200190f35b6104046004803603602081101561050d57600080fd5b50356001600160a01b0316610c01565b6103816004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c79565b6104046004803603602081101561055f57600080fd5b5035610cf3565b610381610cfc565b6103816004803603602081101561058457600080fd5b50356001600160a01b0316610d22565b61039d610d2b565b61039d610d39565b610404600480360360608110156105ba57600080fd5b506001600160a01b03813581169160208101359160409091013516610d3f565b6104db610e10565b61039d610e1f565b61039d610e25565b61039d610e67565b61039d6004803603602081101561061057600080fd5b50356001600160a01b0316610e6d565b610404610e88565b61039d610f59565b6104046004803603604081101561064657600080fd5b506001600160a01b038135169060200135610f5f565b6104db610fb6565b61039d610fca565b6102e0610fd0565b610381611031565b6103816004803603604081101561069257600080fd5b506001600160a01b03813516906020013561103a565b610381600480360360408110156106be57600080fd5b506001600160a01b0381351690602001356110a2565b61039d6110b6565b61039d600480360360408110156106f257600080fd5b506001600160a01b03813581169160200135166110bc565b6104046004803603602081101561072057600080fd5b50356110e7565b61038161118c565b6104046004803603602081101561074557600080fd5b50356001600160a01b0316611195565b6104046004803603604081101561076b57600080fd5b506001600160a01b03813581169160200135166112c2565b6107a96004803603602081101561079957600080fd5b50356001600160a01b031661144d565b604051808260038111156107b957fe5b815260200191505060405180910390f35b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600061087461086d6114c3565b84846114c7565b5060015b92915050565b60025490565b600060015b6001600160a01b03831660009081526007602052604090205460ff1660038111156108b057fe5b1480610878575060036001600160a01b03831660009081526007602052604090205460ff1660038111156108e057fe5b1492915050565b600b546001600160a01b031633146109305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b8060ff16600381111561093f57fe5b6001600160a01b0383166000908152600760205260409020805460ff1916600183600381111561096b57fe5b02179055505050565b600061097f84610884565b158015610992575061099083610d22565b155b15610a9a5760006109a1610e25565b90508015610a9857600b54604080517f5803abaa0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301529151600093610a51931691635803abaa91604480830192602092919082900301818887803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b5051612710906115b3565b9050610a69612710610a638484611610565b90611669565b91506000610a7d612710610a638786611610565b9050610a8985826115b3565b9450610a9587826116d0565b50505b505b610aa5848484611783565b949350505050565b610ab56114c3565b6001600160a01b0316610ac6610fb6565b6001600160a01b031614610b21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b2a81611805565b50565b60055460ff1690565b683635c9adc5dea0000081565b600b546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b6008805460ff1916911515919091179055565b6000610874610bac6114c3565b84610bed8560016000610bbd6114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611462565b6114c7565b600b546001600160a01b031681565b6006546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610cc55760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b6000610cd084610e6d565b9050610cdc84846118af565b6000610ce785610e6d565b91909111949350505050565b610b2a8161199f565b6006546000906001600160a01b0316610d136114c3565b6001600160a01b031614905090565b60006002610889565b6905150ae84a8cdf00000081565b60095481565b6006546001600160a01b03163314610d885760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b5050505050565b6006546001600160a01b031690565b600a5481565b600954600c5560085460009060ff16151560011415610e6057610e466119b0565b610dac600a541115610e5957610dac600a555b600a54600c555b50600c5490565b61271081565b6001600160a01b031660009081526020819052604090205490565b610e906114c3565b6001600160a01b0316610ea1610fb6565b6001600160a01b031614610efc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600c5481565b6006546001600160a01b03163314610fa85760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b610fb28282611a2f565b5050565b60055461010090046001600160a01b031690565b610dac81565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b600d5460ff1681565b60006108746110476114c3565b84610bed85604051806060016040528060258152602001611fd360259139600160006110716114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611a89565b60006108746110af6114c3565b8484611b20565b600e5481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546001600160a01b031633146111305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b610dac811115611187576040805162461bcd60e51b815260206004820152601d60248201527f4572726f723a204d61782074617820726174652065786365656465642e000000604482015290519081900360640190fd5b600955565b60085460ff1681565b61119d6114c3565b6001600160a01b03166111ae610fb6565b6001600160a01b031614611209576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661124e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e1a6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6006546001600160a01b0316331461130b5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600d5460ff1615611363576040805162461bcd60e51b815260206004820152601f60248201527f4572726f723a2063616e206f6e6c792064697374726962757465206f6e636500604482015290519081900360640190fd5b6001600160a01b0382166113be576040805162461bcd60e51b815260206004820152600d60248201527f215f67656e65736973506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611419576040805162461bcd60e51b815260206004820152600b60248201527f215f64616f57616c6c6574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905561143a826905150ae84a8cdf0000006118af565b610fb281683635c9adc5dea000006118af565b60076020526000908152604090205460ff1681565b6000828201838110156114bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b03831661150c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611faf6024913960400191505060405180910390fd5b6001600160a01b0382166115515760405162461bcd60e51b8152600401808060200182810382526022815260200180611e406022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008282111561160a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261161f57506000610878565b8282028284828161162c57fe5b04146114bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ed86021913960400191505060405180910390fd5b60008082116116bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116c857fe5b049392505050565b600b546116e89083906001600160a01b0316836114c7565b600b546117009083906001600160a01b031683611783565b50600b54604080517fbfc770a80000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163bfc770a89160248082019260009290919082900301818387803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b505050505050565b6000611790848484611b20565b6117fb8461179c6114c3565b610bed85604051806060016040528060288152602001611ef9602891396001600160a01b038a166000908152600160205260408120906117da6114c3565b6001600160a01b031681526020810191909152604001600020549190611a89565b5060019392505050565b6001600160a01b03811661184a5760405162461bcd60e51b815260040180806020018281038252602d815260200180611eab602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03821661190a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61191660008383611a84565b6002546119239082611462565b6002556001600160a01b0382166000908152602081905260409020546119499082611462565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610b2a6119aa6114c3565b82611c7b565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d39abead6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600a55565b6000611a6682604051806060016040528060248152602001611f2160249139611a5f86611a5a6114c3565b6110bc565b9190611a89565b9050611a7a83611a746114c3565b836114c7565b611a848383611c7b565b505050565b60008184841115611b185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038316611b655760405162461bcd60e51b8152600401808060200182810382526025815260200180611f8a6025913960400191505060405180910390fd5b6001600160a01b038216611baa5760405162461bcd60e51b8152600401808060200182810382526023815260200180611dd56023913960400191505060405180910390fd5b611bb5838383611a84565b611bf281604051806060016040528060268152602001611e62602691396001600160a01b0386166000908152602081905260409020549190611a89565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611c219082611462565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c858282611cd8565b600e54611c929082611462565b600e556040805182815290516001600160a01b038416917f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa2919081900360200190a25050565b6001600160a01b038216611d1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f696021913960400191505060405180910390fd5b611d2982600083611a84565b611d6681604051806060016040528060228152602001611df8602291396001600160a01b0385166000908152602081905260409020549190611a89565b6001600160a01b038316600090815260208190526040902055600254611d8c90826115b3565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654572726f723a2043616c6c6572206973206e6f742074686520746178206f66666963656f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63656f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f7245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220458e7a72a15d3459227200b9e2b0574ffd68dcc2ff0a198b86adc3aba3df980d64736f6c634300060c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x570CA735 GT PUSH2 0x186 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x72F JUMPI DUP1 PUSH4 0xF4FD47CF EQ PUSH2 0x755 JUMPI DUP1 PUSH4 0xFE46BE44 EQ PUSH2 0x783 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0xE1EA1FA3 EQ PUSH2 0x70A JUMPI DUP1 PUSH4 0xF1B15C94 EQ PUSH2 0x727 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x67C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0xD89135CD EQ PUSH2 0x6D4 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0x9662676C EQ PUSH2 0x674 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x79CC6790 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0x8FA81732 EQ PUSH2 0x664 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x620 JUMPI DUP1 PUSH4 0x771A3A1D EQ PUSH2 0x628 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x64F53F2E GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x64F53F2E EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0x678014B0 EQ PUSH2 0x5F2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x5FA JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x570CA735 EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0x61482BED EQ PUSH2 0x5E2 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x234 JUMPI DUP1 PUSH4 0x4456EDA2 GT PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x4E20A02C GT PUSH2 0x1CD JUMPI DUP1 PUSH4 0x4E20A02C EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0x5024EC1F EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0x54575AF4 EQ PUSH2 0x5A4 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x4456EDA2 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x48384640 EQ PUSH2 0x56E JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x3F07D76A GT PUSH2 0x219 JUMPI DUP1 PUSH4 0x3F07D76A EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x549 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0x3E5F13D4 EQ PUSH2 0x4D3 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x28B JUMPI DUP1 PUSH4 0x313CE567 GT PUSH2 0x270 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0x323440D1 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0x38D2776E EQ PUSH2 0x488 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x43C JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x2BC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0x1B9E2FAD EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x232798DF EQ PUSH2 0x3D5 JUMPI PUSH2 0x2D3 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x355 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x302 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x347 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x884 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xFF AND PUSH2 0x8E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x974 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x46A PUSH2 0xB2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xBF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x381 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x39D PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE25 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x404 PUSH2 0xE88 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xF59 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x4DB PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x39D PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x381 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x103A JUMP JUMPDEST PUSH2 0x381 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x39D PUSH2 0x10B6 JUMP JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x381 PUSH2 0x118C JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1195 JUMP JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x7A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x799 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x144D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x7B9 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x856 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x82B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x856 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x839 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x86D PUSH2 0x14C3 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x14C7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8B0 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x878 JUMPI POP PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8E0 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x93F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x96B JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97F DUP5 PUSH2 0x884 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x992 JUMPI POP PUSH2 0x990 DUP4 PUSH2 0xD22 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 PUSH2 0x9A1 PUSH2 0xE25 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA98 JUMPI PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x5803ABAA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH2 0xA51 SWAP4 AND SWAP2 PUSH4 0x5803ABAA SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP9 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2710 SWAP1 PUSH2 0x15B3 JUMP JUMPDEST SWAP1 POP PUSH2 0xA69 PUSH2 0x2710 PUSH2 0xA63 DUP5 DUP5 PUSH2 0x1610 JUMP JUMPDEST SWAP1 PUSH2 0x1669 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xA7D PUSH2 0x2710 PUSH2 0xA63 DUP8 DUP7 PUSH2 0x1610 JUMP JUMPDEST SWAP1 POP PUSH2 0xA89 DUP6 DUP3 PUSH2 0x15B3 JUMP JUMPDEST SWAP5 POP PUSH2 0xA95 DUP8 DUP3 PUSH2 0x16D0 JUMP JUMPDEST POP POP JUMPDEST POP JUMPDEST PUSH2 0xAA5 DUP5 DUP5 DUP5 PUSH2 0x1783 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAC6 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0x1805 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0xBAC PUSH2 0x14C3 JUMP JUMPDEST DUP5 PUSH2 0xBED DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0xBBD PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1462 JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCD0 DUP5 PUSH2 0xE6D JUMP JUMPDEST SWAP1 POP PUSH2 0xCDC DUP5 DUP5 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE7 DUP6 PUSH2 0xE6D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 GT SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0x199F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD13 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0x889 JUMP JUMPDEST PUSH10 0x5150AE84A8CDF000000 DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xC SSTORE PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xE60 JUMPI PUSH2 0xE46 PUSH2 0x19B0 JUMP JUMPDEST PUSH2 0xDAC PUSH1 0xA SLOAD GT ISZERO PUSH2 0xE59 JUMPI PUSH2 0xDAC PUSH1 0xA SSTORE JUMPDEST PUSH1 0xA SLOAD PUSH1 0xC SSTORE JUMPDEST POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE90 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEA1 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xEFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFB2 DUP3 DUP3 PUSH2 0x1A2F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xDAC DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x856 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x82B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x856 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x1047 PUSH2 0x14C3 JUMP JUMPDEST DUP5 PUSH2 0xBED DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD3 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x1071 PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH2 0x10AF PUSH2 0x14C3 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1130 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E88 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDAC DUP2 GT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A204D61782074617820726174652065786365656465642E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x119D PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11AE PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1209 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E1A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH2 0x100 SWAP1 DIV AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x130B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F45 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1363 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A2063616E206F6E6C792064697374726962757465206F6E636500 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x215F67656E65736973506F6F6C00000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1419 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x215F64616F57616C6C6574000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x143A DUP3 PUSH10 0x5150AE84A8CDF000000 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xFB2 DUP2 PUSH9 0x3635C9ADC5DEA00000 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x14BC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x150C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1FAF PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1E40 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x160A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x161F JUMPI POP PUSH1 0x0 PUSH2 0x878 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x162C JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1ED8 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x16BF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x16C8 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x16E8 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x1700 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1783 JUMP JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xBFC770A800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xBFC770A8 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x177B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1790 DUP5 DUP5 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x17FB DUP5 PUSH2 0x179C PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0xBED DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EF9 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x17DA PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x184A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1EAB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x6 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x190A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1916 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1923 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1949 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xB2A PUSH2 0x19AA PUSH2 0x14C3 JUMP JUMPDEST DUP3 PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD39ABEAD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A66 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F21 PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x1A5F DUP7 PUSH2 0x1A5A PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x10BC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A7A DUP4 PUSH2 0x1A74 PUSH2 0x14C3 JUMP JUMPDEST DUP4 PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x1A84 DUP4 DUP4 PUSH2 0x1C7B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x1B18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1ADD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1AC5 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1B0A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1B65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F8A PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1BAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1DD5 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB5 DUP4 DUP4 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x1BF2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E62 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1C21 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1C85 DUP3 DUP3 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x1C92 SWAP1 DUP3 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0x1AF5163F80E79B5E554F61E1D052084D3A3FE1166E42A265798C4E2DDCE8FFA2 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1F69 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D29 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x1D66 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DF8 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x1D8C SWAP1 DUP3 PUSH2 0x15B3 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63654F776E61 PUSH3 0x6C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652074 PUSH16 0x20746865207A65726F20616464726573 PUSH20 0x45524332303A207472616E7366657220616D6F75 PUSH15 0x7420657863656564732062616C616E PUSH4 0x65457272 PUSH16 0x723A2043616C6C6572206973206E6F74 KECCAK256 PUSH21 0x686520746178206F66666963656F70657261746F72 GASPRICE KECCAK256 PUSH27 0x65726F206164647265737320676976656E20666F72206E6577206F PUSH17 0x657261746F72536166654D6174683A206D PUSH22 0x6C7469706C69636174696F6E206F766572666C6F7745 MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20627572 PUSH15 0x20616D6F756E742065786365656473 KECCAK256 PUSH2 0x6C6C PUSH16 0x77616E63656F70657261746F723A2063 PUSH2 0x6C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F70657261746F724552 NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A207472616E7366657220 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220458E PUSH27 0x72A15D3459227200B9E2B0574FFD68DCC2FF0A198B86ADC3ABA3DF SWAP9 0xD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMap": "135:3190:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2168:89:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4244:166;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4244:166:3;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3235:106;;;:::i;:::-;;;;;;;;;;;;;;;;1690:269:46;;;;;;;;;;;;;;;;-1:-1:-1;1690:269:46;-1:-1:-1;;;;;1690:269:46;;:::i;1521:163::-;;;;;;;;;;;;;;;;-1:-1:-1;1521:163:46;;-1:-1:-1;;;;;1521:163:46;;;;;;;;:::i;:::-;;2605:1092;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2605:1092:46;;;;;;;;;;;;;;;;;:::i;850:113:25:-;;;;;;;;;;;;;;;;-1:-1:-1;850:113:25;-1:-1:-1;;;;;850:113:25;;:::i;3086:89:3:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;382:69:17;;;:::i;1366:149:46:-;;;;;;;;;;;;;;;;-1:-1:-1;1366:149:46;;;;:::i;5589:215:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5589:215:3;;;;;;;;:::i;765:24:46:-;;;:::i;:::-;;;;-1:-1:-1;;;;;765:24:46;;;;;;;;;;;;;;1067:103;;;;;;;;;;;;;;;;-1:-1:-1;1067:103:46;-1:-1:-1;;;;;1067:103:46;;:::i;1071:311:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1071:311:17;;;;;;;;:::i;1388:81::-;;;;;;;;;;;;;;;;-1:-1:-1;1388:81:17;;:::i;746:98:25:-;;;:::i;1965:275:46:-;;;;;;;;;;;;;;;;-1:-1:-1;1965:275:46;-1:-1:-1;;;;;1965:275:46;;:::i;264:72:17:-;;;:::i;695:28:46:-;;;:::i;3919:181::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3919:181:46;;;;;;;;;;;;;;;;;:::i;493:83:25:-;;;:::i;729:29:46:-;;;:::i;2246:353::-;;;:::i;588:51::-;;;:::i;3399:125:3:-;;;;;;;;;;;;;;;;-1:-1:-1;3399:125:3;-1:-1:-1;;;;;3399:125:3;;:::i;1717:145:0:-;;;:::i;795:22:46:-;;;:::i;1475:156:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1475:156:17;;;;;;;;:::i;1085:85:0:-;;;:::i;645:44:46:-;;;:::i;2370:93:3:-;;;:::i;512:41:17:-;;;:::i;6291:266:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6291:266:3;;;;;;;;:::i;3727:172::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3727:172:3;;;;;;;;:::i;560:26:17:-;;;:::i;3957:149:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3957:149:3;;;;;;;;;;:::i;1176:184:46:-;;;;;;;;;;;;;;;;-1:-1:-1;1176:184:46;;:::i;554:28::-;;;:::i;2011:240:0:-;;;;;;;;;;;;;;;;-1:-1:-1;2011:240:0;-1:-1:-1;;;;;2011:240:0;;:::i;2304:526:17:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2304:526:17;;;;;;;;;;:::i;493:54:46:-;;;;;;;;;;;;;;;;-1:-1:-1;493:54:46;-1:-1:-1;;;;;493:54:46;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2168:89:3;2245:5;2238:12;;;;;;;;-1:-1:-1;;2238:12:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2213:13;;2238:12;;2245:5;;2238:12;;2245:5;2238:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2168:89;:::o;4244:166::-;4327:4;4343:39;4352:12;:10;:12::i;:::-;4366:7;4375:6;4343:8;:39::i;:::-;-1:-1:-1;4399:4:3;4244:166;;;;;:::o;3235:106::-;3322:12;;3235:106;:::o;1690:269:46:-;1782:18;1871:20;1844:47;-1:-1:-1;;;;;1844:23:46;;;;;;:13;:23;;;;;;;;:47;;;;;;;;;:108;;;-1:-1:-1;1934:18:46;-1:-1:-1;;;;;1907:23:46;;;;;;:13;:23;;;;;;;;:45;;;;;;;;;1816:136;1690:269;-1:-1:-1;;1690:269:46:o;1521:163::-;980:9;;-1:-1:-1;;;;;980:9:46;993:10;980:23;972:71;;;;-1:-1:-1;;;972:71:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1671:5:::1;1657:20;;;;;;;;;;-1:-1:-1::0;;;;;1631:23:46;::::1;;::::0;;;:13:::1;:23;::::0;;;;:46;;-1:-1:-1;;1631:46:46::1;::::0;;::::1;::::0;::::1;;;;;;;;;;;1521:163:::0;;:::o;2605:1092::-;2736:16;2859:28;2879:7;2859:19;:28::i;:::-;2858:29;:68;;;;;2892:34;2915:10;2892:22;:34::i;:::-;2891:35;2858:68;2841:727;;;3007:16;3026:19;:17;:19::i;:::-;3007:38;-1:-1:-1;3063:12:46;;3059:499;;3172:9;;3161:54;;;;;;-1:-1:-1;;;;;3161:54:46;;;;;;;;;;;;;;;;3095:19;;3117:116;;3172:9;;3161:33;;:54;;;;;;;;;;;;;;3095:19;3172:9;3161:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3161:54:46;633:6;;3117:22;:116::i;:::-;3095:138;-1:-1:-1;3263:49:46;633:6;3263:25;:8;3095:138;3263:12;:25::i;:::-;:29;;:49::i;:::-;3252:60;-1:-1:-1;3330:21:46;3354:83;633:6;3354:21;:7;3252:60;3354:11;:21::i;:83::-;3330:107;-1:-1:-1;3465:26:46;:7;3330:107;3465:11;:26::i;:::-;3455:36;;3509:34;3520:7;3529:13;3509:10;:34::i;:::-;3059:499;;;2841:727;;3642:48;3661:7;3670:10;3682:7;3642:18;:48::i;:::-;3628:62;2605:1092;-1:-1:-1;;;;2605:1092:46:o;850:113:25:-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;925:31:25::1;943:12;925:17;:31::i;:::-;850:113:::0;:::o;3086:89:3:-;3159:9;;;;3086:89;:::o;382:69:17:-;440:11;382:69;:::o;1366:149:46:-;980:9;;-1:-1:-1;;;;;980:9:46;993:10;980:23;972:71;;;;-1:-1:-1;;;972:71:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1472:16:::1;:36:::0;;-1:-1:-1;;1472:36:46::1;::::0;::::1;;::::0;;;::::1;::::0;;1366:149::o;5589:215:3:-;5677:4;5693:83;5702:12;:10;:12::i;:::-;5716:7;5725:50;5764:10;5725:11;:25;5737:12;:10;:12::i;:::-;-1:-1:-1;;;;;5725:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;5725:25:3;;;:34;;;;;;;;;;;:38;:50::i;:::-;5693:8;:83::i;765:24:46:-;;;-1:-1:-1;;;;;765:24:46;;:::o;1067:103::-;637:9:25;;-1:-1:-1;;;;;637:9:25;650:10;637:23;616:106;;;;-1:-1:-1;;;616:106:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1141:9:46::1;:22:::0;;-1:-1:-1;;1141:22:46::1;-1:-1:-1::0;;;;;1141:22:46;;;::::1;::::0;;;::::1;::::0;;1067:103::o;1071:311:17:-;637:9:25;;1175:4:17;;-1:-1:-1;;;;;637:9:25;650:10;637:23;616:106;;;;-1:-1:-1;;;616:106:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1195:21:17::1;1219;1229:10;1219:9;:21::i;:::-;1195:45;;1250:26;1256:10;1268:7;1250:5;:26::i;:::-;1286:20;1309:21;1319:10;1309:9;:21::i;:::-;1347:28:::0;;;::::1;::::0;1071:311;-1:-1:-1;;;;1071:311:17:o;1388:81::-;1444:18;1455:6;1444:10;:18::i;746:98:25:-;828:9;;789:4;;-1:-1:-1;;;;;828:9:25;812:12;:10;:12::i;:::-;-1:-1:-1;;;;;812:25:25;;805:32;;746:98;:::o;1965:275:46:-;2060:18;2149:23;2122:50;;264:72:17;324:12;264:72;:::o;695:28:46:-;;;;:::o;3919:181::-;637:9:25;;-1:-1:-1;;;;;637:9:25;650:10;637:23;616:106;;;;-1:-1:-1;;;616:106:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4064:6:46::1;-1:-1:-1::0;;;;;4064:15:46::1;;4080:3;4085:7;4064:29;;;;;;;;;;;;;-1:-1:-1::0;;;;;4064:29:46::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;;;;;3919:181:46:o;493:83:25:-;560:9;;-1:-1:-1;;;;;560:9:25;493:83;:::o;729:29:46:-;;;;:::o;2246:353::-;2320:13;;2310:7;:23;2347:16;;2291:7;;2347:16;;:24;;:16;:24;2343:226;;;2387:23;:21;:23::i;:::-;684:5;2428:14;;:29;2424:97;;;684:5;2477:14;:29;2424:97;2544:14;;2534:7;:24;2343:226;-1:-1:-1;2585:7:46;;2246:353;:::o;588:51::-;633:6;588:51;:::o;3399:125:3:-;-1:-1:-1;;;;;3499:18:3;3473:7;3499:18;;;;;;;;;;;;3399:125::o;1717:145:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1807:6:::1;::::0;1786:40:::1;::::0;1823:1:::1;::::0;1807:6:::1;::::0;::::1;-1:-1:-1::0;;;;;1807:6:0::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1836:6;:19:::0;;-1:-1:-1;;1836:19:0::1;::::0;;1717:145::o;795:22:46:-;;;;:::o;1475:156:17:-;637:9:25;;-1:-1:-1;;;;;637:9:25;650:10;637:23;616:106;;;;-1:-1:-1;;;616:106:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:31:17::1;1608:7;1617:6;1593:14;:31::i;:::-;1475:156:::0;;:::o;1085:85:0:-;1157:6;;;;;-1:-1:-1;;;;;1157:6:0;;1085:85::o;645:44:46:-;684:5;645:44;:::o;2370:93:3:-;2449:7;2442:14;;;;;;;;-1:-1:-1;;2442:14:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2417:13;;2442:14;;2449:7;;2442:14;;2449:7;2442:14;;;;;;;;;;;;;;;;;;;;;;;;512:41:17;;;;;;:::o;6291:266:3:-;6384:4;6400:129;6409:12;:10;:12::i;:::-;6423:7;6432:96;6471:15;6432:96;;;;;;;;;;;;;;;;;:11;:25;6444:12;:10;:12::i;:::-;-1:-1:-1;;;;;6432:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;6432:25:3;;;:34;;;;;;;;;;;:96;:38;:96::i;3727:172::-;3813:4;3829:42;3839:12;:10;:12::i;:::-;3853:9;3864:6;3829:9;:42::i;560:26:17:-;;;;:::o;3957:149:3:-;-1:-1:-1;;;;;4072:18:3;;;4046:7;4072:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3957:149::o;1176:184:46:-;980:9;;-1:-1:-1;;;;;980:9:46;993:10;980:23;972:71;;;;-1:-1:-1;;;972:71:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:5:::1;1261:8;:24;;1253:66;;;::::0;;-1:-1:-1;;;1253:66:46;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;1329:13;:24:::0;1176:184::o;554:28::-;;;;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6:::1;::::0;::::1;;::::0;2179:38:::1;::::0;;;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;2227:17:0;;::::1;;;-1:-1:-1::0;;2227:17:0;;::::1;::::0;;;::::1;::::0;;2011:240::o;2304:526:17:-;637:9:25;;-1:-1:-1;;;;;637:9:25;650:10;637:23;616:106;;;;-1:-1:-1;;;616:106:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2433:21:17::1;::::0;::::1;;2432:22;2424:66;;;::::0;;-1:-1:-1;;;2424:66:17;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;2508:26:17;::::1;2500:52;;;::::0;;-1:-1:-1;;;2500:52:17;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;2570:24:17;::::1;2562:48;;;::::0;;-1:-1:-1;;;2562:48:17;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2621:21;:28:::0;;-1:-1:-1;;2621:28:17::1;2645:4;2621:28;::::0;;2709:54:::1;2715:12:::0;324::::1;2709:5;:54::i;:::-;2773:50;2779:10;440:11;2773:5;:50::i;493:54:46:-:0;;;;;;;;;;;;;;;:::o;2690:175:2:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2690:175;-1:-1:-1;;;2690:175:2:o;598:104:8:-;685:10;598:104;:::o;9355:340:3:-;-1:-1:-1;;;;;9456:19:3;;9448:68;;;;-1:-1:-1;;;9448:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9534:21:3;;9526:68;;;;-1:-1:-1;;;9526:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9605:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9656:32;;;;;;;;;;;;;;;;;9355:340;;;:::o;3136:155:2:-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:2;;;3136:155::o;3538:215::-;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:2;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4217:150;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:2:o;3031:292:17:-;3131:9;;3113:37;;3122:7;;-1:-1:-1;;;;;3131:9:17;3142:7;3113:8;:37::i;:::-;3238:9;;3210:47;;3229:7;;-1:-1:-1;;;;;3238:9:17;3249:7;3210:18;:47::i;:::-;-1:-1:-1;3278:9:17;;3267:49;;;;;;;;;;;;;;-1:-1:-1;;;;;3278:9:17;;;;3267:40;;:49;;;;;3278:9;;3267:49;;;;;;;;3278:9;;3267:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3031:292;;:::o;4877:317:3:-;4983:4;4999:36;5009:6;5017:9;5028:6;4999:9;:36::i;:::-;5045:121;5054:6;5062:12;:10;:12::i;:::-;5076:89;5114:6;5076:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5076:19:3;;;;;;:11;:19;;;;;;5096:12;:10;:12::i;:::-;-1:-1:-1;;;;;5076:33:3;;;;;;;;;;;;-1:-1:-1;5076:33:3;;;:89;:37;:89::i;5045:121::-;-1:-1:-1;5183:4:3;4877:317;;;;;:::o;969:287:25:-;-1:-1:-1;;;;;1058:26:25;;1037:118;;;;-1:-1:-1;;;1037:118:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1170:45;;-1:-1:-1;;;;;1170:45:25;;;1198:1;;1170:45;;1198:1;;1170:45;1225:9;:24;;-1:-1:-1;;1225:24:25;-1:-1:-1;;;;;1225:24:25;;;;;;;;;;969:287::o;7832:370:3:-;-1:-1:-1;;;;;7915:21:3;;7907:65;;;;;-1:-1:-1;;;7907:65:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7983:49;8012:1;8016:7;8025:6;7983:20;:49::i;:::-;8058:12;;:24;;8075:6;8058:16;:24::i;:::-;8043:12;:39;-1:-1:-1;;;;;8113:18:3;;:9;:18;;;;;;;;;;;:30;;8136:6;8113:22;:30::i;:::-;-1:-1:-1;;;;;8092:18:3;;:9;:18;;;;;;;;;;;:51;;;;8158:37;;;;;;;8092:18;;:9;;8158:37;;;;;;;;;;7832:370;;:::o;524:89:4:-;579:27;585:12;:10;:12::i;:::-;599:6;579:5;:27::i;2895:130:17:-;2984:9;;;;;;;;;-1:-1:-1;;;;;2984:9:17;-1:-1:-1;;;;;2973:43:17;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2973:45:17;2956:14;:62;2895:130::o;919:290:4:-;995:26;1024:84;1061:6;1024:84;;;;;;;;;;;;;;;;;:32;1034:7;1043:12;:10;:12::i;:::-;1024:9;:32::i;:::-;:36;:84;:36;:84::i;:::-;995:113;;1119:51;1128:7;1137:12;:10;:12::i;:::-;1151:18;1119:8;:51::i;:::-;1180:22;1186:7;1195:6;1180:5;:22::i;:::-;919:290;;;:::o;5432:163:2:-;5518:7;5553:12;5545:6;;;;5537:29;;;;-1:-1:-1;;;5537:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5583:5:2;;;5432:163::o;7031:530:3:-;-1:-1:-1;;;;;7136:20:3;;7128:70;;;;-1:-1:-1;;;7128:70:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7216:23:3;;7208:71;;;;-1:-1:-1;;;7208:71:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7290:47;7311:6;7319:9;7330:6;7290:20;:47::i;:::-;7368:71;7390:6;7368:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7368:17:3;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7348:17:3;;;:9;:17;;;;;;;;;;;:91;;;;7472:20;;;;;;;:32;;7497:6;7472:24;:32::i;:::-;-1:-1:-1;;;;;7449:20:3;;;:9;:20;;;;;;;;;;;;:55;;;;7519:35;;;;;;;7449:20;;7519:35;;;;;;;;;;;;;7031:530;;;:::o;2016:208:17:-;2094:30;2106:8;2116:7;2094:11;:30::i;:::-;2148:11;;:24;;2164:7;2148:15;:24::i;:::-;2134:11;:38;2187:30;;;;;;;;-1:-1:-1;;;;;2187:30:17;;;;;;;;;;;;;2016:208;;:::o;8522:410:3:-;-1:-1:-1;;;;;8605:21:3;;8597:67;;;;-1:-1:-1;;;8597:67:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8675:49;8696:7;8713:1;8717:6;8675:20;:49::i;:::-;8756:68;8779:6;8756:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8756:18:3;;:9;:18;;;;;;;;;;;;:68;:22;:68::i;:::-;-1:-1:-1;;;;;8735:18:3;;:9;:18;;;;;;;;;;:89;8849:12;;:24;;8866:6;8849:16;:24::i;:::-;8834:12;:39;8888:37;;;;;;;;8914:1;;-1:-1:-1;;;;;8888:37:3;;;;;;;;;;;;8522:410;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1647400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "BASIS_POINTS_DENOM()": "288",
            "INITIAL_DAO_WALLET_DISTRIBUTION()": "288",
            "INITIAL_GENESIS_POOL_DISTRIBUTION()": "265",
            "MAX_TAX_RATE()": "309",
            "allowance(address,address)": "1317",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "1257",
            "burn(uint256)": "infinite",
            "burnFrom(address,uint256)": "infinite",
            "decimals()": "1081",
            "decreaseAllowance(address,uint256)": "infinite",
            "distributeReward(address,address)": "infinite",
            "dynamicTaxRate()": "1089",
            "enableDynamicTax()": "1121",
            "getCurrentTaxRate()": "infinite",
            "governanceRecoverUnsupported(address,uint256,address)": "infinite",
            "increaseAllowance(address,uint256)": "infinite",
            "isOperator()": "1151",
            "isWhitelistedRecipient(address)": "2247",
            "isWhitelistedSender(address)": "2237",
            "mint(address,uint256)": "infinite",
            "name()": "infinite",
            "operator()": "1106",
            "owner()": "1137",
            "renounceOwnership()": "24330",
            "rewardPoolDistributed()": "1100",
            "setEnableDynamicTax(bool)": "infinite",
            "setStaticTaxRate(uint256)": "infinite",
            "setTaxOffice(address)": "infinite",
            "setWhitelistType(address,uint8)": "infinite",
            "staticTaxRate()": "1087",
            "symbol()": "infinite",
            "taxOffice()": "1128",
            "taxRate()": "1088",
            "totalBurned()": "1109",
            "totalSupply()": "1067",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOperator(address)": "infinite",
            "transferOwnership(address)": "infinite",
            "whitelistType(address)": "1273"
          },
          "internal": {
            "_burn(address,uint256)": "infinite",
            "_handleTax(address,uint256)": "infinite",
            "_updateDynamicTaxRate()": "infinite"
          }
        },
        "methodIdentifiers": {
          "BASIS_POINTS_DENOM()": "678014b0",
          "INITIAL_DAO_WALLET_DISTRIBUTION()": "323440d1",
          "INITIAL_GENESIS_POOL_DISTRIBUTION()": "4e20a02c",
          "MAX_TAX_RATE()": "8fa81732",
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "burn(uint256)": "42966c68",
          "burnFrom(address,uint256)": "79cc6790",
          "decimals()": "313ce567",
          "decreaseAllowance(address,uint256)": "a457c2d7",
          "distributeReward(address,address)": "f4fd47cf",
          "dynamicTaxRate()": "61482bed",
          "enableDynamicTax()": "f1b15c94",
          "getCurrentTaxRate()": "64f53f2e",
          "governanceRecoverUnsupported(address,uint256,address)": "54575af4",
          "increaseAllowance(address,uint256)": "39509351",
          "isOperator()": "4456eda2",
          "isWhitelistedRecipient(address)": "48384640",
          "isWhitelistedSender(address)": "1b9e2fad",
          "mint(address,uint256)": "40c10f19",
          "name()": "06fdde03",
          "operator()": "570ca735",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "rewardPoolDistributed()": "9662676c",
          "setEnableDynamicTax(bool)": "38d2776e",
          "setStaticTaxRate(uint256)": "e1ea1fa3",
          "setTaxOffice(address)": "3f07d76a",
          "setWhitelistType(address,uint8)": "232798df",
          "staticTaxRate()": "5024ec1f",
          "symbol()": "95d89b41",
          "taxOffice()": "3e5f13d4",
          "taxRate()": "771a3a1d",
          "totalBurned()": "d89135cd",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOperator(address)": "29605e77",
          "transferOwnership(address)": "f2fde38b",
          "whitelistType(address)": "fe46be44"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_DAO_WALLET_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_GENESIS_POOL_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoWallet\",\"type\":\"address\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDynamicTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelistedRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelistedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableDynamicTax\",\"type\":\"bool\"}],\"name\":\"setEnableDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setStaticTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxOffice\",\"type\":\"address\"}],\"name\":\"setTaxOffice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setWhitelistType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxOffice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"successFlag\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistType\",\"outputs\":[{\"internalType\":\"enum ERC20Taxable.WhitelistType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Constructs the SNOW ERC-20 contract.\"},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Snow.sol\":\"Snow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Snow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./utils/ERC20Taxable.sol\\\";\\n\\n/* \\n    https://snowcrystals.finance\\n*/\\n\\ncontract Snow is ERC20Taxable {\\n    using SafeMath for uint256;\\n\\n    // Initial distribution for the first 48h genesis pools\\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 24_000 ether;\\n    // Distribution for airdrops wallet\\n    uint256 public constant INITIAL_DAO_WALLET_DISTRIBUTION = 1_000 ether;\\n\\n    // Have the rewards been distributed to the pools\\n    bool public rewardPoolDistributed = false;\\n\\n    uint256 public totalBurned;\\n\\n    /**\\n     * @notice Constructs the SNOW ERC-20 contract.\\n     */\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC20Taxable(name_, symbol_)\\n    {\\n        // Mints 1_000 SNOW to contract creator for initial pool setup.\\n        _mint(msg.sender, 1_000 ether);\\n    }\\n\\n    //* ========== EVENTS ========== *//\\n\\n    event TokenBurned(address indexed account, uint256 amount);\\n\\n    //*================ BASIC TOKEN FUNCTIONS ================*//\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    //* ========== OVERRIDE STANDARD FUNCTIONS ========== *//\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal override {\\n        super._burn(_account, _amount);\\n        totalBurned = totalBurned.add(_amount);\\n        emit TokenBurned(_account, _amount);\\n    }\\n\\n    //*================ TOKEN DISTRIBUTION / RECOVERY ================*//\\n    function distributeReward(address _genesisPool, address _daoWallet)\\n        external\\n        onlyOperator\\n    {\\n        require(!rewardPoolDistributed, \\\"Error: can only distribute once\\\");\\n        require(_genesisPool != address(0), \\\"!_genesisPool\\\");\\n        require(_daoWallet != address(0), \\\"!_daoWallet\\\");\\n\\n        rewardPoolDistributed = true; //State change before minting additional tokens.\\n\\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\\n        _mint(_daoWallet, INITIAL_DAO_WALLET_DISTRIBUTION);\\n    }\\n\\n    //*================ TAX FUNCTIONS ================*//\\n\\n    function _updateDynamicTaxRate() internal override {\\n        dynamicTaxRate = ITaxOffice(taxOffice).calculateMainTokenTax();\\n    }\\n\\n    function _handleTax(address _sender, uint256 _amount) internal override {\\n        _approve(_sender, taxOffice, _amount);\\n        //Use inherited function to transferFrom.\\n        ERC20.transferFrom(_sender, taxOffice, _amount);\\n        ITaxOffice(taxOffice).handleMainTokenTax(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbf068756262cabf0d212aef6b1066ab16e82b5c5bedec0253d8e18598ce6cddd\",\"license\":\"MIT\"},\"contracts/access/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            \\\"operator: zero address given for new operator\\\"\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0xb5055492468980c849d82c7f7a2de99c566b3b028f45112bffc0a1c8c697d831\",\"license\":\"MIT\"},\"contracts/interfaces/ITaxOffice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITaxOffice {\\n    function setMainTokenOracle(address _mainTokenOracle) external;\\n\\n    function setMainTokenTaxTiers(\\n        uint256[] calldata _mainTokenTaxTwapTiers,\\n        uint256[] calldata _mainTokenTaxRateTiers\\n    ) external;\\n\\n    function setShareTokenTaxTiers(\\n        uint256[] calldata _shareTokenTaxTwapTiers,\\n        uint256[] calldata _shareTokenTaxRateTiers\\n    ) external;\\n\\n    function calculateMainTokenTax() external view returns (uint256 taxRate);\\n\\n    function calculateShareTokenTax() external view returns (uint256 taxRate);\\n\\n    function handleMainTokenTax(uint256 _amount) external;\\n\\n    function handleShareTokenTax(uint256 _amount) external;\\n\\n    function taxDiscount(address _sender, address _recipient)\\n        external\\n        returns (uint256);\\n\\n    function updateMainTokenPrice() external;\\n\\n    function sendToBonus(\\n        uint256 _price,\\n        uint256 _ceilingPrice,\\n        uint256 _nextEpochPoint\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9dd8a1d2c9daf5b7e9fb8063a4bf40c2728b238586a330357da4e0739655094b\",\"license\":\"MIT\"},\"contracts/utils/ERC20Taxable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/Operator.sol\\\";\\nimport \\\"../interfaces/ITaxOffice.sol\\\";\\n\\ncontract ERC20Taxable is ERC20, ERC20Burnable, Operator {\\n    using SafeMath for uint256;\\n\\n    enum WhitelistType {\\n        NONE,\\n        SENDER,\\n        RECIPIENT,\\n        BOTH\\n    }\\n\\n    mapping(address => WhitelistType) public whitelistType;\\n\\n    bool public enableDynamicTax;\\n    uint256 public constant BASIS_POINTS_DENOM = 10_000;\\n    uint256 public constant MAX_TAX_RATE = 3_500;\\n    uint256 public staticTaxRate;\\n    uint256 public dynamicTaxRate;\\n\\n    address public taxOffice;\\n    uint256 public taxRate;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        public\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    modifier onlyTaxOffice() {\\n        require(taxOffice == msg.sender, \\\"Error: Caller is not the tax office\\\");\\n        _;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) external onlyOperator {\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setStaticTaxRate(uint256 _taxRate) external onlyTaxOffice {\\n        require(_taxRate <= MAX_TAX_RATE, \\\"Error: Max tax rate exceeded.\\\");\\n        staticTaxRate = _taxRate;\\n    }\\n\\n    function setEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyTaxOffice\\n    {\\n        enableDynamicTax = _enableDynamicTax;\\n    }\\n\\n    function setWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyTaxOffice\\n    {\\n        whitelistType[_account] = WhitelistType(_type);\\n    }\\n\\n    function isWhitelistedSender(address _account)\\n        public\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        isWhitelisted =\\n            whitelistType[_account] == WhitelistType.SENDER ||\\n            whitelistType[_account] == WhitelistType.BOTH;\\n    }\\n\\n    function isWhitelistedRecipient(address _account)\\n        public\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        isWhitelisted =\\n            whitelistType[_account] == WhitelistType.RECIPIENT ||\\n            whitelistType[_account] == WhitelistType.BOTH;\\n    }\\n\\n    function getCurrentTaxRate() public returns (uint256) {\\n        taxRate = staticTaxRate;\\n        if (enableDynamicTax == true) {\\n            _updateDynamicTaxRate();\\n            if (dynamicTaxRate > MAX_TAX_RATE) {\\n                dynamicTaxRate = MAX_TAX_RATE;\\n            }\\n            taxRate = dynamicTaxRate;\\n        }\\n        return taxRate;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public override returns (bool successFlag) {\\n        //If neither the sender or recipient are whitelisted then apply tax.\\n        if (\\n            !isWhitelistedSender(_sender) && !isWhitelistedRecipient(_recipient)\\n        ) {\\n            //Calculate tax amount and then handle tax.\\n            uint256 _taxRate = getCurrentTaxRate();\\n            if (_taxRate > 0) {\\n                uint256 taxDiscount = BASIS_POINTS_DENOM.sub(\\n                    ITaxOffice(taxOffice).taxDiscount(_sender, _recipient)\\n                );\\n\\n                _taxRate = _taxRate.mul(taxDiscount).div(BASIS_POINTS_DENOM);\\n                uint256 taxableAmount = _amount.mul(_taxRate).div(\\n                    BASIS_POINTS_DENOM\\n                );\\n                _amount = _amount.sub(taxableAmount);\\n                _handleTax(_sender, taxableAmount);\\n            }\\n        }\\n\\n        //Use inherited function to transferFrom.\\n        successFlag = ERC20.transferFrom(_sender, _recipient, _amount);\\n    }\\n\\n    //Overrideable functions for the inheriting contract to dictate tax rates.\\n    function _updateDynamicTaxRate() internal virtual {}\\n\\n    function _handleTax(address _sender, uint256 _amount) internal virtual {}\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd661198c0bcbbe6abcb234feace3ce8ba87a14f3249c0beed1ff4b7afde84cb7\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 554,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 560,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 562,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 564,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 566,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 568,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_decimals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 7,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_owner",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 13711,
            "contract": "contracts/Snow.sol:Snow",
            "label": "_operator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 15567,
            "contract": "contracts/Snow.sol:Snow",
            "label": "whitelistType",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_enum(WhitelistType)15563)"
          },
          {
            "astId": 15569,
            "contract": "contracts/Snow.sol:Snow",
            "label": "enableDynamicTax",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 15577,
            "contract": "contracts/Snow.sol:Snow",
            "label": "staticTaxRate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 15579,
            "contract": "contracts/Snow.sol:Snow",
            "label": "dynamicTaxRate",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 15581,
            "contract": "contracts/Snow.sol:Snow",
            "label": "taxOffice",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 15583,
            "contract": "contracts/Snow.sol:Snow",
            "label": "taxRate",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 6621,
            "contract": "contracts/Snow.sol:Snow",
            "label": "rewardPoolDistributed",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 6623,
            "contract": "contracts/Snow.sol:Snow",
            "label": "totalBurned",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(WhitelistType)15563": {
            "encoding": "inplace",
            "label": "enum ERC20Taxable.WhitelistType",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_enum(WhitelistType)15563)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => enum ERC20Taxable.WhitelistType)",
            "numberOfBytes": "32",
            "value": "t_enum(WhitelistType)15563"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "encoding": "inplace",
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "constructor": "Constructs the SNOW ERC-20 contract."
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Boardroom.sol\": {\n      \"content\": \"/**\\n *Submitted for verification at cronoscan.com on 2022-06-19\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/ShareWrapper.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\ncontract Boardroom is ShareWrapper, ContractGuard, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Memberseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n        uint256 epochTimerStart;\\n    }\\n\\n    struct BoardroomSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    IERC20 public snow;\\n    ITreasury public treasury;\\n\\n    mapping(address => Memberseat) public members;\\n    BoardroomSnapshot[] public boardroomHistory;\\n\\n    uint256 public withdrawLockupEpochs;\\n    uint256 public rewardLockupEpochs;\\n    bool isSacrificeReward;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n    event RewardSacrificed(\\n        address indexed token,\\n        address indexed user,\\n        uint256 reward\\n    );\\n\\n    /* ========== Modifiers =============== */\\n\\n    modifier onlyOperator() {\\n        require(\\n            operator == msg.sender,\\n            \\\"Boardroom: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier memberExists() {\\n        require(\\n            balanceOf(msg.sender) > 0,\\n            \\\"Boardroom: The member does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier updateReward(address member) {\\n        if (member != address(0)) {\\n            Memberseat memory seat = members[member];\\n            seat.rewardEarned = earned(member);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            members[member] = seat;\\n        }\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Boardroom: already initialized\\\");\\n        _;\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        IERC20 _snow,\\n        IERC20 _share,\\n        ITreasury _treasury\\n    ) public notInitialized {\\n        snow = _snow;\\n        share = _share;\\n        treasury = _treasury;\\n\\n        BoardroomSnapshot memory genesisSnapshot = BoardroomSnapshot({\\n            time: block.number,\\n            rewardReceived: 0,\\n            rewardPerShare: 0\\n        });\\n        boardroomHistory.push(genesisSnapshot);\\n\\n        withdrawLockupEpochs = 8; // Lock for 8 epochs (48h) before release withdraw\\n        rewardLockupEpochs = 4; // Lock for 4 epochs (24h) before release claimReward\\n\\n        isSacrificeReward = true;\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setLockUp(\\n        uint256 _withdrawLockupEpochs,\\n        uint256 _rewardLockupEpochs\\n    ) external onlyOperator {\\n        require(\\n            _withdrawLockupEpochs >= _rewardLockupEpochs &&\\n                _withdrawLockupEpochs <= 56,\\n            \\\"_withdrawLockupEpochs: out of range\\\"\\n        ); // <= 2 week\\n        withdrawLockupEpochs = _withdrawLockupEpochs;\\n        rewardLockupEpochs = _rewardLockupEpochs;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardroomHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot()\\n        internal\\n        view\\n        returns (BoardroomSnapshot memory)\\n    {\\n        return boardroomHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address member)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return members[member].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address member)\\n        internal\\n        view\\n        returns (BoardroomSnapshot memory)\\n    {\\n        return boardroomHistory[getLastSnapshotIndexOf(member)];\\n    }\\n\\n    function canWithdraw(address member) external view returns (bool) {\\n        return\\n            members[member].epochTimerStart.add(withdrawLockupEpochs) <=\\n            treasury.epoch();\\n    }\\n\\n    function canClaimReward(address member) external view returns (bool) {\\n        return\\n            members[member].epochTimerStart.add(rewardLockupEpochs) <=\\n            treasury.epoch();\\n    }\\n\\n    function epoch() external view returns (uint256) {\\n        return treasury.epoch();\\n    }\\n\\n    function nextEpochPoint() external view returns (uint256) {\\n        return treasury.nextEpochPoint();\\n    }\\n\\n    function getSnowPrice() external view returns (uint256) {\\n        return treasury.getSnowPrice();\\n    }\\n\\n    // =========== Member getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address member) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(member).rewardPerShare;\\n\\n        return\\n            balanceOf(member).mul(latestRPS.sub(storedRPS)).div(1e18).add(\\n                members[member].rewardEarned\\n            );\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount)\\n        public\\n        override\\n        onlyOneBlock\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Boardroom: Cannot stake 0\\\");\\n        super.stake(amount);\\n        members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        override\\n        onlyOneBlock\\n        nonReentrant\\n        memberExists\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Boardroom: Cannot withdraw 0\\\");\\n        require(\\n            members[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <=\\n                treasury.epoch(),\\n            \\\"Boardroom: still in withdraw lockup\\\"\\n        );\\n        if (isSacrificeReward == true) _sacrificeReward();\\n        else claimReward();\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function _sacrificeReward() internal updateReward(msg.sender) {\\n        uint256 reward = members[msg.sender].rewardEarned;\\n        address _token = address(snow);\\n        IERC20Taxable(_token).burn(reward);\\n        members[msg.sender].rewardEarned = 0;\\n        emit RewardSacrificed(_token, msg.sender, reward);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    function claimReward() public updateReward(msg.sender) {\\n        uint256 reward = members[msg.sender].rewardEarned;\\n        if (reward > 0) {\\n            require(\\n                members[msg.sender].epochTimerStart.add(rewardLockupEpochs) <=\\n                    treasury.epoch(),\\n                \\\"Boardroom: still in reward lockup\\\"\\n            );\\n            members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n            members[msg.sender].rewardEarned = 0;\\n            snow.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount)\\n        external\\n        onlyOneBlock\\n        nonReentrant\\n        onlyOperator\\n    {\\n        require(amount > 0, \\\"Boardroom: Cannot allocate 0\\\");\\n        require(\\n            totalSupply() > 0,\\n            \\\"Boardroom: Cannot allocate when totalSupply is 0\\\"\\n        );\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\n\\n        BoardroomSnapshot memory newSnapshot = BoardroomSnapshot({\\n            time: block.number,\\n            rewardReceived: amount,\\n            rewardPerShare: nextRPS\\n        });\\n        boardroomHistory.push(newSnapshot);\\n\\n        snow.safeTransferFrom(msg.sender, address(this), amount);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(snow), \\\"snow\\\");\\n        require(address(_token) != address(share), \\\"share\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/ShareWrapper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract ShareWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public share;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        share.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        uint256 memberShare = _balances[msg.sender];\\n        require(\\n            memberShare >= amount,\\n            \\\"Boardroom: withdraw request greater than staked amount\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = memberShare.sub(amount);\\n        share.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/ContractGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(\\n            !checkSameOriginReentranted(),\\n            \\\"ContractGuard: one block, one function\\\"\\n        );\\n        require(\\n            !checkSameSenderReentranted(),\\n            \\\"ContractGuard: one block, one function\\\"\\n        );\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Taxable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Taxable is IERC20 {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n\\n    function taxOffice() external returns (address);\\n\\n    function staticTaxRate() external returns (uint256);\\n\\n    function dynamicTaxRate() external returns (uint256);\\n\\n    function getCurrentTaxRate() external returns (uint256);\\n\\n    function setTaxOffice(address _taxOffice) external;\\n\\n    function setStaticTaxRate(uint256 _taxRate) external;\\n\\n    function setEnableDynamicTax(bool _enableDynamicTax) external;\\n\\n    function setWhitelistType(address _token, uint8 _type) external;\\n\\n    function isWhitelistedSender(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function isWhitelistedRecipient(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/ITreasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITreasury {\\n    function daoFund() external view returns (address);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getSnowPrice() external view returns (uint256);\\n\\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\\n\\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/Treasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./access/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\n\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\nimport \\\"./interfaces/ITaxOffice.sol\\\";\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\ncontract Treasury is ContractGuard, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply;\\n\\n    // core components\\n    address public snow;\\n    address public sBond;\\n    address public glcr;\\n\\n    address public boardroom;\\n    address public oracle;\\n\\n    // price\\n    uint256 public snowPriceOne;\\n    uint256 public snowPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochSnowPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra Snow during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address private devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    /* =================== Added variables =================== */\\n\\n    address public taxOffice;\\n\\n    uint256 public minExpansion;\\n    uint256 public fixedExpansion;\\n    uint256 public expansionFactor;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(\\n        address indexed from,\\n        uint256 snowAmount,\\n        uint256 bondAmount\\n    );\\n    event BoughtBonds(\\n        address indexed from,\\n        uint256 snowAmount,\\n        uint256 bondAmount\\n    );\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition() {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getSnowPrice() > snowPriceCeiling)\\n            ? 0\\n            : getSnowCirculatingSupply().mul(maxSupplyContractionPercent).div(\\n                10000\\n            );\\n    }\\n\\n    modifier checkOperator() {\\n        require(\\n            IERC20Taxable(snow).operator() == address(this) &&\\n                IERC20Taxable(sBond).operator() == address(this) &&\\n                IERC20Taxable(glcr).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getSnowPrice() public view returns (uint256 snowPrice) {\\n        try IOracle(oracle).consult(snow, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult SNOW price from the oracle\\\");\\n        }\\n    }\\n\\n    function getSnowUpdatedPrice() public view returns (uint256 _snowPrice) {\\n        try IOracle(oracle).twap(snow, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult Snow price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableSnowLeft()\\n        public\\n        view\\n        returns (uint256 _burnableSnowLeft)\\n    {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice <= snowPriceOne) {\\n            uint256 _snowSupply = getSnowCirculatingSupply();\\n            uint256 _bondMaxSupply = _snowSupply.mul(maxDebtRatioPercent).div(\\n                10000\\n            );\\n            uint256 _bondSupply = IERC20(sBond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableSnow = _maxMintableBond.mul(_snowPrice).div(\\n                    1e18\\n                );\\n                _burnableSnowLeft = Math.min(\\n                    epochSupplyContractionLeft,\\n                    _maxBurnableSnow\\n                );\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds()\\n        public\\n        view\\n        returns (uint256 _redeemableBonds)\\n    {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice > snowPriceCeiling) {\\n            uint256 _totalSnow = IERC20(snow).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalSnow.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice <= snowPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = snowPriceOne;\\n            } else {\\n                uint256 _bondAmount = snowPriceOne.mul(1e18).div(_snowPrice); // to burn 1 Snow\\n                uint256 _discountAmount = _bondAmount\\n                    .sub(snowPriceOne)\\n                    .mul(discountPercent)\\n                    .div(10000);\\n                _rate = snowPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice > snowPriceCeiling) {\\n            uint256 _snowPricePremiumThreshold = snowPriceOne\\n                .mul(premiumThreshold)\\n                .div(100);\\n            if (_snowPrice >= _snowPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _snowPrice\\n                    .sub(snowPriceOne)\\n                    .mul(premiumPercent)\\n                    .div(10000);\\n                _rate = snowPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = snowPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _snow,\\n        address _sBond,\\n        address _glcr,\\n        address _oracle,\\n        address _boardroom,\\n        uint256 _startTime,\\n        address _taxOffice,\\n        address[] memory _excludedFromTotalSupply\\n    ) public notInitialized {\\n        snow = _snow;\\n        sBond = _sBond;\\n        glcr = _glcr;\\n        oracle = _oracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        taxOffice = _taxOffice;\\n        excludedFromTotalSupply = _excludedFromTotalSupply;\\n\\n        snowPriceOne = 10**17; // This is to allow a PEG of 10 Snow per USDC\\n        snowPriceCeiling = snowPriceOne.mul(101).div(100);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [\\n            0 ether,\\n            500_000 ether,\\n            2_000_000 ether,\\n            4_000_000 ether,\\n            8_000_000 ether,\\n            20_000_000 ether\\n        ];\\n        maxExpansionTiers = [300, 250, 200, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn Snow and mint BondToken)\\n        maxDebtRatioPercent = 4000; // Upto 40% supply of BOND to purchase\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 28 epochs with 4% expansion\\n        bootstrapEpochs = 28;\\n        bootstrapSupplyExpansionPercent = 400;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(snow).balanceOf(address(this));\\n\\n        minExpansion = 10**16;\\n        expansionFactor = 150;\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOperator {\\n        oracle = _oracle;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) external onlyOperator {\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setSnowPriceCeiling(uint256 _snowPriceCeiling)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _snowPriceCeiling >= snowPriceOne &&\\n                _snowPriceCeiling <= snowPriceOne.mul(120).div(100),\\n            \\\"out of range\\\"\\n        ); // [$0.1, $0.12]\\n        snowPriceCeiling = _snowPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _maxSupplyExpansionPercent >= 10 &&\\n                _maxSupplyExpansionPercent <= 1000,\\n            \\\"_maxSupplyExpansionPercent: out of range\\\"\\n        ); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < supplyTiers.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < supplyTiers.length - 1) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < maxExpansionTiers.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMinExpansion(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        minExpansion = _value;\\n        return true;\\n    }\\n\\n    function setFixedExpansion(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        fixedExpansion = _value;\\n        return true;\\n    }\\n\\n    function setExpansionFactor(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        expansionFactor = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _bondDepletionFloorPercent >= 500 &&\\n                _bondDepletionFloorPercent <= 10000,\\n            \\\"out of range\\\"\\n        ); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(\\n        uint256 _maxSupplyContractionPercent\\n    ) external onlyOperator {\\n        require(\\n            _maxSupplyContractionPercent >= 100 &&\\n                _maxSupplyContractionPercent <= 1500,\\n            \\\"out of range\\\"\\n        ); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000,\\n            \\\"out of range\\\"\\n        ); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(\\n        uint256 _bootstrapEpochs,\\n        uint256 _bootstrapSupplyExpansionPercent\\n    ) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(\\n            _bootstrapSupplyExpansionPercent >= 100 &&\\n                _bootstrapSupplyExpansionPercent <= 1000,\\n            \\\"_bootstrapSupplyExpansionPercent: out of range\\\"\\n        ); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate)\\n        external\\n        onlyOperator\\n    {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _premiumThreshold >= snowPriceCeiling,\\n            \\\"_premiumThreshold exceeds snowPriceCeiling\\\"\\n        );\\n        require(\\n            _premiumThreshold <= 150,\\n            \\\"_premiumThreshold is higher than 1.5\\\"\\n        );\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _mintingFactorForPayingDebt >= 10000 &&\\n                _mintingFactorForPayingDebt <= 20000,\\n            \\\"_mintingFactorForPayingDebt: out of range\\\"\\n        ); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateSnowPrice() internal {\\n        try IOracle(oracle).update() {} catch {}\\n    }\\n\\n    function getSnowCirculatingSupply() public view returns (uint256) {\\n        IERC20 snowErc20 = IERC20(snow);\\n        uint256 totalSupply = snowErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (\\n            uint8 entryId = 0;\\n            entryId < excludedFromTotalSupply.length;\\n            ++entryId\\n        ) {\\n            balanceExcluded = balanceExcluded.add(\\n                snowErc20.balanceOf(excludedFromTotalSupply[entryId])\\n            );\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _snowAmount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkOperator\\n        nonReentrant\\n    {\\n        require(\\n            _snowAmount > 0,\\n            \\\"Treasury: cannot purchase bonds with zero amount\\\"\\n        );\\n\\n        uint256 snowPrice = getSnowPrice();\\n        require(snowPrice == targetPrice, \\\"Treasury: Snow price moved\\\");\\n        require(\\n            snowPrice < snowPriceOne, // price < $0.1\\n            \\\"Treasury: snowPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(\\n            _snowAmount <= epochSupplyContractionLeft,\\n            \\\"Treasury: not enough bond left to purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _snowAmount.mul(_rate).div(1e18);\\n        uint256 snowSupply = getSnowCirculatingSupply();\\n        uint256 newBondSupply = IERC20(sBond).totalSupply().add(_bondAmount);\\n        require(\\n            newBondSupply <= snowSupply.mul(maxDebtRatioPercent).div(10000),\\n            \\\"over max debt ratio\\\"\\n        );\\n\\n        IERC20Taxable(snow).burnFrom(msg.sender, _snowAmount);\\n        IERC20Taxable(sBond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(\\n            _snowAmount\\n        );\\n        _updateSnowPrice();\\n\\n        emit BoughtBonds(msg.sender, _snowAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkOperator\\n        nonReentrant\\n    {\\n        require(\\n            _bondAmount > 0,\\n            \\\"Treasury: cannot redeem bonds with zero amount\\\"\\n        );\\n\\n        uint256 snowPrice = getSnowPrice();\\n        require(snowPrice == targetPrice, \\\"Treasury: Snow price moved\\\");\\n        require(\\n            snowPrice > snowPriceCeiling, // price > $0.101\\n            \\\"Treasury: snowPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _snowAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(\\n            IERC20(snow).balanceOf(address(this)) >= _snowAmount,\\n            \\\"Treasury: treasury has no more budget\\\"\\n        );\\n\\n        seigniorageSaved = seigniorageSaved.sub(\\n            Math.min(seigniorageSaved, _snowAmount)\\n        );\\n\\n        IERC20Taxable(sBond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(snow).safeTransfer(msg.sender, _snowAmount);\\n\\n        _updateSnowPrice();\\n\\n        emit RedeemedBonds(msg.sender, _snowAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IERC20Taxable(snow).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(snow).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(snow).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(snow).safeIncreaseAllowance(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _snowSupply)\\n        internal\\n        returns (uint256)\\n    {\\n        for (\\n            uint8 tierId = uint8(supplyTiers.length - 1);\\n            tierId >= 0;\\n            --tierId\\n        ) {\\n            if (_snowSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function getExpansionPercent() public view returns (uint256) {\\n        uint256 prevEpochSnowPrice = getSnowPrice();\\n        uint256 _percentage = prevEpochSnowPrice.sub(snowPriceOne);\\n        uint256 _mse = maxSupplyExpansionPercent.mul(1e14);\\n\\n        if (fixedExpansion != 0) {\\n            return fixedExpansion;\\n        }\\n\\n        if (expansionFactor != 0) {\\n            _percentage = _percentage.mul(expansionFactor).div(10000);\\n        }\\n\\n        if (minExpansion > _percentage) {\\n            _percentage = minExpansion;\\n        }\\n\\n        if (_percentage > _mse) {\\n            _percentage = _mse;\\n        }\\n\\n        return _percentage;\\n    }\\n\\n    function allocateSeigniorage()\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkEpoch\\n        checkOperator\\n        nonReentrant\\n    {\\n        _updateSnowPrice();\\n        previousEpochSnowPrice = getSnowPrice();\\n        uint256 snowSupply = getSnowCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 20 first epochs with 4% expansion\\n            _sendToBoardroom(\\n                snowSupply.mul(bootstrapSupplyExpansionPercent).div(10000)\\n            );\\n        } else {\\n            if (previousEpochSnowPrice > snowPriceCeiling) {\\n                // Expansion (Snow Price > 0.1 $USDC): there is some seigniorage to be allocated\\n                _calculateMaxSupplyExpansionPercent(snowSupply);\\n                uint256 bondSupply = IERC20(sBond).totalSupply();\\n                uint256 _percentage = getExpansionPercent();\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n\\n                if (\\n                    seigniorageSaved >=\\n                    bondSupply.mul(bondDepletionFloorPercent).div(10000)\\n                ) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = snowSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = snowSupply.mul(_percentage).div(\\n                        1e18\\n                    );\\n                    _savedForBoardroom = _seigniorage\\n                        .mul(seigniorageExpansionFloorPercent)\\n                        .div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond\\n                            .mul(mintingFactorForPayingDebt)\\n                            .div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IERC20Taxable(snow).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n        ITaxOffice(taxOffice).sendToBonus(\\n            previousEpochSnowPrice,\\n            snowPriceCeiling,\\n            nextEpochPoint()\\n        );\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(snow), \\\"snow\\\");\\n        require(address(_token) != address(sBond), \\\"bond\\\");\\n        require(address(_token) != address(glcr), \\\"share\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /** \\n    Boardroom governance\\n    **/\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(\\n        uint256 _withdrawLockupEpochs,\\n        uint256 _rewardLockupEpochs\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(\\n            _withdrawLockupEpochs,\\n            _rewardLockupEpochs\\n        );\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount)\\n        external\\n        onlyOperator\\n    {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(\\n            _token,\\n            _amount,\\n            _to\\n        );\\n    }\\n\\n    /** \\n    Snow token contract governance\\n    **/\\n    function setSnowTaxOffice(address _taxOffice) external onlyOperator {\\n        IERC20Taxable(snow).setTaxOffice(_taxOffice);\\n    }\\n\\n    function setGlcrTaxOffice(address _taxOffice) external onlyOperator {\\n        IERC20Taxable(glcr).setTaxOffice(_taxOffice);\\n    }\\n\\n    function snowGovernanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IERC20Taxable(snow).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n\\n    function glcrGovernanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IERC20Taxable(glcr).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\"\n    },\n    \"contracts/access/Operator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            \\\"operator: zero address given for new operator\\\"\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut);\\n\\n    function getPegPrice() external view returns (int256);\\n\\n    function getPegPriceUpdated() external view returns (int256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IBoardroom.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _member) external view returns (uint256);\\n\\n    function earned(address _member) external view returns (uint256);\\n\\n    function canWithdraw(address _member) external view returns (bool);\\n\\n    function canClaimReward(address _member) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getBombPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(\\n        uint256 _withdrawLockupEpochs,\\n        uint256 _rewardLockupEpochs\\n    ) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/ITaxOffice.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITaxOffice {\\n    function setMainTokenOracle(address _mainTokenOracle) external;\\n\\n    function setMainTokenTaxTiers(\\n        uint256[] calldata _mainTokenTaxTwapTiers,\\n        uint256[] calldata _mainTokenTaxRateTiers\\n    ) external;\\n\\n    function setShareTokenTaxTiers(\\n        uint256[] calldata _shareTokenTaxTwapTiers,\\n        uint256[] calldata _shareTokenTaxRateTiers\\n    ) external;\\n\\n    function calculateMainTokenTax() external view returns (uint256 taxRate);\\n\\n    function calculateShareTokenTax() external view returns (uint256 taxRate);\\n\\n    function handleMainTokenTax(uint256 _amount) external;\\n\\n    function handleShareTokenTax(uint256 _amount) external;\\n\\n    function taxDiscount(address _sender, address _recipient)\\n        external\\n        returns (uint256);\\n\\n    function updateMainTokenPrice() external;\\n\\n    function sendToBonus(\\n        uint256 _price,\\n        uint256 _ceilingPrice,\\n        uint256 _nextEpochPoint\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/Epoch.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/Operator.sol\\\";\\n\\ncontract Epoch is Operator {\\n    using SafeMath for uint256;\\n\\n    uint256 private period;\\n    uint256 private startTime;\\n    uint256 private lastEpochTime;\\n    uint256 private epoch;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        uint256 _period,\\n        uint256 _startTime,\\n        uint256 _startEpoch\\n    ) public {\\n        period = _period;\\n        startTime = _startTime;\\n        epoch = _startEpoch;\\n        lastEpochTime = startTime.sub(period);\\n    }\\n\\n    /* ========== Modifier ========== */\\n\\n    modifier checkStartTime() {\\n        require(now >= startTime, \\\"Epoch: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        uint256 _nextEpochPoint = nextEpochPoint();\\n        if (now < _nextEpochPoint) {\\n            require(\\n                msg.sender == operator() || msg.sender == owner(),\\n                \\\"Epoch: only operator or owner allowed for pre-epoch\\\"\\n            );\\n            _;\\n        } else {\\n            _;\\n\\n            for (;;) {\\n                lastEpochTime = _nextEpochPoint;\\n                ++epoch;\\n                _nextEpochPoint = nextEpochPoint();\\n                if (now < _nextEpochPoint) break;\\n            }\\n        }\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function getCurrentEpoch() public view returns (uint256) {\\n        return epoch;\\n    }\\n\\n    function getPeriod() public view returns (uint256) {\\n        return period;\\n    }\\n\\n    function getStartTime() public view returns (uint256) {\\n        return startTime;\\n    }\\n\\n    function getLastEpochTime() public view returns (uint256) {\\n        return lastEpochTime;\\n    }\\n\\n    function nextEpochPoint() public view returns (uint256) {\\n        return lastEpochTime.add(period);\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function setPeriod(uint256 _period) external onlyOperator {\\n        require(\\n            _period >= 1 hours && _period <= 48 hours,\\n            \\\"_period: out of range\\\"\\n        );\\n        period = _period;\\n    }\\n\\n    function setEpoch(uint256 _epoch) external onlyOperator {\\n        epoch = _epoch;\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/ERC20Taxable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/Operator.sol\\\";\\nimport \\\"../interfaces/ITaxOffice.sol\\\";\\n\\ncontract ERC20Taxable is ERC20, ERC20Burnable, Operator {\\n    using SafeMath for uint256;\\n\\n    enum WhitelistType {\\n        NONE,\\n        SENDER,\\n        RECIPIENT,\\n        BOTH\\n    }\\n\\n    mapping(address => WhitelistType) public whitelistType;\\n\\n    bool public enableDynamicTax;\\n    uint256 public constant BASIS_POINTS_DENOM = 10_000;\\n    uint256 public constant MAX_TAX_RATE = 3_500;\\n    uint256 public staticTaxRate;\\n    uint256 public dynamicTaxRate;\\n\\n    address public taxOffice;\\n    uint256 public taxRate;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        public\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    modifier onlyTaxOffice() {\\n        require(taxOffice == msg.sender, \\\"Error: Caller is not the tax office\\\");\\n        _;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) external onlyOperator {\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setStaticTaxRate(uint256 _taxRate) external onlyTaxOffice {\\n        require(_taxRate <= MAX_TAX_RATE, \\\"Error: Max tax rate exceeded.\\\");\\n        staticTaxRate = _taxRate;\\n    }\\n\\n    function setEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyTaxOffice\\n    {\\n        enableDynamicTax = _enableDynamicTax;\\n    }\\n\\n    function setWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyTaxOffice\\n    {\\n        whitelistType[_account] = WhitelistType(_type);\\n    }\\n\\n    function isWhitelistedSender(address _account)\\n        public\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        isWhitelisted =\\n            whitelistType[_account] == WhitelistType.SENDER ||\\n            whitelistType[_account] == WhitelistType.BOTH;\\n    }\\n\\n    function isWhitelistedRecipient(address _account)\\n        public\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        isWhitelisted =\\n            whitelistType[_account] == WhitelistType.RECIPIENT ||\\n            whitelistType[_account] == WhitelistType.BOTH;\\n    }\\n\\n    function getCurrentTaxRate() public returns (uint256) {\\n        taxRate = staticTaxRate;\\n        if (enableDynamicTax == true) {\\n            _updateDynamicTaxRate();\\n            if (dynamicTaxRate > MAX_TAX_RATE) {\\n                dynamicTaxRate = MAX_TAX_RATE;\\n            }\\n            taxRate = dynamicTaxRate;\\n        }\\n        return taxRate;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public override returns (bool successFlag) {\\n        //If neither the sender or recipient are whitelisted then apply tax.\\n        if (\\n            !isWhitelistedSender(_sender) && !isWhitelistedRecipient(_recipient)\\n        ) {\\n            //Calculate tax amount and then handle tax.\\n            uint256 _taxRate = getCurrentTaxRate();\\n            if (_taxRate > 0) {\\n                uint256 taxDiscount = BASIS_POINTS_DENOM.sub(\\n                    ITaxOffice(taxOffice).taxDiscount(_sender, _recipient)\\n                );\\n\\n                _taxRate = _taxRate.mul(taxDiscount).div(BASIS_POINTS_DENOM);\\n                uint256 taxableAmount = _amount.mul(_taxRate).div(\\n                    BASIS_POINTS_DENOM\\n                );\\n                _amount = _amount.sub(taxableAmount);\\n                _handleTax(_sender, taxableAmount);\\n            }\\n        }\\n\\n        //Use inherited function to transferFrom.\\n        successFlag = ERC20.transferFrom(_sender, _recipient, _amount);\\n    }\\n\\n    //Overrideable functions for the inheriting contract to dictate tax rates.\\n    function _updateDynamicTaxRate() internal virtual {}\\n\\n    function _handleTax(address _sender, uint256 _amount) internal virtual {}\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Snow.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./utils/ERC20Taxable.sol\\\";\\n\\n/* \\n    https://snowcrystals.finance\\n*/\\n\\ncontract Snow is ERC20Taxable {\\n    using SafeMath for uint256;\\n\\n    // Initial distribution for the first 48h genesis pools\\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 24_000 ether;\\n    // Distribution for airdrops wallet\\n    uint256 public constant INITIAL_DAO_WALLET_DISTRIBUTION = 1_000 ether;\\n\\n    // Have the rewards been distributed to the pools\\n    bool public rewardPoolDistributed = false;\\n\\n    uint256 public totalBurned;\\n\\n    /**\\n     * @notice Constructs the SNOW ERC-20 contract.\\n     */\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC20Taxable(name_, symbol_)\\n    {\\n        // Mints 1_000 SNOW to contract creator for initial pool setup.\\n        _mint(msg.sender, 1_000 ether);\\n    }\\n\\n    //* ========== EVENTS ========== *//\\n\\n    event TokenBurned(address indexed account, uint256 amount);\\n\\n    //*================ BASIC TOKEN FUNCTIONS ================*//\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    //* ========== OVERRIDE STANDARD FUNCTIONS ========== *//\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal override {\\n        super._burn(_account, _amount);\\n        totalBurned = totalBurned.add(_amount);\\n        emit TokenBurned(_account, _amount);\\n    }\\n\\n    //*================ TOKEN DISTRIBUTION / RECOVERY ================*//\\n    function distributeReward(address _genesisPool, address _daoWallet)\\n        external\\n        onlyOperator\\n    {\\n        require(!rewardPoolDistributed, \\\"Error: can only distribute once\\\");\\n        require(_genesisPool != address(0), \\\"!_genesisPool\\\");\\n        require(_daoWallet != address(0), \\\"!_daoWallet\\\");\\n\\n        rewardPoolDistributed = true; //State change before minting additional tokens.\\n\\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\\n        _mint(_daoWallet, INITIAL_DAO_WALLET_DISTRIBUTION);\\n    }\\n\\n    //*================ TAX FUNCTIONS ================*//\\n\\n    function _updateDynamicTaxRate() internal override {\\n        dynamicTaxRate = ITaxOffice(taxOffice).calculateMainTokenTax();\\n    }\\n\\n    function _handleTax(address _sender, uint256 _amount) internal override {\\n        _approve(_sender, taxOffice, _amount);\\n        //Use inherited function to transferFrom.\\n        ERC20.transferFrom(_sender, taxOffice, _amount);\\n        ITaxOffice(taxOffice).handleMainTokenTax(_amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Glcr.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./utils/ERC20Taxable.sol\\\";\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\ncontract Glcr is ERC20Taxable {\\n    using SafeMath for uint256;\\n\\n    /*\\n        TOTAL MAX SUPPLY = 32000 GLCR\\n        - 21500 GLCRs allocated to farming pools\\n        - Airdop 25 GLCRs allocated to DAO wallet\\n        - Allocate 6975 GLCRs to DAO wallet for linear vesting\\n        - Allocate 3490 GLCRs to Dev wallet for linear vesting\\n        - 10 GLCRs for nitial pools deployment and Boardroom initialization \\n    */\\n    uint256 public constant FARMING_POOL_REWARD_ALLOCATION = 21500 ether;\\n    uint256 public constant COMMUNITY_FUND_POOL_ALLOCATION = 6975 ether;\\n    uint256 public constant DEV_FUND_POOL_ALLOCATION = 3490 ether;\\n\\n    uint256 public constant VESTING_DURATION = 52 weeks;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n\\n    uint256 public communityFundRewardRate;\\n    uint256 public devFundRewardRate;\\n\\n    address public communityFund;\\n    address public devFund;\\n\\n    uint256 public communityFundLastClaimed;\\n    uint256 public devFundLastClaimed;\\n\\n    bool public rewardPoolDistributed = false;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 _startTime,\\n        address _daoFund,\\n        address _devFund\\n    ) public ERC20Taxable(name_, symbol_) {\\n        _mint(msg.sender, 10 ether); // mint 10 Share for initial pools deployment and Boardroom initialization\\n        _mint(_daoFund, 25 ether); // Airdop 25 GLCR allocated to DAO wallet\\n\\n        startTime = _startTime;\\n        endTime = startTime + VESTING_DURATION;\\n\\n        communityFundLastClaimed = startTime;\\n        devFundLastClaimed = startTime;\\n\\n        communityFundRewardRate = COMMUNITY_FUND_POOL_ALLOCATION.div(\\n            VESTING_DURATION\\n        );\\n        devFundRewardRate = DEV_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n\\n        require(_devFund != address(0), \\\"Address cannot be 0\\\");\\n        devFund = _devFund;\\n\\n        require(_daoFund != address(0), \\\"Address cannot be 0\\\");\\n        communityFund = _daoFund;\\n    }\\n\\n    function setTreasuryFund(address _daoFund) external {\\n        require(msg.sender == devFund, \\\"!dev\\\");\\n        communityFund = _daoFund;\\n    }\\n\\n    function setDevFund(address _devFund) external {\\n        require(msg.sender == devFund, \\\"!dev\\\");\\n        require(_devFund != address(0), \\\"zero\\\");\\n        devFund = _devFund;\\n    }\\n\\n    function unclaimedTreasuryFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (communityFundLastClaimed >= _now) return 0;\\n        _pending = _now.sub(communityFundLastClaimed).mul(\\n            communityFundRewardRate\\n        );\\n    }\\n\\n    function unclaimedDevFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (devFundLastClaimed >= _now) return 0;\\n        _pending = _now.sub(devFundLastClaimed).mul(devFundRewardRate);\\n    }\\n\\n    /**\\n     * @dev Claim pending rewards to community and dev fund\\n     */\\n    function claimRewards() external {\\n        uint256 _pending = unclaimedTreasuryFund();\\n        if (_pending > 0 && communityFund != address(0)) {\\n            _mint(communityFund, _pending);\\n            communityFundLastClaimed = block.timestamp;\\n        }\\n        _pending = unclaimedDevFund();\\n        if (_pending > 0 && devFund != address(0)) {\\n            _mint(devFund, _pending);\\n            devFundLastClaimed = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice distribute to reward pool (only once)\\n     */\\n    function distributeReward(address _farmingIncentiveFund)\\n        external\\n        onlyOperator\\n    {\\n        require(!rewardPoolDistributed, \\\"only can distribute once\\\");\\n        require(\\n            _farmingIncentiveFund != address(0) &&\\n                _farmingIncentiveFund != address(this),\\n            \\\"!_farmingIncentiveFund\\\"\\n        );\\n        rewardPoolDistributed = true;\\n        _mint(_farmingIncentiveFund, FARMING_POOL_REWARD_ALLOCATION);\\n    }\\n\\n    //*================ TAX FUNCTIONS ================*//\\n\\n    function _updateDynamicTaxRate() internal override {\\n        dynamicTaxRate = ITaxOffice(taxOffice).calculateShareTokenTax();\\n    }\\n\\n    function _handleTax(address _sender, uint256 _amount) internal override {\\n        _approve(_sender, taxOffice, _amount);\\n        //Use inherited function to transferFrom.\\n        ERC20.transferFrom(_sender, taxOffice, _amount);\\n        ITaxOffice(taxOffice).handleShareTokenTax(_amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/WrapperRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\n\\ncontract WrappedRouter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router public router;\\n    mapping(address => bool) public operator;\\n\\n    constructor(address _router) public {\\n        operator[msg.sender] = true;\\n        router = IUniswapV2Router(_router);\\n    }\\n\\n    //*================ OPERATOR FUNCTIONS ================*//\\n\\n    modifier onlyOperator() {\\n        require(operator[msg.sender], \\\"Caller is not an operator\\\");\\n        _;\\n    }\\n\\n    function setIsOperator(address _account, bool _isOperator)\\n        external\\n        onlyOwner\\n    {\\n        operator[_account] = _isOperator;\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        router = IUniswapV2Router(_router);\\n    }\\n\\n    //*================ ROUTER FUNCTIONS ================*//\\n\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        //Move tokens.\\n        IERC20(_tokenA).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountADesired\\n        );\\n        IERC20(_tokenB).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountBDesired\\n        );\\n\\n        //Increase Approval\\n        IERC20(_tokenA).safeIncreaseAllowance(address(router), _amountADesired);\\n        IERC20(_tokenB).safeIncreaseAllowance(address(router), _amountBDesired);\\n\\n        (amountA, amountB, liquidity) = router.addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin,\\n            _to,\\n            _deadline\\n        );\\n\\n        //Token A leftover management.\\n        uint256 remainingTokenA = _amountADesired.sub(amountA);\\n        uint256 balanceTokenA = IERC20(_tokenA).balanceOf(address(this));\\n        remainingTokenA = remainingTokenA > balanceTokenA\\n            ? balanceTokenA\\n            : remainingTokenA;\\n        if (remainingTokenA > 0) {\\n            IERC20(_tokenA).transfer(msg.sender, remainingTokenA);\\n        }\\n\\n        //Token B leftover management.\\n        uint256 remainingTokenB = _amountBDesired.sub(amountB);\\n        uint256 balanceTokenB = IERC20(_tokenB).balanceOf(address(this));\\n        remainingTokenB = remainingTokenB > balanceTokenB\\n            ? balanceTokenB\\n            : remainingTokenB;\\n        if (remainingTokenB > 0) {\\n            IERC20(_tokenB).transfer(msg.sender, remainingTokenB);\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external onlyOperator returns (uint256[] memory amounts) {\\n        //Assign token and transfer.\\n        address tokenIn = _path[0];\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), _amountIn);\\n\\n        //Increase Approval\\n        IERC20(tokenIn).safeIncreaseAllowance(address(router), _amountIn);\\n\\n        amounts = router.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n\\n        //Token leftover management.\\n        uint256 remainingTokenIn = _amountIn.sub(amounts[0]);\\n        uint256 balanceTokenIn = IERC20(tokenIn).balanceOf(address(this));\\n        remainingTokenIn = remainingTokenIn > balanceTokenIn\\n            ? balanceTokenIn\\n            : remainingTokenIn;\\n        if (remainingTokenIn > 0) {\\n            IERC20(tokenIn).transfer(msg.sender, remainingTokenIn);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/TaxOffice.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./access/Operator.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\nimport \\\"./interfaces/IBonusRewards.sol\\\";\\n\\ncontract TaxOffice is Operator {\\n    using SafeMath for uint256;\\n\\n    event HandledMainTokenTax(uint256 _amount);\\n    event HandledShareTokenTax(uint256 _amount);\\n\\n    IERC20Taxable public mainToken;\\n    IERC20Taxable public shareToken;\\n    IOracle public mainTokenOracle;\\n\\n    uint256 public constant BASIS_POINTS_DENOM = 10_000;\\n\\n    uint256[] public mainTokenTaxTwapTiers = [\\n        0,\\n        5e16,\\n        6e16,\\n        7e16,\\n        8e16,\\n        9e16,\\n        9.5e16,\\n        1e17,\\n        1.05e17,\\n        1.10e17,\\n        1.20e17,\\n        1.30e17,\\n        1.40e17,\\n        1.50e17\\n    ];\\n    uint256[] public mainTokenTaxRateTiers = [\\n        2250,\\n        2250,\\n        2250,\\n        2000,\\n        2000,\\n        1600,\\n        1600,\\n        1600,\\n        800,\\n        800,\\n        600,\\n        600,\\n        600,\\n        400\\n    ];\\n\\n    uint256[] public shareTokenTaxTwapTiers = [\\n        0,\\n        5e16,\\n        6e16,\\n        7e16,\\n        8e16,\\n        9e16,\\n        9.5e16,\\n        1e17,\\n        1.05e17,\\n        1.10e17,\\n        1.20e17,\\n        1.30e17,\\n        1.40e17,\\n        1.50e17\\n    ];\\n    uint256[] public shareTokenTaxRateTiers = [\\n        2250,\\n        2250,\\n        2250,\\n        2000,\\n        2000,\\n        1600,\\n        1600,\\n        1600,\\n        800,\\n        800,\\n        600,\\n        600,\\n        600,\\n        400\\n    ];\\n\\n    mapping(address => mapping(address => uint256)) public taxDiscount;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle\\n    ) public {\\n        mainToken = IERC20Taxable(_mainToken);\\n        shareToken = IERC20Taxable(_shareToken);\\n        mainTokenOracle = IOracle(_mainTokenOracle);\\n    }\\n\\n    /*\\n    Uses the oracle to fire the 'consult' method and get the price of tomb.\\n    */\\n    function getMainTokenPrice() public view returns (uint256) {\\n        try mainTokenOracle.consult(address(mainToken), 1e18) returns (\\n            uint144 _price\\n        ) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Erro: failed to fetch Main Token price from Oracle\\\");\\n        }\\n    }\\n\\n    /*\\n    Uses the oracle to fire the 'twap' method and get the price of tomb.\\n    */\\n    function getMainTokenUpdatedPrice() public view returns (uint256) {\\n        try mainTokenOracle.twap(address(mainToken), 1e18) returns (\\n            uint144 _price\\n        ) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Erro: failed to fetch Main Token price from Oracle\\\");\\n        }\\n    }\\n\\n    /* \\n    use the oracle to update maintoke twap price \\n    */\\n    function updateMainTokenPrice() public {\\n        if (address(mainTokenOracle) != address(0))\\n            try mainTokenOracle.update() {} catch {}\\n    }\\n\\n    function assertMonotonicity(uint256[] memory _monotonicArray)\\n        internal\\n        pure\\n    {\\n        uint8 endIdx = uint8(_monotonicArray.length.sub(1));\\n        for (uint8 idx = 0; idx <= endIdx; idx++) {\\n            if (idx > 0) {\\n                require(\\n                    _monotonicArray[idx] > _monotonicArray[idx - 1],\\n                    \\\"Error: TWAP tiers sequence are not monotonic\\\"\\n                );\\n            }\\n            if (idx < endIdx) {\\n                require(\\n                    _monotonicArray[idx] < _monotonicArray[idx + 1],\\n                    \\\"Error: TWAP tiers sequence are not monotonic\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    function setMainTokenTaxTiers(\\n        uint256[] calldata _mainTokenTaxTwapTiers,\\n        uint256[] calldata _mainTokenTaxRateTiers\\n    ) external onlyOperator {\\n        require(\\n            _mainTokenTaxTwapTiers.length == _mainTokenTaxRateTiers.length,\\n            \\\"Error: vector lengths are not the same.\\\"\\n        );\\n\\n        //Require monotonicity of TWAP tiers.\\n        assertMonotonicity(_mainTokenTaxTwapTiers);\\n\\n        //Set values.\\n        mainTokenTaxTwapTiers = _mainTokenTaxTwapTiers;\\n        mainTokenTaxRateTiers = _mainTokenTaxRateTiers;\\n    }\\n\\n    function setShareTokenTaxTiers(\\n        uint256[] calldata _shareTokenTaxTwapTiers,\\n        uint256[] calldata _shareTokenTaxRateTiers\\n    ) external onlyOperator {\\n        require(\\n            _shareTokenTaxTwapTiers.length == _shareTokenTaxRateTiers.length,\\n            \\\"Error: vector lengths are not the same.\\\"\\n        );\\n\\n        //Require monotonicity of TWAP tiers.\\n        assertMonotonicity(_shareTokenTaxTwapTiers);\\n\\n        //Set values.\\n        shareTokenTaxTwapTiers = _shareTokenTaxTwapTiers;\\n        shareTokenTaxRateTiers = _shareTokenTaxRateTiers;\\n    }\\n\\n    function searchSorted(uint256[] memory _monotonicArray, uint256 _value)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        uint8 endIdx = uint8(_monotonicArray.length.sub(1));\\n        for (uint8 tierIdx = endIdx; tierIdx >= 0; --tierIdx) {\\n            if (_value >= _monotonicArray[tierIdx]) {\\n                return tierIdx;\\n            }\\n        }\\n    }\\n\\n    function calculateMainTokenTax() external view returns (uint256 taxRate) {\\n        uint256 mainTokenPrice = getMainTokenUpdatedPrice();\\n        uint8 taxTierIdx = searchSorted(mainTokenTaxTwapTiers, mainTokenPrice);\\n        taxRate = mainTokenTaxRateTiers[taxTierIdx];\\n    }\\n\\n    function calculateShareTokenTax() external view returns (uint256 taxRate) {\\n        uint256 mainTokenPrice = getMainTokenUpdatedPrice();\\n        uint8 taxTierIdx = searchSorted(shareTokenTaxTwapTiers, mainTokenPrice);\\n        taxRate = shareTokenTaxRateTiers[taxTierIdx];\\n    }\\n\\n    function withdraw(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOperator {\\n        IERC20(_token).transfer(_recipient, _amount);\\n    }\\n\\n    function handleMainTokenTax(uint256 _amount) external virtual {\\n        emit HandledMainTokenTax(_amount);\\n    }\\n\\n    function handleShareTokenTax(uint256 _amount) external virtual {\\n        emit HandledShareTokenTax(_amount);\\n    }\\n\\n    /* ========== SET VARIABLES ========== */\\n\\n    function setMainTokenStaticTaxRate(uint256 _taxRate) external onlyOperator {\\n        mainToken.setStaticTaxRate(_taxRate);\\n    }\\n\\n    function setMainTokenEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyOperator\\n    {\\n        mainToken.setEnableDynamicTax(_enableDynamicTax);\\n    }\\n\\n    function setMainTokenWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyOperator\\n    {\\n        mainToken.setWhitelistType(_account, _type);\\n    }\\n\\n    function setShareTokenStaticTaxRate(uint256 _taxRate)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setStaticTaxRate(_taxRate);\\n    }\\n\\n    function setShareTokenEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setEnableDynamicTax(_enableDynamicTax);\\n    }\\n\\n    function setShareTokenWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setWhitelistType(_account, _type);\\n    }\\n\\n    function setTaxDiscount(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(\\n            _amount <= BASIS_POINTS_DENOM,\\n            \\\"Error: Discount rate too high.\\\"\\n        );\\n        taxDiscount[_sender][_recipient] = _amount;\\n    }\\n\\n    function setMainTokenOracle(address _mainTokenOracle)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _mainTokenOracle != address(0),\\n            \\\"Error: Oracle address cannot be 0 address\\\"\\n        );\\n        mainTokenOracle = IOracle(_mainTokenOracle);\\n    }\\n}\\n\\n// File: TaxOfficeV2.sol\\n\\ncontract TaxOfficeV2 is TaxOffice {\\n    using SafeERC20 for IERC20;\\n\\n    address public router;\\n    IERC20 public pegToken;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle,\\n        address _pegToken,\\n        address _router\\n    ) public TaxOffice(_mainToken, _shareToken, _mainTokenOracle) {\\n        pegToken = IERC20(_pegToken);\\n        router = _router;\\n    }\\n\\n    function setRouterAddress(address _router) public onlyOperator {\\n        router = _router;\\n    }\\n\\n    function handleShareTokenTax(uint256 _amount) external override {\\n        //Apply accesibility permissions.\\n        require(\\n            msg.sender == address(shareToken) || msg.sender == operator(),\\n            \\\"Error: Withdraw permissions insufficient.\\\"\\n        );\\n\\n        uint256 burnAmount_ = _amount.mul(800).div(1000);\\n        uint256 otherAmount_ = _amount.sub(burnAmount_);\\n\\n        swapShareTokenToMainTokenAndBurn(\\n            burnAmount_,\\n            address(shareToken),\\n            address(pegToken),\\n            address(mainToken)\\n        );\\n\\n        swapTokensForOther(\\n            otherAmount_,\\n            address(shareToken),\\n            address(pegToken)\\n        );\\n\\n        updateMainTokenPrice();\\n        //Emit event.\\n        emit HandledShareTokenTax(_amount);\\n    }\\n\\n    function swapShareTokenToMainTokenAndBurn(\\n        uint256 _tokenAmount,\\n        address _token0,\\n        address _token1,\\n        address _token2\\n    ) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory shareToMainTokenSwapPath;\\n        shareToMainTokenSwapPath = new address[](3);\\n        shareToMainTokenSwapPath[0] = _token0;\\n        shareToMainTokenSwapPath[1] = _token1;\\n        shareToMainTokenSwapPath[2] = _token2;\\n        //Swap from share token to main token.\\n        _approveTokenIfNeeded(_token0, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token1, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token2, router, _tokenAmount);\\n\\n        uint256[] memory amounts = IUniswapV2Router(router)\\n            .swapExactTokensForTokens(\\n                _tokenAmount,\\n                0,\\n                shareToMainTokenSwapPath,\\n                address(this),\\n                block.timestamp + 40\\n            );\\n        uint256 mainTokenAmounts = amounts[2];\\n        mainToken.burn(mainTokenAmounts);\\n    }\\n\\n    function swapTokensForOther(\\n        uint256 _tokenAmount,\\n        address _token0,\\n        address _token1\\n    ) internal {\\n        //Check _amount of token to be handled is available.\\n        uint256 tokenBalance = IERC20Taxable(_token0).balanceOf(address(this));\\n        if (_tokenAmount > tokenBalance) {\\n            _tokenAmount = tokenBalance;\\n        }\\n        // generate the uniswap pair path of token -> peg\\n        address[] memory path = new address[](2);\\n        path[0] = _token0;\\n        path[1] = _token1;\\n\\n        // approve token transfer to cover all possible scenarios\\n        _approveTokenIfNeeded(_token0, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token1, router, _tokenAmount);\\n\\n        IUniswapV2Router(router).swapExactTokensForTokens(\\n            _tokenAmount,\\n            0, // accept any amount of pegToken\\n            path,\\n            address(this),\\n            block.timestamp + 40\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(\\n        address _token,\\n        address _router,\\n        uint256 _tokenAmount\\n    ) internal {\\n        if (IERC20(_token).allowance(address(this), _router) < _tokenAmount) {\\n            IERC20(_token).safeApprove(_router, type(uint256).max);\\n        }\\n    }\\n}\\n\\ncontract TaxOfficeV3 is TaxOfficeV2 {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle,\\n        address _pegToken,\\n        address _router\\n    )\\n        public\\n        TaxOfficeV2(\\n            _mainToken,\\n            _shareToken,\\n            _mainTokenOracle,\\n            _pegToken,\\n            _router\\n        )\\n    {}\\n\\n    function handleMainTokenTax(uint256 _amount) external override {\\n        require(\\n            msg.sender == address(mainToken) || msg.sender == operator(),\\n            \\\"Error: Withdraw permissions insufficient.\\\"\\n        );\\n        uint256 burnAmount_ = _amount.mul(80).div(100);\\n        mainToken.burn(burnAmount_);\\n\\n        uint256 taxAmount_ = _amount.sub(burnAmount_);\\n        swapTokensForOther(taxAmount_, address(mainToken), address(pegToken));\\n        updateMainTokenPrice();\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IBonusRewards.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBonusRewards {\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function restartPool(uint256 _amount, uint256 _nextEpochPoint) external;\\n}\\n\"\n    },\n    \"contracts/UsdcOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStdReference.sol\\\";\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\n\\n/**\\n https://docs.bandchain.org/band-standard-dataset/supported-blockchains.html\\n https://docs.bandchain.org/band-standard-dataset/using-band-dataset/using-band-dataset-evm.html\\n**/\\ncontract UsdcOracle {\\n    using SafeMath for uint256;\\n    IStdReference private ref;\\n\\n    uint256 public price;\\n    uint256[] public pricesArr;\\n\\n    constructor(IStdReference _ref) public {\\n        ref = _ref;\\n    }\\n\\n    function consult(\\n        address, /* _token */\\n        uint256 /* _amountIn */\\n    ) external pure returns (uint144 amountOut) {\\n        return 1e18;\\n    }\\n\\n    function twap(\\n        address, /* _token */\\n        uint256 /* _amountIn */\\n    ) external pure returns (uint144 _amountOut) {\\n        return 1e18;\\n    }\\n\\n    function getPrice(string memory _base, string memory _quote)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        IStdReference.ReferenceData memory data = ref.getReferenceData(\\n            _base,\\n            _quote\\n        );\\n        return data.rate;\\n    }\\n\\n    function getMultiPrices(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_bases.length == _quotes.length, \\\"BAD_INPUT_LENGTH\\\");\\n        IStdReference.ReferenceData[] memory data = ref.getReferenceDataBulk(\\n            _bases,\\n            _quotes\\n        );\\n\\n        uint256 len = _bases.length;\\n        uint256[] memory prices = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            prices[i] = data[i].rate;\\n        }\\n\\n        return prices;\\n    }\\n\\n    function savePrice(string memory _base, string memory _quote) external {\\n        IStdReference.ReferenceData memory data = ref.getReferenceData(\\n            _base,\\n            _quote\\n        );\\n        price = data.rate;\\n    }\\n\\n    function saveMultiPrices(string[] memory _bases, string[] memory _quotes)\\n        public\\n    {\\n        require(_bases.length == _quotes.length, \\\"BAD_INPUT_LENGTH\\\");\\n        uint256 len = _bases.length;\\n        IStdReference.ReferenceData[] memory data = ref.getReferenceDataBulk(\\n            _bases,\\n            _quotes\\n        );\\n        delete pricesArr;\\n        for (uint256 i = 0; i < len; i++) {\\n            pricesArr.push(data[i].rate);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IStdReference.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote)\\n        external\\n        view\\n        returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(\\n        string[] memory _bases,\\n        string[] memory _quotes\\n    ) external view returns (ReferenceData[] memory);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/SnowOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./lib/FixedPoint.sol\\\";\\nimport \\\"./lib/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./utils/Epoch.sol\\\";\\nimport \\\"./interfaces/lib/IUniswapV2Pair.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract SnowOracle is Epoch {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n    using SafeMath for uint144;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    address public snow;\\n    uint144 public constant DECIMALS_MULTIPLER = 10**12; // USDC Decimals = 6\\n    // uniswap\\n    address public token0;\\n    address public token1;\\n    IUniswapV2Pair public pair;\\n\\n    // oracle\\n    uint32 public blockTimestampLast;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IUniswapV2Pair _pair,\\n        uint256 _period,\\n        uint256 _startTime,\\n        address _snow\\n    ) public Epoch(_period, _startTime, 0) {\\n        snow = address(_snow);\\n        pair = _pair;\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"Oracle: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /** @dev Updates 1-day EMA price from Uniswap.  */\\n    function update() external checkEpoch {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed == 0) {\\n            // prevent divided by zero\\n            return;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(\\n            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\\n        );\\n        price1Average = FixedPoint.uq112x112(\\n            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\\n        );\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0Cumulative, price1Cumulative);\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut)\\n    {\\n        if (_token == token0) {\\n            amountOut = price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == token1, \\\"Oracle: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(_amountIn).decode144();\\n        }\\n        if (_token == snow) {\\n            amountOut = uint144(amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut)\\n    {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (_token == token0) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price0Cumulative - price0CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        } else if (_token == token1) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price1Cumulative - price1CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        }\\n        if (_token == snow) {\\n            _amountOut = uint144(_amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\n    },\n    \"contracts/lib/Babylonian.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\"\n    },\n    \"contracts/lib/FixedPoint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\\n    uint256 private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y)\\n        internal\\n        pure\\n        returns (uq144x112 memory)\\n    {\\n        uint256 z;\\n        require(\\n            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\\n            \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\n        );\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\"\n    },\n    \"contracts/lib/UniswapV2OracleLibrary.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"../interfaces/lib/IUniswapV2Pair.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        ) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative +=\\n                uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\\n                timeElapsed;\\n            // counterfactual\\n            price1Cumulative +=\\n                uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\\n                timeElapsed;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/lib/IUniswapV2Pair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/Oracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./lib/FixedPoint.sol\\\";\\nimport \\\"./lib/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./utils/Epoch.sol\\\";\\nimport \\\"./interfaces/lib/IUniswapV2Pair.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract Oracle is Epoch {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n    using SafeMath for uint144;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    address public snow;\\n    uint144 public constant DECIMALS_MULTIPLER = 10**12; // USDC Decimals = 6\\n    // uniswap\\n    address public token0;\\n    address public token1;\\n    IUniswapV2Pair public pair;\\n\\n    // oracle\\n    uint32 public blockTimestampLast;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IUniswapV2Pair _pair,\\n        uint256 _period,\\n        uint256 _startTime,\\n        address _snow\\n    ) public Epoch(_period, _startTime, 0) {\\n        snow = address(_snow);\\n        pair = _pair;\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"Oracle: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /** @dev Updates 1-day EMA price from Uniswap.  */\\n    function update() external checkEpoch {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed == 0) {\\n            // prevent divided by zero\\n            return;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(\\n            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\\n        );\\n        price1Average = FixedPoint.uq112x112(\\n            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\\n        );\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0Cumulative, price1Cumulative);\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut)\\n    {\\n        if (_token == token0) {\\n            amountOut = price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == token1, \\\"Oracle: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(_amountIn).decode144();\\n        }\\n        if (_token == snow) {\\n            amountOut = uint144(amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut)\\n    {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (_token == token0) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price0Cumulative - price0CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        } else if (_token == token1) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price1Cumulative - price1CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        }\\n        if (_token == snow) {\\n            _amountOut = uint144(_amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\n    },\n    \"contracts/GlcrOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./lib/FixedPoint.sol\\\";\\nimport \\\"./lib/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./utils/Epoch.sol\\\";\\nimport \\\"./interfaces/lib/IUniswapV2Pair.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract GlcrOracle is Epoch {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n    using SafeMath for uint144;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    address public glcr;\\n    uint144 public constant DECIMALS_MULTIPLER = 10**12; // USDC Decimals = 6\\n    // uniswap\\n    address public token0;\\n    address public token1;\\n    IUniswapV2Pair public pair;\\n\\n    // oracle\\n    uint32 public blockTimestampLast;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IUniswapV2Pair _pair,\\n        uint256 _period,\\n        uint256 _startTime,\\n        address _glcr\\n    ) public Epoch(_period, _startTime, 0) {\\n        glcr = address(_glcr);\\n        pair = _pair;\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"Oracle: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /** @dev Updates 1-day EMA price from Uniswap.  */\\n    function update() external checkEpoch {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed == 0) {\\n            // prevent divided by zero\\n            return;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(\\n            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\\n        );\\n        price1Average = FixedPoint.uq112x112(\\n            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\\n        );\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0Cumulative, price1Cumulative);\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut)\\n    {\\n        if (_token == token0) {\\n            amountOut = price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == token1, \\\"Oracle: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(_amountIn).decode144();\\n        }\\n        if (_token == glcr) {\\n            amountOut = uint144(amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut)\\n    {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (_token == token0) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price0Cumulative - price0CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        } else if (_token == token1) {\\n            _amountOut = FixedPoint\\n                .uq112x112(\\n                    uint224(\\n                        (price1Cumulative - price1CumulativeLast) / timeElapsed\\n                    )\\n                )\\n                .mul(_amountIn)\\n                .decode144();\\n        }\\n        if (_token == glcr) {\\n            _amountOut = uint144(_amountOut.mul(DECIMALS_MULTIPLER));\\n        }\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\n    },\n    \"contracts/SnowNode.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\n\\ncontract SnowNode {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public TOKEN;\\n    uint256[] public tierAllocPoints = [1 ether, 1 ether, 1 ether];\\n    uint256[] public tierAmounts = [0.00002 ether, 1 ether, 1 ether];\\n    struct User {\\n        uint256 total_deposits;\\n        uint256 total_claims;\\n        uint256 last_distPoints;\\n    }\\n\\n    event CreateNode(uint256 timestamp, address account, uint256 num);\\n\\n    address private dev;\\n\\n    mapping(address => User) public users;\\n    mapping(address => mapping(uint256 => uint256)) public nodes;\\n    mapping(uint256 => uint256) public totalNodes;\\n    address[] public userIndices;\\n\\n    uint256 public total_deposited;\\n    uint256 public total_claimed;\\n    uint256 public total_rewards;\\n    uint256 public treasury_rewards;\\n    uint256 public treasuryFeePercent;\\n    uint256 public totalDistributeRewards;\\n    uint256 public totalDistributePoints;\\n    uint256 public maxReturnPercent;\\n    uint256 public dripRate;\\n    uint256 public lastDripTime;\\n    uint256 public startTime;\\n    bool public enabled;\\n    uint256 public constant MULTIPLIER = 10e18;\\n\\n    constructor(uint256 _startTime, address _token) public {\\n        maxReturnPercent = 500;\\n        dripRate = 2100000;\\n        treasuryFeePercent = 25;\\n\\n        lastDripTime = _startTime > block.timestamp\\n            ? _startTime\\n            : block.timestamp;\\n        startTime = _startTime;\\n        enabled = true;\\n        TOKEN = IERC20(_token);\\n        dev = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Do not send CRO.\\\");\\n    }\\n\\n    modifier onlyDev() {\\n        require(msg.sender == dev, \\\"Caller is not the dev!\\\");\\n        _;\\n    }\\n\\n    function changeDev(address payable newDev) external onlyDev {\\n        require(newDev != address(0), \\\"Zero address\\\");\\n        dev = newDev;\\n    }\\n\\n    function claimTreasuryRewards() external {\\n        if (treasury_rewards > 0) {\\n            TOKEN.safeTransfer(dev, treasury_rewards);\\n            treasury_rewards = 0;\\n        }\\n    }\\n\\n    function setStartTime(uint256 _startTime) external onlyDev {\\n        startTime = _startTime;\\n    }\\n\\n    function setEnabled(bool _enabled) external onlyDev {\\n        enabled = _enabled;\\n    }\\n\\n    function setTreasuryFeePercent(uint256 percent) external onlyDev {\\n        treasuryFeePercent = percent;\\n    }\\n\\n    function setDripRate(uint256 rate) external onlyDev {\\n        dripRate = rate;\\n    }\\n\\n    function setLastDripTime(uint256 timestamp) external onlyDev {\\n        lastDripTime = timestamp;\\n    }\\n\\n    function setMaxReturnPercent(uint256 percent) external onlyDev {\\n        maxReturnPercent = percent;\\n    }\\n\\n    function setTierValues(\\n        uint256[] memory _tierAllocPoints,\\n        uint256[] memory _tierAmounts\\n    ) external onlyDev {\\n        require(\\n            _tierAllocPoints.length == _tierAmounts.length,\\n            \\\"Length mismatch\\\"\\n        );\\n        tierAllocPoints = _tierAllocPoints;\\n        tierAmounts = _tierAmounts;\\n    }\\n\\n    function setUser(address _addr, User memory _user) external onlyDev {\\n        total_deposited = total_deposited.sub(users[_addr].total_deposits).add(\\n            _user.total_deposits\\n        );\\n        total_claimed = total_claimed.sub(users[_addr].total_claims).add(\\n            _user.total_claims\\n        );\\n        users[_addr].total_deposits = _user.total_deposits;\\n        users[_addr].total_claims = _user.total_claims;\\n    }\\n\\n    function setNodes(address _user, uint256[] memory _nodes) external onlyDev {\\n        for (uint256 i = 0; i < _nodes.length; i++) {\\n            totalNodes[i] = totalNodes[i].sub(nodes[_user][i]).add(_nodes[i]);\\n            nodes[_user][i] = _nodes[i];\\n        }\\n    }\\n\\n    function totalAllocPoints() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(totalNodes[i]));\\n        }\\n        return total;\\n    }\\n\\n    function allocPoints(address account) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(nodes[account][i]));\\n        }\\n        return total;\\n    }\\n\\n    function getDistributionRewards(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (isMaxPayout(account)) return 0;\\n\\n        uint256 newDividendPoints = totalDistributePoints.sub(\\n            users[account].last_distPoints\\n        );\\n        uint256 distribute = allocPoints(account).mul(newDividendPoints).div(\\n            MULTIPLIER\\n        );\\n        return distribute > total_rewards ? total_rewards : distribute;\\n    }\\n\\n    function getTotalRewards(address _sender) public view returns (uint256) {\\n        if (users[_sender].total_deposits == 0) return 0;\\n\\n        uint256 rewards = getDistributionRewards(_sender).add(\\n            getRewardDrip().mul(allocPoints(_sender)).div(totalAllocPoints())\\n        );\\n        uint256 totalClaims = users[_sender].total_claims;\\n        uint256 maxPay = maxPayout(_sender);\\n\\n        // Payout remaining if exceeds max payout\\n        return\\n            totalClaims.add(rewards) > maxPay\\n                ? maxPay.sub(totalClaims)\\n                : rewards;\\n    }\\n\\n    function create(uint256 nodeTier, uint256 numNodes) external {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        claim();\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function claim() public {\\n        dripRewards();\\n\\n        address _sender = msg.sender;\\n        uint256 _rewards = getDistributionRewards(_sender);\\n\\n        if (_rewards > 0) {\\n            total_rewards = total_rewards.sub(_rewards);\\n            uint256 totalClaims = users[_sender].total_claims;\\n            uint256 maxPay = maxPayout(_sender);\\n\\n            // Payout remaining if exceeds max payout\\n            if (totalClaims.add(_rewards) > maxPay) {\\n                _rewards = maxPay.sub(totalClaims);\\n            }\\n\\n            users[_sender].total_claims = users[_sender].total_claims.add(\\n                _rewards\\n            );\\n            total_claimed = total_claimed.add(_rewards);\\n\\n            IERC20(TOKEN).safeTransfer(_sender, _rewards);\\n\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n    }\\n\\n    function _compound(uint256 nodeTier, uint256 numNodes) internal {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function compound() public {\\n        uint256 rewardsPending = getTotalRewards(msg.sender);\\n        require(rewardsPending >= tierAmounts[0], \\\"Not enough to compound\\\");\\n        uint256 numPossible = rewardsPending.div(tierAmounts[0]);\\n        claim();\\n        _compound(0, numPossible);\\n    }\\n\\n    function maxPayout(address _sender) public view returns (uint256) {\\n        return users[_sender].total_deposits.mul(maxReturnPercent).div(100);\\n    }\\n\\n    function isMaxPayout(address _sender) public view returns (bool) {\\n        return users[_sender].total_claims >= maxPayout(_sender);\\n    }\\n\\n    function _disperse(uint256 amount) internal {\\n        if (amount > 0) {\\n            totalDistributePoints = totalDistributePoints.add(\\n                amount.mul(MULTIPLIER).div(totalAllocPoints())\\n            );\\n            totalDistributeRewards = totalDistributeRewards.add(amount);\\n            total_rewards = total_rewards.add(amount);\\n        }\\n    }\\n\\n    function dripRewards() public {\\n        uint256 drip = getRewardDrip();\\n\\n        if (drip > 0) {\\n            _disperse(drip);\\n            lastDripTime = block.timestamp;\\n        }\\n    }\\n\\n    function getRewardDrip() public view returns (uint256) {\\n        if (lastDripTime < block.timestamp) {\\n            uint256 poolBalance = getBalancePool();\\n            uint256 secondsPassed = block.timestamp.sub(lastDripTime);\\n            uint256 drip = secondsPassed.mul(poolBalance).div(dripRate);\\n\\n            if (drip > poolBalance) {\\n                drip = poolBalance;\\n            }\\n\\n            return drip;\\n        }\\n        return 0;\\n    }\\n\\n    function getDayDripEstimate(address _user) external view returns (uint256) {\\n        return\\n            allocPoints(_user) > 0 && !isMaxPayout(_user)\\n                ? getBalancePool()\\n                    .mul(86400)\\n                    .mul(allocPoints(_user))\\n                    .div(totalAllocPoints())\\n                    .div(dripRate)\\n                : 0;\\n    }\\n\\n    function total_users() external view returns (uint256) {\\n        return userIndices.length;\\n    }\\n\\n    function numNodes(address _sender, uint256 _nodeId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return nodes[_sender][_nodeId];\\n    }\\n\\n    function getNodes(address _sender)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory userNodes = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            userNodes[i] = userNodes[i].add(nodes[_sender][i]);\\n        }\\n        return userNodes;\\n    }\\n\\n    function getTotalNodes() external view returns (uint256[] memory) {\\n        uint256[] memory totals = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            totals[i] = totals[i].add(totalNodes[i]);\\n        }\\n        return totals;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return IERC20(TOKEN).balanceOf(address(this));\\n    }\\n\\n    function getBalancePool() public view returns (uint256) {\\n        return getBalance().sub(total_rewards).sub(treasury_rewards);\\n    }\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyDev {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/GlcrNode.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\n\\ncontract GlcrNode {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public TOKEN;\\n    uint256[] public tierAllocPoints = [1 ether, 1 ether, 1 ether];\\n    uint256[] public tierAmounts = [0.00002 ether, 1 ether, 1 ether];\\n    struct User {\\n        uint256 total_deposits;\\n        uint256 total_claims;\\n        uint256 last_distPoints;\\n    }\\n\\n    event CreateNode(uint256 timestamp, address account, uint256 num);\\n\\n    address private dev;\\n\\n    mapping(address => User) public users;\\n    mapping(address => mapping(uint256 => uint256)) public nodes;\\n    mapping(uint256 => uint256) public totalNodes;\\n    address[] public userIndices;\\n\\n    uint256 public total_deposited;\\n    uint256 public total_claimed;\\n    uint256 public total_rewards;\\n    uint256 public treasury_rewards;\\n    uint256 public treasuryFeePercent;\\n    uint256 public totalDistributeRewards;\\n    uint256 public totalDistributePoints;\\n    uint256 public maxReturnPercent;\\n    uint256 public dripRate;\\n    uint256 public lastDripTime;\\n    uint256 public startTime;\\n    bool public enabled;\\n    uint256 public constant MULTIPLIER = 10e18;\\n\\n    constructor(uint256 _startTime, address _token) public {\\n        maxReturnPercent = 500;\\n        dripRate = 2100000;\\n        treasuryFeePercent = 25;\\n\\n        lastDripTime = _startTime > block.timestamp\\n            ? _startTime\\n            : block.timestamp;\\n        startTime = _startTime;\\n        enabled = true;\\n        TOKEN = IERC20(_token);\\n        dev = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Do not send CRO.\\\");\\n    }\\n\\n    modifier onlyDev() {\\n        require(msg.sender == dev, \\\"Caller is not the dev!\\\");\\n        _;\\n    }\\n\\n    function changeDev(address payable newDev) external onlyDev {\\n        require(newDev != address(0), \\\"Zero address\\\");\\n        dev = newDev;\\n    }\\n\\n    function claimTreasuryRewards() external {\\n        if (treasury_rewards > 0) {\\n            TOKEN.safeTransfer(dev, treasury_rewards);\\n            treasury_rewards = 0;\\n        }\\n    }\\n\\n    function setStartTime(uint256 _startTime) external onlyDev {\\n        startTime = _startTime;\\n    }\\n\\n    function setEnabled(bool _enabled) external onlyDev {\\n        enabled = _enabled;\\n    }\\n\\n    function setTreasuryFeePercent(uint256 percent) external onlyDev {\\n        treasuryFeePercent = percent;\\n    }\\n\\n    function setDripRate(uint256 rate) external onlyDev {\\n        dripRate = rate;\\n    }\\n\\n    function setLastDripTime(uint256 timestamp) external onlyDev {\\n        lastDripTime = timestamp;\\n    }\\n\\n    function setMaxReturnPercent(uint256 percent) external onlyDev {\\n        maxReturnPercent = percent;\\n    }\\n\\n    function setTierValues(\\n        uint256[] memory _tierAllocPoints,\\n        uint256[] memory _tierAmounts\\n    ) external onlyDev {\\n        require(\\n            _tierAllocPoints.length == _tierAmounts.length,\\n            \\\"Length mismatch\\\"\\n        );\\n        tierAllocPoints = _tierAllocPoints;\\n        tierAmounts = _tierAmounts;\\n    }\\n\\n    function setUser(address _addr, User memory _user) external onlyDev {\\n        total_deposited = total_deposited.sub(users[_addr].total_deposits).add(\\n            _user.total_deposits\\n        );\\n        total_claimed = total_claimed.sub(users[_addr].total_claims).add(\\n            _user.total_claims\\n        );\\n        users[_addr].total_deposits = _user.total_deposits;\\n        users[_addr].total_claims = _user.total_claims;\\n    }\\n\\n    function setNodes(address _user, uint256[] memory _nodes) external onlyDev {\\n        for (uint256 i = 0; i < _nodes.length; i++) {\\n            totalNodes[i] = totalNodes[i].sub(nodes[_user][i]).add(_nodes[i]);\\n            nodes[_user][i] = _nodes[i];\\n        }\\n    }\\n\\n    function totalAllocPoints() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(totalNodes[i]));\\n        }\\n        return total;\\n    }\\n\\n    function allocPoints(address account) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(nodes[account][i]));\\n        }\\n        return total;\\n    }\\n\\n    function getDistributionRewards(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (isMaxPayout(account)) return 0;\\n\\n        uint256 newDividendPoints = totalDistributePoints.sub(\\n            users[account].last_distPoints\\n        );\\n        uint256 distribute = allocPoints(account).mul(newDividendPoints).div(\\n            MULTIPLIER\\n        );\\n        return distribute > total_rewards ? total_rewards : distribute;\\n    }\\n\\n    function getTotalRewards(address _sender) public view returns (uint256) {\\n        if (users[_sender].total_deposits == 0) return 0;\\n\\n        uint256 rewards = getDistributionRewards(_sender).add(\\n            getRewardDrip().mul(allocPoints(_sender)).div(totalAllocPoints())\\n        );\\n        uint256 totalClaims = users[_sender].total_claims;\\n        uint256 maxPay = maxPayout(_sender);\\n\\n        // Payout remaining if exceeds max payout\\n        return\\n            totalClaims.add(rewards) > maxPay\\n                ? maxPay.sub(totalClaims)\\n                : rewards;\\n    }\\n\\n    function create(uint256 nodeTier, uint256 numNodes) external {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        claim();\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function claim() public {\\n        dripRewards();\\n\\n        address _sender = msg.sender;\\n        uint256 _rewards = getDistributionRewards(_sender);\\n\\n        if (_rewards > 0) {\\n            total_rewards = total_rewards.sub(_rewards);\\n            uint256 totalClaims = users[_sender].total_claims;\\n            uint256 maxPay = maxPayout(_sender);\\n\\n            // Payout remaining if exceeds max payout\\n            if (totalClaims.add(_rewards) > maxPay) {\\n                _rewards = maxPay.sub(totalClaims);\\n            }\\n\\n            users[_sender].total_claims = users[_sender].total_claims.add(\\n                _rewards\\n            );\\n            total_claimed = total_claimed.add(_rewards);\\n\\n            IERC20(TOKEN).safeTransfer(_sender, _rewards);\\n\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n    }\\n\\n    function _compound(uint256 nodeTier, uint256 numNodes) internal {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function compound() public {\\n        uint256 rewardsPending = getTotalRewards(msg.sender);\\n        require(rewardsPending >= tierAmounts[0], \\\"Not enough to compound\\\");\\n        uint256 numPossible = rewardsPending.div(tierAmounts[0]);\\n        claim();\\n        _compound(0, numPossible);\\n    }\\n\\n    function maxPayout(address _sender) public view returns (uint256) {\\n        return users[_sender].total_deposits.mul(maxReturnPercent).div(100);\\n    }\\n\\n    function isMaxPayout(address _sender) public view returns (bool) {\\n        return users[_sender].total_claims >= maxPayout(_sender);\\n    }\\n\\n    function _disperse(uint256 amount) internal {\\n        if (amount > 0) {\\n            totalDistributePoints = totalDistributePoints.add(\\n                amount.mul(MULTIPLIER).div(totalAllocPoints())\\n            );\\n            totalDistributeRewards = totalDistributeRewards.add(amount);\\n            total_rewards = total_rewards.add(amount);\\n        }\\n    }\\n\\n    function dripRewards() public {\\n        uint256 drip = getRewardDrip();\\n\\n        if (drip > 0) {\\n            _disperse(drip);\\n            lastDripTime = block.timestamp;\\n        }\\n    }\\n\\n    function getRewardDrip() public view returns (uint256) {\\n        if (lastDripTime < block.timestamp) {\\n            uint256 poolBalance = getBalancePool();\\n            uint256 secondsPassed = block.timestamp.sub(lastDripTime);\\n            uint256 drip = secondsPassed.mul(poolBalance).div(dripRate);\\n\\n            if (drip > poolBalance) {\\n                drip = poolBalance;\\n            }\\n\\n            return drip;\\n        }\\n        return 0;\\n    }\\n\\n    function getDayDripEstimate(address _user) external view returns (uint256) {\\n        return\\n            allocPoints(_user) > 0 && !isMaxPayout(_user)\\n                ? getBalancePool()\\n                    .mul(86400)\\n                    .mul(allocPoints(_user))\\n                    .div(totalAllocPoints())\\n                    .div(dripRate)\\n                : 0;\\n    }\\n\\n    function total_users() external view returns (uint256) {\\n        return userIndices.length;\\n    }\\n\\n    function numNodes(address _sender, uint256 _nodeId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return nodes[_sender][_nodeId];\\n    }\\n\\n    function getNodes(address _sender)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory userNodes = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            userNodes[i] = userNodes[i].add(nodes[_sender][i]);\\n        }\\n        return userNodes;\\n    }\\n\\n    function getTotalNodes() external view returns (uint256[] memory) {\\n        uint256[] memory totals = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            totals[i] = totals[i].add(totalNodes[i]);\\n        }\\n        return totals;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return IERC20(TOKEN).balanceOf(address(this));\\n    }\\n\\n    function getBalancePool() public view returns (uint256) {\\n        return getBalance().sub(total_rewards).sub(treasury_rewards);\\n    }\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyDev {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/SnowGenesisRewardPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Note that this pool has no minter key of SNOW (rewards).\\n// Instead, the governance will call SNOW distributeReward method and send reward to this pool at the beginning.\\ncontract SnowGenesisRewardPool is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n    address public daoFund;\\n    uint256 public depositFee;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SNOW to distribute.\\n        uint256 lastRewardTime; // Last time that SNOW distribution occurs.\\n        uint256 accSnowPerShare; // Accumulated SNOW per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardBlock has passed\\n    }\\n\\n    IERC20 public snow;\\n    IERC20 public depositToken;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when SNOW mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when SNOW mining ends.\\n    uint256 public poolEndTime;\\n\\n    uint256 public snowPerSecond;\\n    uint256 public runningTime = 48 hours;\\n    uint256 public constant TOTAL_REWARDS = 24_000 ether;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _snow,\\n        uint256 _poolStartTime,\\n        address _daoFund,\\n        uint256 _depositFee,\\n        address _depositToken\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_snow != address(0)) snow = IERC20(_snow);\\n        snowPerSecond = TOTAL_REWARDS.div(runningTime);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = poolStartTime + runningTime;\\n        daoFund = _daoFund;\\n        depositToken = IERC20(_depositToken);\\n        depositFee = _depositFee;\\n        operator = msg.sender;\\n        add(12_000, depositToken, false, 0);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            operator == msg.sender,\\n            \\\"SnowUsdcGenesis: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(\\n                poolInfo[pid].token != _token,\\n                \\\"SnowUsdcGenesis: existing pool?\\\"\\n            );\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) ||\\n            (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                lastRewardTime: _lastRewardTime,\\n                accSnowPerShare: 0,\\n                isStarted: _isStarted\\n            })\\n        );\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's SNOW allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return poolEndTime.sub(poolStartTime).mul(snowPerSecond);\\n            return poolEndTime.sub(_fromTime).mul(snowPerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return _toTime.sub(poolStartTime).mul(snowPerSecond);\\n            return _toTime.sub(_fromTime).mul(snowPerSecond);\\n        }\\n    }\\n\\n    // View function to see pending SNOW on frontend.\\n    function pendingSNOW(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accSnowPerShare = pool.accSnowPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _snowReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            accSnowPerShare = accSnowPerShare.add(\\n                _snowReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        return user.amount.mul(accSnowPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _snowReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            pool.accSnowPerShare = pool.accSnowPerShare.add(\\n                _snowReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user\\n                .amount\\n                .mul(pool.accSnowPerShare)\\n                .div(1e18)\\n                .sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeSnowTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            if (daoFund != address(0) && depositFee != 0) {\\n                uint256 feeAmount = _amount.mul(depositFee).div(10000);\\n                pool.token.safeTransferFrom(_sender, daoFund, feeAmount);\\n                pool.token.safeTransferFrom(\\n                    _sender,\\n                    address(this),\\n                    _amount.sub(feeAmount)\\n                );\\n                user.amount = user.amount.add(_amount.sub(feeAmount));\\n            } else {\\n                pool.token.safeTransferFrom(_sender, address(this), _amount);\\n                user.amount = user.amount.add(_amount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accSnowPerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accSnowPerShare).div(1e18).sub(\\n            user.rewardDebt\\n        );\\n        if (_pending > 0) {\\n            safeSnowTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSnowPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe SNOW transfer function, just in case if rounding error causes pool to not have enough SNOWs.\\n    function safeSnowTransfer(address _to, uint256 _amount) internal {\\n        uint256 _snowBalance = snow.balanceOf(address(this));\\n        if (_snowBalance > 0) {\\n            if (_amount > _snowBalance) {\\n                snow.safeTransfer(_to, _snowBalance);\\n            } else {\\n                snow.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (SNOW or lps) if less than 90 days after pool ends\\n            require(IERC20(_token) != snow, \\\"snow\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(IERC20(_token) != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        IERC20(_token).safeTransfer(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/SBond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./access/Operator.sol\\\";\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\n\\ncontract SBond is ERC20Burnable, Operator {\\n    using SafeMath for uint256;\\n\\n    uint256 private totalBurned_;\\n\\n    /**\\n     * @notice Constructs the Walrus Bond ERC-20 contract.\\n     */\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC20(name_, symbol_)\\n    {}\\n\\n    /**\\n     * @notice Operator mints basis bonds to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of basis bonds to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    function totalBurned() external view returns (uint256) {\\n        return totalBurned_;\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal override {\\n        super._burn(_account, _amount);\\n        totalBurned_ = totalBurned_.add(_amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/GlcrRewardPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of glcr (rewards).\\n// Instead, the governance will call glcr distributeReward method and send reward to this pool at the beginning.\\ncontract GlcrRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n    address public daoFund;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. glcrs to distribute per block.\\n        uint256 lastRewardTime; // Last time that glcrs distribution occurs.\\n        uint256 accglcrPerShare; // Accumulated glcrs per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardTime has passed\\n    }\\n\\n    IERC20 public glcr;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when glcr mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when glcr mining ends.\\n    uint256 public poolEndTime;\\n\\n    uint256 public glcrPerSecond;\\n    uint256 public RUNNING_TIME = 52 weeks;\\n    uint256 public constant TOTAL_REWARDS = 21500 ether;\\n\\n    bool enableTaxes = true;\\n    uint256[] public stakingTires = [\\n        1 weeks,\\n        2 weeks,\\n        3 weeks,\\n        4 weeks,\\n        5 weeks\\n    ];\\n    uint256[] public withdrawTaxTires = [500, 400, 300, 200, 100];\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _glcr,\\n        address _daoFund,\\n        uint256 _poolStartTime\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        require(_glcr != address(0), \\\"_glcr\\\");\\n        require(_daoFund != address(0), \\\"_daoFund\\\");\\n        glcr = IERC20(_glcr);\\n        daoFund = _daoFund;\\n        glcrPerSecond = TOTAL_REWARDS.div(365).div(24).div(60).div(60);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = poolStartTime + RUNNING_TIME;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            operator == msg.sender,\\n            \\\"glcrRewardPool: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(\\n                poolInfo[pid].token != _token,\\n                \\\"glcrRewardPool: existing pool?\\\"\\n            );\\n        }\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) ||\\n            (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                lastRewardTime: _lastRewardTime,\\n                accglcrPerShare: 0,\\n                isStarted: _isStarted\\n            })\\n        );\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's glcr allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return poolEndTime.sub(poolStartTime).mul(glcrPerSecond);\\n            return poolEndTime.sub(_fromTime).mul(glcrPerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime)\\n                return _toTime.sub(poolStartTime).mul(glcrPerSecond);\\n            return _toTime.sub(_fromTime).mul(glcrPerSecond);\\n        }\\n    }\\n\\n    // View function to see pending glcrs on frontend.\\n    function pendingShare(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accglcrPerShare = pool.accglcrPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _glcrReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            accglcrPerShare = accglcrPerShare.add(\\n                _glcrReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        return user.amount.mul(accglcrPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(\\n                pool.lastRewardTime,\\n                block.timestamp\\n            );\\n            uint256 _glcrReward = _generatedReward.mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n            pool.accglcrPerShare = pool.accglcrPerShare.add(\\n                _glcrReward.mul(1e18).div(tokenSupply)\\n            );\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user\\n                .amount\\n                .mul(pool.accglcrPerShare)\\n                .div(1e18)\\n                .sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeglcrTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accglcrPerShare).div(1e18);\\n\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    function setTaxesStatus(bool _enableTaxes) external onlyOperator {\\n        enableTaxes = _enableTaxes;\\n    }\\n\\n    function setStakingTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < stakingTires.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        if (_index > 0) {\\n            require(_value < stakingTires[_index - 1]);\\n        }\\n\\n        if (_index < stakingTires.length - 1) {\\n            require(_value > stakingTires[_index + 1]);\\n        }\\n\\n        stakingTires[_index] = _value;\\n    }\\n\\n    function setTaxTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < withdrawTaxTires.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        require(_value >= 10 && _value <= 2000, \\\"_value: out of range\\\"); // [0.1%, 20%]\\n        withdrawTaxTires[_index] = _value;\\n    }\\n\\n    function getWithdrawFeePercent() public view returns (uint256) {\\n        if (poolStartTime > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 timePassed = block.timestamp - poolStartTime;\\n        uint256 taxPercent = 100;\\n        for (uint256 i = 0; i < stakingTires.length; i++) {\\n            if (timePassed <= stakingTires[i]) {\\n                taxPercent = withdrawTaxTires[i];\\n                break;\\n            }\\n        }\\n\\n        return taxPercent;\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accglcrPerShare).div(1e18).sub(\\n            user.rewardDebt\\n        );\\n        if (_pending > 0) {\\n            safeglcrTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n\\n            uint256 taxAmount = _amount.mul(getWithdrawFeePercent()).div(10000);\\n            if (enableTaxes && taxAmount != 0) {\\n                pool.token.safeTransfer(daoFund, taxAmount);\\n                pool.token.safeTransfer(_sender, _amount.sub(taxAmount));\\n            } else {\\n                pool.token.safeTransfer(_sender, _amount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accglcrPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        uint256 taxAmount = _amount.mul(getWithdrawFeePercent()).div(10000);\\n        pool.token.safeTransfer(daoFund, taxAmount);\\n        pool.token.safeTransfer(msg.sender, _amount.sub(taxAmount));\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe glcr transfer function, just in case if rounding error causes pool to not have enough glcrs.\\n    function safeglcrTransfer(address _to, uint256 _amount) internal {\\n        uint256 _glcrBal = glcr.balanceOf(address(this));\\n        if (_glcrBal > 0) {\\n            if (_amount > _glcrBal) {\\n                glcr.safeTransfer(_to, _glcrBal);\\n            } else {\\n                glcr.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setDaoFund(address _daoFund) external onlyOperator {\\n        daoFund = _daoFund;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (glcr or lps) if less than 90 days after pool ends\\n            require(IERC20(_token) != glcr, \\\"glcr\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(IERC20(_token) != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        IERC20(_token).transfer(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockWeth.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockWeth is ERC20 {\\n    constructor() public ERC20(\\\"Mock ETH\\\", \\\"WETH\\\") {\\n        _mint(msg.sender, 1000000 * 10**18);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockWcro.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockWcro is ERC20 {\\n    constructor() public ERC20(\\\"Mock CRO\\\", \\\"WCRO\\\") {\\n        _mint(msg.sender, 1000000 * 10**18);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockWbtc.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockWbtc is ERC20 {\\n    constructor() public ERC20(\\\"Mock BTC\\\", \\\"WBTC\\\") {\\n        _mint(msg.sender, 1000000 * 10**8);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 8;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockUsdt.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockUsdt is ERC20 {\\n    constructor() public ERC20(\\\"Mock USDT\\\", \\\"USDT\\\") {\\n        _mint(msg.sender, 1000000 * 10**6);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockUsdc.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockUsdc is ERC20 {\\n    constructor() public ERC20(\\\"Mock USDC\\\", \\\"USDC\\\") {\\n        _mint(msg.sender, 1000000 * 10**6);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockDai.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockDai is ERC20 {\\n    constructor() public ERC20(\\\"Mock DAI\\\", \\\"DAI\\\") {\\n        _mint(msg.sender, 1000000 * 10**18);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "731844fbde982aae7e9fee8cff5e5dbf",
      "transactionHash": "0xcf9c1f734f672b55a6a9d8f3d50864b86c49c0b3d170a09d26941b96c2501ea0",
      "args": [
        "snowcrystals.finance",
        "SNOW"
      ]
    },
    "decoded": {
      "from": "0x4750751212D9266CB03dd381145b10adb058dfA9",
      "gasPrice": "5000000000000",
      "gasLimit": "2001117",
      "to": null,
      "value": "0",
      "nonce": 1332,
      "data": "0x6080604052600d805460ff191690553480156200001b57600080fd5b506040516200251638038062002516833981810160405260408110156200004157600080fd5b81019080805160405193929190846401000000008211156200006257600080fd5b9083019060208201858111156200007857600080fd5b82516401000000008111828201881017156200009357600080fd5b82525081516020918201929091019080838360005b83811015620000c2578181015183820152602001620000a8565b50505050905090810190601f168015620000f05780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011457600080fd5b9083019060208201858111156200012a57600080fd5b82516401000000008111828201881017156200014557600080fd5b82525081516020918201929091019080838360005b83811015620001745781810151838201526020016200015a565b50505050905090810190601f168015620001a25780820380516001836020036101000a031916815260200191505b50604052505050818181818160039080519060200190620001c59291906200043d565b508051620001db9060049060208401906200043d565b50506005805460ff19166012179055506000620001f7620002c3565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000257620002c3565b600680546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a350620002bb905033683635c9adc5dea00000620002c7565b5050620004d9565b3390565b6001600160a01b03821662000323576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200033160008383620003d6565b6200034d81600254620003db60201b620014621790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200038091839062001462620003db821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000436576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048057805160ff1916838001178555620004b0565b82800160010185558215620004b0579182015b82811115620004b057825182559160200191906001019062000493565b50620004be929150620004c2565b5090565b5b80821115620004be5760008155600101620004c3565b61202d80620004e96000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c8063570ca7351161018657806395d89b41116100e3578063dd62ed3e11610097578063f2fde38b11610071578063f2fde38b1461072f578063f4fd47cf14610755578063fe46be4414610783576102d3565b8063dd62ed3e146106dc578063e1ea1fa31461070a578063f1b15c9414610727576102d3565b8063a457c2d7116100c8578063a457c2d71461067c578063a9059cbb146106a8578063d89135cd146106d4576102d3565b806395d89b411461066c5780639662676c14610674576102d3565b8063715018a61161013a57806379cc67901161011f57806379cc6790146106305780638da5cb5b1461065c5780638fa8173214610664576102d3565b8063715018a614610620578063771a3a1d14610628576102d3565b806364f53f2e1161016b57806364f53f2e146105ea578063678014b0146105f257806370a08231146105fa576102d3565b8063570ca735146105da57806361482bed146105e2576102d3565b806339509351116102345780634456eda2116101e85780634e20a02c116101cd5780634e20a02c146105945780635024ec1f1461059c57806354575af4146105a4576102d3565b80634456eda214610566578063483846401461056e576102d3565b80633f07d76a116102195780633f07d76a146104f757806340c10f191461051d57806342966c6814610549576102d3565b806339509351146104a75780633e5f13d4146104d3576102d3565b806323b872dd1161028b578063313ce56711610270578063313ce56714610462578063323440d11461048057806338d2776e14610488576102d3565b806323b872dd1461040657806329605e771461043c576102d3565b806318160ddd116102bc57806318160ddd146103955780631b9e2fad146103af578063232798df146103d5576102d3565b806306fdde03146102d8578063095ea7b314610355575b600080fd5b6102e06107ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103816004803603604081101561036b57600080fd5b506001600160a01b038135169060200135610860565b604080519115158252519081900360200190f35b61039d61087e565b60408051918252519081900360200190f35b610381600480360360208110156103c557600080fd5b50356001600160a01b0316610884565b610404600480360360408110156103eb57600080fd5b5080356001600160a01b0316906020013560ff166108e7565b005b6103816004803603606081101561041c57600080fd5b506001600160a01b03813581169160208101359091169060400135610974565b6104046004803603602081101561045257600080fd5b50356001600160a01b0316610aad565b61046a610b2d565b6040805160ff9092168252519081900360200190f35b61039d610b36565b6104046004803603602081101561049e57600080fd5b50351515610b43565b610381600480360360408110156104bd57600080fd5b506001600160a01b038135169060200135610b9f565b6104db610bf2565b604080516001600160a01b039092168252519081900360200190f35b6104046004803603602081101561050d57600080fd5b50356001600160a01b0316610c01565b6103816004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c79565b6104046004803603602081101561055f57600080fd5b5035610cf3565b610381610cfc565b6103816004803603602081101561058457600080fd5b50356001600160a01b0316610d22565b61039d610d2b565b61039d610d39565b610404600480360360608110156105ba57600080fd5b506001600160a01b03813581169160208101359160409091013516610d3f565b6104db610e10565b61039d610e1f565b61039d610e25565b61039d610e67565b61039d6004803603602081101561061057600080fd5b50356001600160a01b0316610e6d565b610404610e88565b61039d610f59565b6104046004803603604081101561064657600080fd5b506001600160a01b038135169060200135610f5f565b6104db610fb6565b61039d610fca565b6102e0610fd0565b610381611031565b6103816004803603604081101561069257600080fd5b506001600160a01b03813516906020013561103a565b610381600480360360408110156106be57600080fd5b506001600160a01b0381351690602001356110a2565b61039d6110b6565b61039d600480360360408110156106f257600080fd5b506001600160a01b03813581169160200135166110bc565b6104046004803603602081101561072057600080fd5b50356110e7565b61038161118c565b6104046004803603602081101561074557600080fd5b50356001600160a01b0316611195565b6104046004803603604081101561076b57600080fd5b506001600160a01b03813581169160200135166112c2565b6107a96004803603602081101561079957600080fd5b50356001600160a01b031661144d565b604051808260038111156107b957fe5b815260200191505060405180910390f35b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600061087461086d6114c3565b84846114c7565b5060015b92915050565b60025490565b600060015b6001600160a01b03831660009081526007602052604090205460ff1660038111156108b057fe5b1480610878575060036001600160a01b03831660009081526007602052604090205460ff1660038111156108e057fe5b1492915050565b600b546001600160a01b031633146109305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b8060ff16600381111561093f57fe5b6001600160a01b0383166000908152600760205260409020805460ff1916600183600381111561096b57fe5b02179055505050565b600061097f84610884565b158015610992575061099083610d22565b155b15610a9a5760006109a1610e25565b90508015610a9857600b54604080517f5803abaa0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301529151600093610a51931691635803abaa91604480830192602092919082900301818887803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b5051612710906115b3565b9050610a69612710610a638484611610565b90611669565b91506000610a7d612710610a638786611610565b9050610a8985826115b3565b9450610a9587826116d0565b50505b505b610aa5848484611783565b949350505050565b610ab56114c3565b6001600160a01b0316610ac6610fb6565b6001600160a01b031614610b21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b2a81611805565b50565b60055460ff1690565b683635c9adc5dea0000081565b600b546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b6008805460ff1916911515919091179055565b6000610874610bac6114c3565b84610bed8560016000610bbd6114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611462565b6114c7565b600b546001600160a01b031681565b6006546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610cc55760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b6000610cd084610e6d565b9050610cdc84846118af565b6000610ce785610e6d565b91909111949350505050565b610b2a8161199f565b6006546000906001600160a01b0316610d136114c3565b6001600160a01b031614905090565b60006002610889565b6905150ae84a8cdf00000081565b60095481565b6006546001600160a01b03163314610d885760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b5050505050565b6006546001600160a01b031690565b600a5481565b600954600c5560085460009060ff16151560011415610e6057610e466119b0565b610dac600a541115610e5957610dac600a555b600a54600c555b50600c5490565b61271081565b6001600160a01b031660009081526020819052604090205490565b610e906114c3565b6001600160a01b0316610ea1610fb6565b6001600160a01b031614610efc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600c5481565b6006546001600160a01b03163314610fa85760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b610fb28282611a2f565b5050565b60055461010090046001600160a01b031690565b610dac81565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108565780601f1061082b57610100808354040283529160200191610856565b600d5460ff1681565b60006108746110476114c3565b84610bed85604051806060016040528060258152602001611fd360259139600160006110716114c3565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611a89565b60006108746110af6114c3565b8484611b20565b600e5481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546001600160a01b031633146111305760405162461bcd60e51b8152600401808060200182810382526023815260200180611e886023913960400191505060405180910390fd5b610dac811115611187576040805162461bcd60e51b815260206004820152601d60248201527f4572726f723a204d61782074617820726174652065786365656465642e000000604482015290519081900360640190fd5b600955565b60085460ff1681565b61119d6114c3565b6001600160a01b03166111ae610fb6565b6001600160a01b031614611209576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661124e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e1a6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6006546001600160a01b0316331461130b5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f456024913960400191505060405180910390fd5b600d5460ff1615611363576040805162461bcd60e51b815260206004820152601f60248201527f4572726f723a2063616e206f6e6c792064697374726962757465206f6e636500604482015290519081900360640190fd5b6001600160a01b0382166113be576040805162461bcd60e51b815260206004820152600d60248201527f215f67656e65736973506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611419576040805162461bcd60e51b815260206004820152600b60248201527f215f64616f57616c6c6574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905561143a826905150ae84a8cdf0000006118af565b610fb281683635c9adc5dea000006118af565b60076020526000908152604090205460ff1681565b6000828201838110156114bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b03831661150c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611faf6024913960400191505060405180910390fd5b6001600160a01b0382166115515760405162461bcd60e51b8152600401808060200182810382526022815260200180611e406022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008282111561160a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261161f57506000610878565b8282028284828161162c57fe5b04146114bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ed86021913960400191505060405180910390fd5b60008082116116bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116c857fe5b049392505050565b600b546116e89083906001600160a01b0316836114c7565b600b546117009083906001600160a01b031683611783565b50600b54604080517fbfc770a80000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163bfc770a89160248082019260009290919082900301818387803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b505050505050565b6000611790848484611b20565b6117fb8461179c6114c3565b610bed85604051806060016040528060288152602001611ef9602891396001600160a01b038a166000908152600160205260408120906117da6114c3565b6001600160a01b031681526020810191909152604001600020549190611a89565b5060019392505050565b6001600160a01b03811661184a5760405162461bcd60e51b815260040180806020018281038252602d815260200180611eab602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03821661190a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61191660008383611a84565b6002546119239082611462565b6002556001600160a01b0382166000908152602081905260409020546119499082611462565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610b2a6119aa6114c3565b82611c7b565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d39abead6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600a55565b6000611a6682604051806060016040528060248152602001611f2160249139611a5f86611a5a6114c3565b6110bc565b9190611a89565b9050611a7a83611a746114c3565b836114c7565b611a848383611c7b565b505050565b60008184841115611b185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038316611b655760405162461bcd60e51b8152600401808060200182810382526025815260200180611f8a6025913960400191505060405180910390fd5b6001600160a01b038216611baa5760405162461bcd60e51b8152600401808060200182810382526023815260200180611dd56023913960400191505060405180910390fd5b611bb5838383611a84565b611bf281604051806060016040528060268152602001611e62602691396001600160a01b0386166000908152602081905260409020549190611a89565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611c219082611462565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c858282611cd8565b600e54611c929082611462565b600e556040805182815290516001600160a01b038416917f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa2919081900360200190a25050565b6001600160a01b038216611d1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f696021913960400191505060405180910390fd5b611d2982600083611a84565b611d6681604051806060016040528060228152602001611df8602291396001600160a01b0385166000908152602081905260409020549190611a89565b6001600160a01b038316600090815260208190526040902055600254611d8c90826115b3565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654572726f723a2043616c6c6572206973206e6f742074686520746178206f66666963656f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63656f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f7245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220458e7a72a15d3459227200b9e2b0574ffd68dcc2ff0a198b86adc3aba3df980d64736f6c634300060c0033000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000014736e6f776372797374616c732e66696e616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000004534e4f5700000000000000000000000000000000000000000000000000000000",
      "r": "0xa3e6c79f50723e4f42c1b81095e241bd5b47f458166c8c4908831a85d73f5c1d",
      "s": "0x203cb86a4b2e84bbe2793ce221e5e834871c25fbd73117e7eaa6eaad0692f1a9",
      "v": 711,
      "chainId": 338
    }
  }
}