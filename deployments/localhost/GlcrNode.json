{
  "address": "0x8A93d247134d91e0de6f96547cB0204e5BE8e5D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "CreateNode",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "allocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDev",
          "type": "address"
        }
      ],
      "name": "changeDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTreasuryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nodeTier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numNodes",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalancePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDayDripEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDistributionRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getNodes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNodes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isMaxPayout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDripTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReturnPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nodeId",
          "type": "uint256"
        }
      ],
      "name": "numNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setDripRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setLastDripTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setMaxReturnPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_nodes",
          "type": "uint256[]"
        }
      ],
      "name": "setNodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tierAllocPoints",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setTierValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total_deposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total_claims",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "last_distPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct GlcrNode.User",
          "name": "_user",
          "type": "tuple"
        }
      ],
      "name": "setUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributePoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIndices",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total_deposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_claims",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "last_distPoints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x46bc5db936f55d5e3c733c93b1cdd059dbd8df36ab85dc6731a091a98651c72d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A93d247134d91e0de6f96547cB0204e5BE8e5D8",
    "transactionIndex": 0,
    "gasUsed": "2535674",
    "logsBloom": "0x
    "blockHash": "0x889578fd9abb5cb5c611581de4c8b90ab6bfc0ddfc0e480abf168e23b80e2c8b",
    "transactionHash": "0x46bc5db936f55d5e3c733c93b1cdd059dbd8df36ab85dc6731a091a98651c72d",
    "logs": [],
    "blockNumber": 5279884,
    "cumulativeGasUsed": "2535674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1667715649,
    "0xeF4D6fb366CD65b270460C8603E919E45959674B"
  ],
  "numDeployments": 3,
  "solcInputHash": "73395350a0819fb65c5145526fa0b4d9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CreateNode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numNodes\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDayDripEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDistributionRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getNodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isMaxPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReturnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nodeId\",\"type\":\"uint256\"}],\"name\":\"numNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDripRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setLastDripTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxReturnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodes\",\"type\":\"uint256[]\"}],\"name\":\"setNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tierAllocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setTierValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct GlcrNode.User\",\"name\":\"_user\",\"type\":\"tuple\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIndices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GlcrNode.sol\":\"GlcrNode\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/GlcrNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\n\\ncontract GlcrNode {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public immutable TOKEN;\\n    uint256[] public tierAllocPoints = [1 ether, 1 ether, 1 ether];\\n    uint256[] public tierAmounts = [0.00002 ether, 1 ether, 1 ether];\\n    struct User {\\n        uint256 total_deposits;\\n        uint256 total_claims;\\n        uint256 last_distPoints;\\n    }\\n\\n    event CreateNode(uint256 timestamp, address account, uint256 num);\\n\\n    address private dev;\\n\\n    mapping(address => User) public users;\\n    mapping(address => mapping(uint256 => uint256)) public nodes;\\n    mapping(uint256 => uint256) public totalNodes;\\n    address[] public userIndices;\\n\\n    uint256 public total_deposited;\\n    uint256 public total_claimed;\\n    uint256 public total_rewards;\\n    uint256 public treasury_rewards;\\n    uint256 public treasuryFeePercent;\\n    uint256 public totalDistributeRewards;\\n    uint256 public totalDistributePoints;\\n    uint256 public maxReturnPercent;\\n    uint256 public dripRate;\\n    uint256 public lastDripTime;\\n    uint256 public startTime;\\n    bool public enabled;\\n    uint256 public constant MULTIPLIER = 10e18;\\n\\n    constructor(uint256 _startTime, address _token) public {\\n        maxReturnPercent = 500;\\n        dripRate = 2100000;\\n        treasuryFeePercent = 25;\\n\\n        lastDripTime = _startTime > block.timestamp\\n            ? _startTime\\n            : block.timestamp;\\n        startTime = _startTime;\\n        enabled = true;\\n        TOKEN = IERC20(_token);\\n        dev = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Do not send CRO.\\\");\\n    }\\n\\n    modifier onlyDev() {\\n        require(msg.sender == dev, \\\"Caller is not the dev!\\\");\\n        _;\\n    }\\n\\n    function changeDev(address payable newDev) external onlyDev {\\n        require(newDev != address(0), \\\"Zero address\\\");\\n        dev = newDev;\\n    }\\n\\n    function claimTreasuryRewards() external {\\n        if (treasury_rewards > 0) {\\n            TOKEN.safeTransfer(dev, treasury_rewards);\\n            treasury_rewards = 0;\\n        }\\n    }\\n\\n    function setStartTime(uint256 _startTime) external onlyDev {\\n        startTime = _startTime;\\n    }\\n\\n    function setEnabled(bool _enabled) external onlyDev {\\n        enabled = _enabled;\\n    }\\n\\n    function setTreasuryFeePercent(uint256 percent) external onlyDev {\\n        treasuryFeePercent = percent;\\n    }\\n\\n    function setDripRate(uint256 rate) external onlyDev {\\n        dripRate = rate;\\n    }\\n\\n    function setLastDripTime(uint256 timestamp) external onlyDev {\\n        lastDripTime = timestamp;\\n    }\\n\\n    function setMaxReturnPercent(uint256 percent) external onlyDev {\\n        maxReturnPercent = percent;\\n    }\\n\\n    function setTierValues(\\n        uint256[] memory _tierAllocPoints,\\n        uint256[] memory _tierAmounts\\n    ) external onlyDev {\\n        require(\\n            _tierAllocPoints.length == _tierAmounts.length,\\n            \\\"Length mismatch\\\"\\n        );\\n        tierAllocPoints = _tierAllocPoints;\\n        tierAmounts = _tierAmounts;\\n    }\\n\\n    function setUser(address _addr, User memory _user) external onlyDev {\\n        total_deposited = total_deposited.sub(users[_addr].total_deposits).add(\\n            _user.total_deposits\\n        );\\n        total_claimed = total_claimed.sub(users[_addr].total_claims).add(\\n            _user.total_claims\\n        );\\n        users[_addr].total_deposits = _user.total_deposits;\\n        users[_addr].total_claims = _user.total_claims;\\n    }\\n\\n    function setNodes(address _user, uint256[] memory _nodes) external onlyDev {\\n        for (uint256 i = 0; i < _nodes.length; i++) {\\n            totalNodes[i] = totalNodes[i].sub(nodes[_user][i]).add(_nodes[i]);\\n            nodes[_user][i] = _nodes[i];\\n        }\\n    }\\n\\n    function totalAllocPoints() public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(totalNodes[i]));\\n        }\\n        return total;\\n    }\\n\\n    function allocPoints(address account) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            total = total.add(tierAllocPoints[i].mul(nodes[account][i]));\\n        }\\n        return total;\\n    }\\n\\n    function getDistributionRewards(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (isMaxPayout(account)) return 0;\\n\\n        uint256 newDividendPoints = totalDistributePoints.sub(\\n            users[account].last_distPoints\\n        );\\n        uint256 distribute = allocPoints(account).mul(newDividendPoints).div(\\n            MULTIPLIER\\n        );\\n        return distribute > total_rewards ? total_rewards : distribute;\\n    }\\n\\n    function getTotalRewards(address _sender) public view returns (uint256) {\\n        if (users[_sender].total_deposits == 0) return 0;\\n\\n        uint256 rewards = getDistributionRewards(_sender).add(\\n            getRewardDrip().mul(allocPoints(_sender)).div(totalAllocPoints())\\n        );\\n        uint256 totalClaims = users[_sender].total_claims;\\n        uint256 maxPay = maxPayout(_sender);\\n\\n        // Payout remaining if exceeds max payout\\n        return\\n            totalClaims.add(rewards) > maxPay\\n                ? maxPay.sub(totalClaims)\\n                : rewards;\\n    }\\n\\n    function create(uint256 nodeTier, uint256 numNodes) external {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        claim();\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function claim() public {\\n        dripRewards();\\n\\n        address _sender = msg.sender;\\n        uint256 _rewards = getDistributionRewards(_sender);\\n\\n        if (_rewards > 0) {\\n            total_rewards = total_rewards.sub(_rewards);\\n            uint256 totalClaims = users[_sender].total_claims;\\n            uint256 maxPay = maxPayout(_sender);\\n\\n            // Payout remaining if exceeds max payout\\n            if (totalClaims.add(_rewards) > maxPay) {\\n                _rewards = maxPay.sub(totalClaims);\\n            }\\n\\n            users[_sender].total_claims = users[_sender].total_claims.add(\\n                _rewards\\n            );\\n            total_claimed = total_claimed.add(_rewards);\\n\\n            IERC20(TOKEN).safeTransfer(_sender, _rewards);\\n\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n    }\\n\\n    function _compound(uint256 nodeTier, uint256 numNodes) internal {\\n        address _sender = msg.sender;\\n        require(enabled && block.timestamp >= startTime, \\\"Disabled\\\");\\n        require(\\n            nodeTier < tierAllocPoints.length && nodeTier < tierAmounts.length,\\n            \\\"Invalid nodeTier\\\"\\n        );\\n\\n        if (users[_sender].total_deposits == 0) {\\n            userIndices.push(_sender); // New user\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n        if (users[_sender].total_deposits != 0 && isMaxPayout(_sender)) {\\n            users[_sender].last_distPoints = totalDistributePoints;\\n        }\\n\\n        uint256 tierPrice = tierAmounts[nodeTier].mul(numNodes);\\n\\n        require(TOKEN.balanceOf(_sender) >= tierPrice, \\\"Insufficient balance\\\");\\n        require(\\n            TOKEN.allowance(_sender, address(this)) >= tierPrice,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        TOKEN.safeTransferFrom(_sender, address(this), tierPrice);\\n\\n        users[_sender].total_deposits = users[_sender].total_deposits.add(\\n            tierPrice\\n        );\\n\\n        total_deposited = total_deposited.add(tierPrice);\\n        treasury_rewards = treasury_rewards.add(\\n            tierPrice.mul(treasuryFeePercent).div(100)\\n        );\\n\\n        nodes[_sender][nodeTier] = nodes[_sender][nodeTier].add(numNodes);\\n        totalNodes[nodeTier] = totalNodes[nodeTier].add(numNodes);\\n\\n        emit CreateNode(block.timestamp, _sender, numNodes);\\n    }\\n\\n    function compound() public {\\n        uint256 rewardsPending = getTotalRewards(msg.sender);\\n        require(rewardsPending >= tierAmounts[0], \\\"Not enough to compound\\\");\\n        uint256 numPossible = rewardsPending.div(tierAmounts[0]);\\n        claim();\\n        _compound(0, numPossible);\\n    }\\n\\n    function maxPayout(address _sender) public view returns (uint256) {\\n        return users[_sender].total_deposits.mul(maxReturnPercent).div(100);\\n    }\\n\\n    function isMaxPayout(address _sender) public view returns (bool) {\\n        return users[_sender].total_claims >= maxPayout(_sender);\\n    }\\n\\n    function _disperse(uint256 amount) internal {\\n        if (amount > 0) {\\n            totalDistributePoints = totalDistributePoints.add(\\n                amount.mul(MULTIPLIER).div(totalAllocPoints())\\n            );\\n            totalDistributeRewards = totalDistributeRewards.add(amount);\\n            total_rewards = total_rewards.add(amount);\\n        }\\n    }\\n\\n    function dripRewards() public {\\n        uint256 drip = getRewardDrip();\\n\\n        if (drip > 0) {\\n            _disperse(drip);\\n            lastDripTime = block.timestamp;\\n        }\\n    }\\n\\n    function getRewardDrip() public view returns (uint256) {\\n        if (lastDripTime < block.timestamp) {\\n            uint256 poolBalance = getBalancePool();\\n            uint256 secondsPassed = block.timestamp.sub(lastDripTime);\\n            uint256 drip = secondsPassed.mul(poolBalance).div(dripRate);\\n\\n            if (drip > poolBalance) {\\n                drip = poolBalance;\\n            }\\n\\n            return drip;\\n        }\\n        return 0;\\n    }\\n\\n    function getDayDripEstimate(address _user) external view returns (uint256) {\\n        return\\n            allocPoints(_user) > 0 && !isMaxPayout(_user)\\n                ? getBalancePool()\\n                    .mul(86400)\\n                    .mul(allocPoints(_user))\\n                    .div(totalAllocPoints())\\n                    .div(dripRate)\\n                : 0;\\n    }\\n\\n    function total_users() external view returns (uint256) {\\n        return userIndices.length;\\n    }\\n\\n    function numNodes(address _sender, uint256 _nodeId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return nodes[_sender][_nodeId];\\n    }\\n\\n    function getNodes(address _sender)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory userNodes = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            userNodes[i] = userNodes[i].add(nodes[_sender][i]);\\n        }\\n        return userNodes;\\n    }\\n\\n    function getTotalNodes() external view returns (uint256[] memory) {\\n        uint256[] memory totals = new uint256[](tierAllocPoints.length);\\n        for (uint256 i = 0; i < tierAllocPoints.length; i++) {\\n            totals[i] = totals[i].add(totalNodes[i]);\\n        }\\n        return totals;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return IERC20(TOKEN).balanceOf(address(this));\\n    }\\n\\n    function getBalancePool() public view returns (uint256) {\\n        return getBalance().sub(total_rewards).sub(treasury_rewards);\\n    }\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyDev {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x439fc8d32fda2b4a7aac17cfc284168488c2c52398efa981dd604d954ed0396e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052670de0b6b3a764000060a081815260c082905260e0919091526200002e906000906003620000fe565b50604080516060810182526512309ce540008152670de0b6b3a7640000602082018190529181019190915262000069906001906003620000fe565b503480156200007757600080fd5b50604051620028c5380380620028c58339810160408190526200009a9162000170565b6101f4600e5562200b20600f556019600b55428211620000bb5742620000bd565b815b6010556011919091556012805460ff191660011790556001600160601b031960609190911b16608052600280546001600160a01b03191633179055620001ad565b82805482825590600052602060002090810192821562000147579160200282015b828111156200014757825182906001600160401b03169055916020019190600101906200011f565b506200015592915062000159565b5090565b5b808211156200015557600081556001016200015a565b6000806040838503121562000183578182fd5b825160208401519092506001600160a01b0381168114620001a2578182fd5b809150509250929050565b60805160601c6126dc620001e9600039806109065280610971528061100352806113c5528061161c528061170652806117b852506126dc6000f3fe60806040526004361061032d5760003560e01c80635b2f3c8e116101a55780639f7b4579116100ec578063d326159211610095578063e7cc62bd1161006f578063e7cc62bd1461088a578063f65f4eaf1461089f578063f69e2046146108b4578063fba1f7b0146108c957610353565b8063d326159214610840578063de560cca14610855578063e300e98b1461086a57610353565b8063adf1b67e116100c6578063adf1b67e146107eb578063bcb116391461080b578063c7ce95601461082b57610353565b80639f7b457914610787578063a87430ba146107a7578063ab4e2785146107d657610353565b80636af904c61161014e57806382bfefc81161012857806382bfefc81461073257806388a8c95c1461074757806394ac42cc1461076757610353565b80636af904c6146106f3578063740c8af71461070857806378e979251461071d57610353565b80635fbb48dc1161017f5780635fbb48dc1461069e57806363584ecd146106be578063648acb09146106d357610353565b80635b2f3c8e146106545780635c75dcbc146106695780635fb11d7e1461067e57610353565b80632ae2707111610274578063486af96a1161021d5780635083f17b116101f75780635083f17b146105df578063551512de146105ff57806356e1221c1461061f5780635b0d2d8c1461063f57610353565b8063486af96a146105885780634b3dd5b5146105b55780634e71d92d146105ca57610353565b806335771fe01161024e57806335771fe0146105285780633e0a322d1461054857806344886d701461056857610353565b80632ae27071146104c85780632bcf161c146104e8578063328d8f721461050857610353565b80631fa36cbe116102d6578063238dafe0116102b0578063238dafe0146104665780632702dfe714610488578063277e5316146104a857610353565b80631fa36cbe14610404578063211aea02146104195780632365d7bc1461044657610353565b806312065fe01161030757806312065fe0146103af5780631d1c7b4e146103c45780631ed5c6c2146103e457610353565b8063059f8b161461035857806305c4744b1461038357806305d6bbf41461039a57610353565b366103535760405162461bcd60e51b815260040161034a9061235a565b60405180910390fd5b600080fd5b34801561036457600080fd5b5061036d6108de565b60405161037a91906125f2565b60405180910390f35b34801561038f57600080fd5b506103986108ea565b005b3480156103a657600080fd5b5061036d610938565b3480156103bb57600080fd5b5061036d61093e565b3480156103d057600080fd5b5061036d6103df3660046120b6565b6109fc565b3480156103f057600080fd5b506103986103ff3660046120b6565b610a0e565b34801561041057600080fd5b5061036d610a3d565b34801561042557600080fd5b506104396104343660046120b6565b610aa0565b60405161037a9190612123565b34801561045257600080fd5b5061036d6104613660046120b6565b610ac7565b34801561047257600080fd5b5061047b610ae5565b60405161037a91906121d2565b34801561049457600080fd5b506103986104a3366004611f59565b610aee565b3480156104b457600080fd5b5061036d6104c3366004611eef565b610bb1565b3480156104d457600080fd5b506103986104e3366004612027565b610c39565b3480156104f457600080fd5b5061036d610503366004611eef565b610cb0565b34801561051457600080fd5b5061039861052336600461207e565b610d55565b34801561053457600080fd5b5061036d6105433660046120b6565b610d92565b34801561055457600080fd5b506103986105633660046120b6565b610d9f565b34801561057457600080fd5b5061047b610583366004611eef565b610dce565b34801561059457600080fd5b506105a86105a3366004611eef565b610dfe565b60405161037a919061218e565b3480156105c157600080fd5b5061036d610ec9565b3480156105d657600080fd5b50610398610f32565b3480156105eb57600080fd5b506103986105fa366004611f0b565b611050565b34801561060b57600080fd5b5061039861061a366004611fe6565b61112a565b34801561062b57600080fd5b5061039861063a3660046120b6565b6111f3565b34801561064b57600080fd5b5061036d611222565b34801561066057600080fd5b5061039861123e565b34801561067557600080fd5b5061036d611261565b34801561068a57600080fd5b5061036d610699366004611eef565b611267565b3480156106aa57600080fd5b506103986106b93660046120b6565b6112b9565b3480156106ca57600080fd5b506105a86112e8565b3480156106df57600080fd5b506103986106ee3660046120b6565b611382565b3480156106ff57600080fd5b5061036d6113b1565b34801561071457600080fd5b5061036d6113b7565b34801561072957600080fd5b5061036d6113bd565b34801561073e57600080fd5b506104396113c3565b34801561075357600080fd5b50610398610762366004611eef565b6113e7565b34801561077357600080fd5b5061036d610782366004611eef565b611466565b34801561079357600080fd5b506103986107a23660046120e6565b6114c2565b3480156107b357600080fd5b506107c76107c2366004611eef565b61190a565b60405161037a9392919061261a565b3480156107e257600080fd5b5061036d61192b565b3480156107f757600080fd5b5061036d610806366004611fbb565b611931565b34801561081757600080fd5b5061036d610826366004611fbb565b61194e565b34801561083757600080fd5b5061036d611976565b34801561084c57600080fd5b5061036d61197c565b34801561086157600080fd5b5061036d611982565b34801561087657600080fd5b5061036d610885366004611eef565b611988565b34801561089657600080fd5b5061036d6119b7565b3480156108ab57600080fd5b5061036d6119bd565b3480156108c057600080fd5b506103986119c3565b3480156108d557600080fd5b5061036d611a4a565b678ac7230489e8000081565b600a541561093657600254600a54610930916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690611a50565b6000600a555b565b60095481565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109a6903090600401612123565b60206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906120ce565b90505b90565b60056020526000908152604090205481565b6002546001600160a01b03163314610a385760405162461bcd60e51b815260040161034a90612210565b601055565b600080805b600054811015610a9a576000818152600560205260408120548154610a9092610a89929185908110610a7057fe5b9060005260206000200154611ad390919063ffffffff16565b8390611b14565b9150600101610a42565b50905090565b60068181548110610aad57fe5b6000918252602090912001546001600160a01b0316905081565b60008181548110610ad457fe5b600091825260209091200154905081565b60125460ff1681565b6002546001600160a01b03163314610b185760405162461bcd60e51b815260040161034a90612210565b80516001600160a01b038316600090815260036020526040902054600754610b4b9291610b459190611b39565b90611b14565b6007556020808201516001600160a01b03841660009081526003909252604090912060010154600854610b839291610b459190611b39565b60085580516001600160a01b0390921660009081526003602090815260409091209283550151600190910155565b6000610bbc82610dce565b15610bc957506000610c34565b6001600160a01b038216600090815260036020526040812060020154600d54610bf191611b39565b90506000610c1a678ac7230489e80000610c1484610c0e88611267565b90611ad3565b90611b61565b90506009548111610c2b5780610c2f565b6009545b925050505b919050565b6002546001600160a01b03163314610c635760405162461bcd60e51b815260040161034a90612210565b8051825114610c845760405162461bcd60e51b815260040161034a906124f0565b8151610c97906000906020850190611e0f565b508051610cab906001906020840190611e0f565b505050565b6001600160a01b038116600090815260036020526040812054610cd557506000610c34565b6000610d02610cf9610ce5610a3d565b610c14610cf187611267565b610c0e610ec9565b610b4585610bb1565b6001600160a01b038416600090815260036020526040812060010154919250610d2a85611988565b905080610d378385611b14565b11610d425782610d4c565b610d4c8183611b39565b95945050505050565b6002546001600160a01b03163314610d7f5760405162461bcd60e51b815260040161034a90612210565b6012805460ff1916911515919091179055565b60018181548110610ad457fe5b6002546001600160a01b03163314610dc95760405162461bcd60e51b815260040161034a90612210565b601155565b6000610dd982611988565b6001600160a01b03831660009081526003602052604090206001015410159050919050565b600054606090819067ffffffffffffffff81118015610e1c57600080fd5b50604051908082528060200260200182016040528015610e46578160200160208202803683370190505b50905060005b600054811015610ec2576001600160a01b03841660009081526004602090815260408083208484529091529020548251610ea39190849084908110610e8d57fe5b6020026020010151611b1490919063ffffffff16565b828281518110610eaf57fe5b6020908102919091010152600101610e4c565b5092915050565b6000426010541015610f2c576000610edf611222565b90506000610ef860105442611b3990919063ffffffff16565b90506000610f15600f54610c148585611ad390919063ffffffff16565b905082811115610f225750815b92506109f9915050565b50600090565b610f3a61123e565b336000610f4682610bb1565b9050801561104c57600954610f5b9082611b39565b6009556001600160a01b03821660009081526003602052604081206001015490610f8484611988565b905080610f918385611b14565b1115610fa457610fa18183611b39565b92505b6001600160a01b038416600090815260036020526040902060010154610fca9084611b14565b6001600160a01b038516600090815260036020526040902060010155600854610ff39084611b14565b60085561102a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611a50565b5050600d546001600160a01b0383166000908152600360205260409020600201555b5050565b6002546001600160a01b0316331461107a5760405162461bcd60e51b815260040161034a90612210565b60005b8151811015610cab576110d682828151811061109557fe5b6020908102919091018101516001600160a01b038616600090815260048352604080822086835284528082205460059094529020549091610b459190611b39565b60008281526005602052604090205581518290829081106110f357fe5b6020908102919091018101516001600160a01b0385166000908152600483526040808220858352909352919091205560010161107d565b6002546001600160a01b031633146111545760405162461bcd60e51b815260040161034a90612210565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a9059cbb9061119b9084908690600401612175565b602060405180830381600087803b1580156111b557600080fd5b505af11580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed919061209a565b50505050565b6002546001600160a01b0316331461121d5760405162461bcd60e51b815260040161034a90612210565b600b55565b60006109f6600a5461123860095461123861093e565b90611b39565b6000611248610ec9565b9050801561125e5761125981611b93565b426010555b50565b600b5481565b600080805b600054811015610ec2576001600160a01b038416600090815260046020908152604080832084845290915281205481546112af92610a89929185908110610a7057fe5b915060010161126c565b6002546001600160a01b031633146112e35760405162461bcd60e51b815260040161034a90612210565b600f55565b600054606090819067ffffffffffffffff8111801561130657600080fd5b50604051908082528060200260200182016040528015611330578160200160208202803683370190505b50905060005b600054811015610a9a576113636005600083815260200190815260200160002054838381518110610e8d57fe5b82828151811061136f57fe5b6020908102919091010152600101611336565b6002546001600160a01b031633146113ac5760405162461bcd60e51b815260040161034a90612210565b600e55565b60085481565b600e5481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031633146114115760405162461bcd60e51b815260040161034a90612210565b6001600160a01b0381166114375760405162461bcd60e51b815260040161034a90612391565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008061147283611267565b118015611485575061148382610dce565b155b6114905760006114bc565b6114bc600f54610c146114a1610a3d565b610c146114ad87611267565b610c0e62015180610c0e611222565b92915050565b601254339060ff1680156114d857506011544210155b6114f45760405162461bcd60e51b815260040161034a9061255e565b60005483108015611506575060015483105b6115225760405162461bcd60e51b815260040161034a9061245c565b61152a610f32565b6001600160a01b0381166000908152600360205260409020546115b45760068054600181019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155600d54600091825260036020526040909120600201555b6001600160a01b038116600090815260036020526040902054158015906115df57506115df81610dce565b1561160457600d546001600160a01b0382166000908152600360205260409020600201555b60006116178360018681548110610a7057fe5b9050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016116669190612123565b60206040518083038186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b691906120ce565b10156116d45760405162461bcd60e51b815260040161034a906122ec565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815281906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9061173d9086903090600401612137565b60206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906120ce565b10156117ab5760405162461bcd60e51b815260040161034a906122b5565b6117e06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016833084611be8565b6001600160a01b0382166000908152600360205260409020546118039082611b14565b6001600160a01b0383166000908152600360205260409020556007546118299082611b14565b600755600b5461184e9061184590606490610c14908590611ad3565b600a5490611b14565b600a556001600160a01b038216600090815260046020908152604080832087845290915290205461187f9084611b14565b6001600160a01b03831660009081526004602090815260408083208884528252808320939093556005905220546118b69084611b14565b6000858152600560205260409081902091909155517fddc82401ab579d868e816af720a563cdf9f9d0350abb3fa3266bcf33dd4f48ab906118fc904290859087906125fb565b60405180910390a150505050565b60036020526000908152604090208054600182015460029092015490919083565b600a5481565b600460209081526000928352604080842090915290825290205481565b6001600160a01b03919091166000908152600460209081526040808320938352929052205490565b600d5481565b600f5481565b60075481565b600e546001600160a01b03821660009081526003602052604081205490916114bc91606491610c149190611ad3565b60065490565b600c5481565b60006119ce33610cb0565b905060016000815481106119de57fe5b9060005260206000200154811015611a085760405162461bcd60e51b815260040161034a90612247565b6000611a356001600081548110611a1b57fe5b906000526020600020015483611b6190919063ffffffff16565b9050611a3f610f32565b61104c600082611c09565b60105481565b610cab8363a9059cbb60e01b8484604051602401611a6f929190612175565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611c69565b600082611ae2575060006114bc565b82820282848281611aef57fe5b0414611b0d5760405162461bcd60e51b815260040161034a90612493565b9392505050565b600082820183811015611b0d5760405162461bcd60e51b815260040161034a9061227e565b600082821115611b5b5760405162461bcd60e51b815260040161034a90612323565b50900390565b6000808211611b825760405162461bcd60e51b815260040161034a90612425565b818381611b8b57fe5b049392505050565b801561125e57611bc2611bb9611ba7610a3d565b610c1484678ac7230489e80000611ad3565b600d5490611b14565b600d55600c54611bd29082611b14565b600c55600954611be29082611b14565b60095550565b6111ed846323b872dd60e01b858585604051602401611a6f93929190612151565b601254339060ff168015611c1f57506011544210155b611c3b5760405162461bcd60e51b815260040161034a9061255e565b60005483108015611c4d575060015483105b61152a5760405162461bcd60e51b815260040161034a9061245c565b6060611cbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611cf89092919063ffffffff16565b805190915015610cab5780806020019051810190611cdc919061209a565b610cab5760405162461bcd60e51b815260040161034a90612595565b6060611d078484600085611d0f565b949350505050565b606082471015611d315760405162461bcd60e51b815260040161034a906123c8565b611d3a85611dd0565b611d565760405162461bcd60e51b815260040161034a90612527565b60006060866001600160a01b03168587604051611d739190612107565b60006040518083038185875af1925050503d8060008114611db0576040519150601f19603f3d011682016040523d82523d6000602084013e611db5565b606091505b5091509150611dc5828286611dd6565b979650505050505050565b3b151590565b60608315611de5575081611b0d565b825115611df55782518084602001fd5b8160405162461bcd60e51b815260040161034a91906121dd565b828054828255906000526020600020908101928215611e4a579160200282015b82811115611e4a578251825591602001919060010190611e2f565b50611e56929150611e5a565b5090565b5b80821115611e565760008155600101611e5b565b600082601f830112611e7f578081fd5b813567ffffffffffffffff811115611e95578182fd5b6020808202611ea5828201612630565b83815293508184018583018287018401881015611ec157600080fd5b600092505b84831015611ee4578035825260019290920191908301908301611ec6565b505050505092915050565b600060208284031215611f00578081fd5b8135611b0d81612683565b60008060408385031215611f1d578081fd5b8235611f2881612683565b9150602083013567ffffffffffffffff811115611f43578182fd5b611f4f85828601611e6f565b9150509250929050565b6000808284036080811215611f6c578283fd5b8335611f7781612683565b92506060601f1982011215611f8a578182fd5b50611f956060612630565b602084013581526040840135602082015260608401356040820152809150509250929050565b60008060408385031215611fcd578182fd5b8235611fd881612683565b946020939093013593505050565b600080600060608486031215611ffa578081fd5b833561200581612683565b925060208401359150604084013561201c81612683565b809150509250925092565b60008060408385031215612039578182fd5b823567ffffffffffffffff80821115612050578384fd5b61205c86838701611e6f565b93506020850135915080821115612071578283fd5b50611f4f85828601611e6f565b60006020828403121561208f578081fd5b8135611b0d81612698565b6000602082840312156120ab578081fd5b8151611b0d81612698565b6000602082840312156120c7578081fd5b5035919050565b6000602082840312156120df578081fd5b5051919050565b600080604083850312156120f8578182fd5b50508035926020909101359150565b60008251612119818460208701612657565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156121c6578351835292840192918401916001016121aa565b50909695505050505050565b901515815260200190565b60006020825282518060208401526121fc816040850160208701612657565b601f01601f19169190910160400192915050565b60208082526016908201527f43616c6c6572206973206e6f7420746865206465762100000000000000000000604082015260600190565b60208082526016908201527f4e6f7420656e6f75676820746f20636f6d706f756e6400000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604082015260600190565b60208082526014908201527f496e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526010908201527f446f206e6f742073656e642043524f2e00000000000000000000000000000000604082015260600190565b6020808252600c908201527f5a65726f20616464726573730000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f496e76616c6964206e6f64655469657200000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f4c656e677468206d69736d617463680000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526008908201527f44697361626c6564000000000000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526001600160a01b03919091166020830152604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561264f57600080fd5b604052919050565b60005b8381101561267257818101518382015260200161265a565b838111156111ed5750506000910152565b6001600160a01b038116811461125e57600080fd5b801515811461125e57600080fdfea264697066735822122023077e4ec848b0d3a2b0aa5e302a32cd09363bde8297d03b0bbfff525d076e5864736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061032d5760003560e01c80635b2f3c8e116101a55780639f7b4579116100ec578063d326159211610095578063e7cc62bd1161006f578063e7cc62bd1461088a578063f65f4eaf1461089f578063f69e2046146108b4578063fba1f7b0146108c957610353565b8063d326159214610840578063de560cca14610855578063e300e98b1461086a57610353565b8063adf1b67e116100c6578063adf1b67e146107eb578063bcb116391461080b578063c7ce95601461082b57610353565b80639f7b457914610787578063a87430ba146107a7578063ab4e2785146107d657610353565b80636af904c61161014e57806382bfefc81161012857806382bfefc81461073257806388a8c95c1461074757806394ac42cc1461076757610353565b80636af904c6146106f3578063740c8af71461070857806378e979251461071d57610353565b80635fbb48dc1161017f5780635fbb48dc1461069e57806363584ecd146106be578063648acb09146106d357610353565b80635b2f3c8e146106545780635c75dcbc146106695780635fb11d7e1461067e57610353565b80632ae2707111610274578063486af96a1161021d5780635083f17b116101f75780635083f17b146105df578063551512de146105ff57806356e1221c1461061f5780635b0d2d8c1461063f57610353565b8063486af96a146105885780634b3dd5b5146105b55780634e71d92d146105ca57610353565b806335771fe01161024e57806335771fe0146105285780633e0a322d1461054857806344886d701461056857610353565b80632ae27071146104c85780632bcf161c146104e8578063328d8f721461050857610353565b80631fa36cbe116102d6578063238dafe0116102b0578063238dafe0146104665780632702dfe714610488578063277e5316146104a857610353565b80631fa36cbe14610404578063211aea02146104195780632365d7bc1461044657610353565b806312065fe01161030757806312065fe0146103af5780631d1c7b4e146103c45780631ed5c6c2146103e457610353565b8063059f8b161461035857806305c4744b1461038357806305d6bbf41461039a57610353565b366103535760405162461bcd60e51b815260040161034a9061235a565b60405180910390fd5b600080fd5b34801561036457600080fd5b5061036d6108de565b60405161037a91906125f2565b60405180910390f35b34801561038f57600080fd5b506103986108ea565b005b3480156103a657600080fd5b5061036d610938565b3480156103bb57600080fd5b5061036d61093e565b3480156103d057600080fd5b5061036d6103df3660046120b6565b6109fc565b3480156103f057600080fd5b506103986103ff3660046120b6565b610a0e565b34801561041057600080fd5b5061036d610a3d565b34801561042557600080fd5b506104396104343660046120b6565b610aa0565b60405161037a9190612123565b34801561045257600080fd5b5061036d6104613660046120b6565b610ac7565b34801561047257600080fd5b5061047b610ae5565b60405161037a91906121d2565b34801561049457600080fd5b506103986104a3366004611f59565b610aee565b3480156104b457600080fd5b5061036d6104c3366004611eef565b610bb1565b3480156104d457600080fd5b506103986104e3366004612027565b610c39565b3480156104f457600080fd5b5061036d610503366004611eef565b610cb0565b34801561051457600080fd5b5061039861052336600461207e565b610d55565b34801561053457600080fd5b5061036d6105433660046120b6565b610d92565b34801561055457600080fd5b506103986105633660046120b6565b610d9f565b34801561057457600080fd5b5061047b610583366004611eef565b610dce565b34801561059457600080fd5b506105a86105a3366004611eef565b610dfe565b60405161037a919061218e565b3480156105c157600080fd5b5061036d610ec9565b3480156105d657600080fd5b50610398610f32565b3480156105eb57600080fd5b506103986105fa366004611f0b565b611050565b34801561060b57600080fd5b5061039861061a366004611fe6565b61112a565b34801561062b57600080fd5b5061039861063a3660046120b6565b6111f3565b34801561064b57600080fd5b5061036d611222565b34801561066057600080fd5b5061039861123e565b34801561067557600080fd5b5061036d611261565b34801561068a57600080fd5b5061036d610699366004611eef565b611267565b3480156106aa57600080fd5b506103986106b93660046120b6565b6112b9565b3480156106ca57600080fd5b506105a86112e8565b3480156106df57600080fd5b506103986106ee3660046120b6565b611382565b3480156106ff57600080fd5b5061036d6113b1565b34801561071457600080fd5b5061036d6113b7565b34801561072957600080fd5b5061036d6113bd565b34801561073e57600080fd5b506104396113c3565b34801561075357600080fd5b50610398610762366004611eef565b6113e7565b34801561077357600080fd5b5061036d610782366004611eef565b611466565b34801561079357600080fd5b506103986107a23660046120e6565b6114c2565b3480156107b357600080fd5b506107c76107c2366004611eef565b61190a565b60405161037a9392919061261a565b3480156107e257600080fd5b5061036d61192b565b3480156107f757600080fd5b5061036d610806366004611fbb565b611931565b34801561081757600080fd5b5061036d610826366004611fbb565b61194e565b34801561083757600080fd5b5061036d611976565b34801561084c57600080fd5b5061036d61197c565b34801561086157600080fd5b5061036d611982565b34801561087657600080fd5b5061036d610885366004611eef565b611988565b34801561089657600080fd5b5061036d6119b7565b3480156108ab57600080fd5b5061036d6119bd565b3480156108c057600080fd5b506103986119c3565b3480156108d557600080fd5b5061036d611a4a565b678ac7230489e8000081565b600a541561093657600254600a54610930916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690611a50565b6000600a555b565b60095481565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109a6903090600401612123565b60206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906120ce565b90505b90565b60056020526000908152604090205481565b6002546001600160a01b03163314610a385760405162461bcd60e51b815260040161034a90612210565b601055565b600080805b600054811015610a9a576000818152600560205260408120548154610a9092610a89929185908110610a7057fe5b9060005260206000200154611ad390919063ffffffff16565b8390611b14565b9150600101610a42565b50905090565b60068181548110610aad57fe5b6000918252602090912001546001600160a01b0316905081565b60008181548110610ad457fe5b600091825260209091200154905081565b60125460ff1681565b6002546001600160a01b03163314610b185760405162461bcd60e51b815260040161034a90612210565b80516001600160a01b038316600090815260036020526040902054600754610b4b9291610b459190611b39565b90611b14565b6007556020808201516001600160a01b03841660009081526003909252604090912060010154600854610b839291610b459190611b39565b60085580516001600160a01b0390921660009081526003602090815260409091209283550151600190910155565b6000610bbc82610dce565b15610bc957506000610c34565b6001600160a01b038216600090815260036020526040812060020154600d54610bf191611b39565b90506000610c1a678ac7230489e80000610c1484610c0e88611267565b90611ad3565b90611b61565b90506009548111610c2b5780610c2f565b6009545b925050505b919050565b6002546001600160a01b03163314610c635760405162461bcd60e51b815260040161034a90612210565b8051825114610c845760405162461bcd60e51b815260040161034a906124f0565b8151610c97906000906020850190611e0f565b508051610cab906001906020840190611e0f565b505050565b6001600160a01b038116600090815260036020526040812054610cd557506000610c34565b6000610d02610cf9610ce5610a3d565b610c14610cf187611267565b610c0e610ec9565b610b4585610bb1565b6001600160a01b038416600090815260036020526040812060010154919250610d2a85611988565b905080610d378385611b14565b11610d425782610d4c565b610d4c8183611b39565b95945050505050565b6002546001600160a01b03163314610d7f5760405162461bcd60e51b815260040161034a90612210565b6012805460ff1916911515919091179055565b60018181548110610ad457fe5b6002546001600160a01b03163314610dc95760405162461bcd60e51b815260040161034a90612210565b601155565b6000610dd982611988565b6001600160a01b03831660009081526003602052604090206001015410159050919050565b600054606090819067ffffffffffffffff81118015610e1c57600080fd5b50604051908082528060200260200182016040528015610e46578160200160208202803683370190505b50905060005b600054811015610ec2576001600160a01b03841660009081526004602090815260408083208484529091529020548251610ea39190849084908110610e8d57fe5b6020026020010151611b1490919063ffffffff16565b828281518110610eaf57fe5b6020908102919091010152600101610e4c565b5092915050565b6000426010541015610f2c576000610edf611222565b90506000610ef860105442611b3990919063ffffffff16565b90506000610f15600f54610c148585611ad390919063ffffffff16565b905082811115610f225750815b92506109f9915050565b50600090565b610f3a61123e565b336000610f4682610bb1565b9050801561104c57600954610f5b9082611b39565b6009556001600160a01b03821660009081526003602052604081206001015490610f8484611988565b905080610f918385611b14565b1115610fa457610fa18183611b39565b92505b6001600160a01b038416600090815260036020526040902060010154610fca9084611b14565b6001600160a01b038516600090815260036020526040902060010155600854610ff39084611b14565b60085561102a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611a50565b5050600d546001600160a01b0383166000908152600360205260409020600201555b5050565b6002546001600160a01b0316331461107a5760405162461bcd60e51b815260040161034a90612210565b60005b8151811015610cab576110d682828151811061109557fe5b6020908102919091018101516001600160a01b038616600090815260048352604080822086835284528082205460059094529020549091610b459190611b39565b60008281526005602052604090205581518290829081106110f357fe5b6020908102919091018101516001600160a01b0385166000908152600483526040808220858352909352919091205560010161107d565b6002546001600160a01b031633146111545760405162461bcd60e51b815260040161034a90612210565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a9059cbb9061119b9084908690600401612175565b602060405180830381600087803b1580156111b557600080fd5b505af11580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed919061209a565b50505050565b6002546001600160a01b0316331461121d5760405162461bcd60e51b815260040161034a90612210565b600b55565b60006109f6600a5461123860095461123861093e565b90611b39565b6000611248610ec9565b9050801561125e5761125981611b93565b426010555b50565b600b5481565b600080805b600054811015610ec2576001600160a01b038416600090815260046020908152604080832084845290915281205481546112af92610a89929185908110610a7057fe5b915060010161126c565b6002546001600160a01b031633146112e35760405162461bcd60e51b815260040161034a90612210565b600f55565b600054606090819067ffffffffffffffff8111801561130657600080fd5b50604051908082528060200260200182016040528015611330578160200160208202803683370190505b50905060005b600054811015610a9a576113636005600083815260200190815260200160002054838381518110610e8d57fe5b82828151811061136f57fe5b6020908102919091010152600101611336565b6002546001600160a01b031633146113ac5760405162461bcd60e51b815260040161034a90612210565b600e55565b60085481565b600e5481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031633146114115760405162461bcd60e51b815260040161034a90612210565b6001600160a01b0381166114375760405162461bcd60e51b815260040161034a90612391565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008061147283611267565b118015611485575061148382610dce565b155b6114905760006114bc565b6114bc600f54610c146114a1610a3d565b610c146114ad87611267565b610c0e62015180610c0e611222565b92915050565b601254339060ff1680156114d857506011544210155b6114f45760405162461bcd60e51b815260040161034a9061255e565b60005483108015611506575060015483105b6115225760405162461bcd60e51b815260040161034a9061245c565b61152a610f32565b6001600160a01b0381166000908152600360205260409020546115b45760068054600181019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155600d54600091825260036020526040909120600201555b6001600160a01b038116600090815260036020526040902054158015906115df57506115df81610dce565b1561160457600d546001600160a01b0382166000908152600360205260409020600201555b60006116178360018681548110610a7057fe5b9050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016116669190612123565b60206040518083038186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b691906120ce565b10156116d45760405162461bcd60e51b815260040161034a906122ec565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815281906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9061173d9086903090600401612137565b60206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906120ce565b10156117ab5760405162461bcd60e51b815260040161034a906122b5565b6117e06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016833084611be8565b6001600160a01b0382166000908152600360205260409020546118039082611b14565b6001600160a01b0383166000908152600360205260409020556007546118299082611b14565b600755600b5461184e9061184590606490610c14908590611ad3565b600a5490611b14565b600a556001600160a01b038216600090815260046020908152604080832087845290915290205461187f9084611b14565b6001600160a01b03831660009081526004602090815260408083208884528252808320939093556005905220546118b69084611b14565b6000858152600560205260409081902091909155517fddc82401ab579d868e816af720a563cdf9f9d0350abb3fa3266bcf33dd4f48ab906118fc904290859087906125fb565b60405180910390a150505050565b60036020526000908152604090208054600182015460029092015490919083565b600a5481565b600460209081526000928352604080842090915290825290205481565b6001600160a01b03919091166000908152600460209081526040808320938352929052205490565b600d5481565b600f5481565b60075481565b600e546001600160a01b03821660009081526003602052604081205490916114bc91606491610c149190611ad3565b60065490565b600c5481565b60006119ce33610cb0565b905060016000815481106119de57fe5b9060005260206000200154811015611a085760405162461bcd60e51b815260040161034a90612247565b6000611a356001600081548110611a1b57fe5b906000526020600020015483611b6190919063ffffffff16565b9050611a3f610f32565b61104c600082611c09565b60105481565b610cab8363a9059cbb60e01b8484604051602401611a6f929190612175565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611c69565b600082611ae2575060006114bc565b82820282848281611aef57fe5b0414611b0d5760405162461bcd60e51b815260040161034a90612493565b9392505050565b600082820183811015611b0d5760405162461bcd60e51b815260040161034a9061227e565b600082821115611b5b5760405162461bcd60e51b815260040161034a90612323565b50900390565b6000808211611b825760405162461bcd60e51b815260040161034a90612425565b818381611b8b57fe5b049392505050565b801561125e57611bc2611bb9611ba7610a3d565b610c1484678ac7230489e80000611ad3565b600d5490611b14565b600d55600c54611bd29082611b14565b600c55600954611be29082611b14565b60095550565b6111ed846323b872dd60e01b858585604051602401611a6f93929190612151565b601254339060ff168015611c1f57506011544210155b611c3b5760405162461bcd60e51b815260040161034a9061255e565b60005483108015611c4d575060015483105b61152a5760405162461bcd60e51b815260040161034a9061245c565b6060611cbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611cf89092919063ffffffff16565b805190915015610cab5780806020019051810190611cdc919061209a565b610cab5760405162461bcd60e51b815260040161034a90612595565b6060611d078484600085611d0f565b949350505050565b606082471015611d315760405162461bcd60e51b815260040161034a906123c8565b611d3a85611dd0565b611d565760405162461bcd60e51b815260040161034a90612527565b60006060866001600160a01b03168587604051611d739190612107565b60006040518083038185875af1925050503d8060008114611db0576040519150601f19603f3d011682016040523d82523d6000602084013e611db5565b606091505b5091509150611dc5828286611dd6565b979650505050505050565b3b151590565b60608315611de5575081611b0d565b825115611df55782518084602001fd5b8160405162461bcd60e51b815260040161034a91906121dd565b828054828255906000526020600020908101928215611e4a579160200282015b82811115611e4a578251825591602001919060010190611e2f565b50611e56929150611e5a565b5090565b5b80821115611e565760008155600101611e5b565b600082601f830112611e7f578081fd5b813567ffffffffffffffff811115611e95578182fd5b6020808202611ea5828201612630565b83815293508184018583018287018401881015611ec157600080fd5b600092505b84831015611ee4578035825260019290920191908301908301611ec6565b505050505092915050565b600060208284031215611f00578081fd5b8135611b0d81612683565b60008060408385031215611f1d578081fd5b8235611f2881612683565b9150602083013567ffffffffffffffff811115611f43578182fd5b611f4f85828601611e6f565b9150509250929050565b6000808284036080811215611f6c578283fd5b8335611f7781612683565b92506060601f1982011215611f8a578182fd5b50611f956060612630565b602084013581526040840135602082015260608401356040820152809150509250929050565b60008060408385031215611fcd578182fd5b8235611fd881612683565b946020939093013593505050565b600080600060608486031215611ffa578081fd5b833561200581612683565b925060208401359150604084013561201c81612683565b809150509250925092565b60008060408385031215612039578182fd5b823567ffffffffffffffff80821115612050578384fd5b61205c86838701611e6f565b93506020850135915080821115612071578283fd5b50611f4f85828601611e6f565b60006020828403121561208f578081fd5b8135611b0d81612698565b6000602082840312156120ab578081fd5b8151611b0d81612698565b6000602082840312156120c7578081fd5b5035919050565b6000602082840312156120df578081fd5b5051919050565b600080604083850312156120f8578182fd5b50508035926020909101359150565b60008251612119818460208701612657565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156121c6578351835292840192918401916001016121aa565b50909695505050505050565b901515815260200190565b60006020825282518060208401526121fc816040850160208701612657565b601f01601f19169190910160400192915050565b60208082526016908201527f43616c6c6572206973206e6f7420746865206465762100000000000000000000604082015260600190565b60208082526016908201527f4e6f7420656e6f75676820746f20636f6d706f756e6400000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604082015260600190565b60208082526014908201527f496e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526010908201527f446f206e6f742073656e642043524f2e00000000000000000000000000000000604082015260600190565b6020808252600c908201527f5a65726f20616464726573730000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f496e76616c6964206e6f64655469657200000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f4c656e677468206d69736d617463680000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526008908201527f44697361626c6564000000000000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526001600160a01b03919091166020830152604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561264f57600080fd5b604052919050565b60005b8381101561267257818101518382015260200161265a565b838111156111ed5750506000910152565b6001600160a01b038116811461125e57600080fd5b801515811461125e57600080fdfea264697066735822122023077e4ec848b0d3a2b0aa5e302a32cd09363bde8297d03b0bbfff525d076e5864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2968,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "tierAllocPoints",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2975,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "tierAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2992,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "dev",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2996,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)2982_storage)"
      },
      {
        "astId": 3002,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "nodes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3006,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalNodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3009,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "userIndices",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3011,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_deposited",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3013,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_claimed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3015,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "total_rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3017,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "treasury_rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3019,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "treasuryFeePercent",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3021,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalDistributeRewards",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3023,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "totalDistributePoints",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3025,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "maxReturnPercent",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3027,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "dripRate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3029,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "lastDripTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3031,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "startTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3033,
        "contract": "contracts/GlcrNode.sol:GlcrNode",
        "label": "enabled",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(User)2982_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GlcrNode.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2982_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(User)2982_storage": {
        "encoding": "inplace",
        "label": "struct GlcrNode.User",
        "members": [
          {
            "astId": 2977,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "total_deposits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2979,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "total_claims",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2981,
            "contract": "contracts/GlcrNode.sol:GlcrNode",
            "label": "last_distPoints",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}