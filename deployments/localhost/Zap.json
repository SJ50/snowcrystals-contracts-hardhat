{
  "address": "0x1e86fCe4d102A5924A9EF503f772fCA162Af2067",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WNATIVE",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "estimateZapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeeOnTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setIsFeeOnTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeToken",
          "type": "address"
        }
      ],
      "name": "setTokenBridgeForRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "setUseNativeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "swapToNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "swapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "useNativeRouter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapAcross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapInToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe4b605cd9fee656f77c43c6b1eb97469632d67685d6323292b31da905fef9854",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1e86fCe4d102A5924A9EF503f772fCA162Af2067",
    "transactionIndex": 0,
    "gasUsed": "3649409",
    "logsBloom": "0x
    "blockHash": "0x3465ce74bd808f6ef3cec9409edf0395c9c96bd9db8a15d733c83a5e5511f5a0",
    "transactionHash": "0xe4b605cd9fee656f77c43c6b1eb97469632d67685d6323292b31da905fef9854",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5234078,
        "transactionHash": "0xe4b605cd9fee656f77c43c6b1eb97469632d67685d6323292b31da905fef9854",
        "address": "0x1e86fCe4d102A5924A9EF503f772fCA162Af2067",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3465ce74bd808f6ef3cec9409edf0395c9c96bd9db8a15d733c83a5e5511f5a0"
      }
    ],
    "blockNumber": 5234078,
    "cumulativeGasUsed": "3649409",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6D02ABC5fa967B0b085083F5Cf36c24502447244"
  ],
  "numDeployments": 1,
  "solcInputHash": "f77d36897e3ec85e8f1aed5cd075e017",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WNATIVE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"estimateZapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeOnTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setIsFeeOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"name\":\"setTokenBridgeForRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setUseNativeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapToNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"useNativeRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapAcross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zap.sol\":\"Zap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n// Part: IHyperswapRouter01\\n\\ninterface IHyperswapRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WFTM() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityFTM(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountFTM,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityFTM(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountFTM);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityFTMWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountFTMMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountFTM);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactFTMForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactFTM(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForFTM(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapFTMForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\n// Part: IUniswapV2Pair\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// Part: IUniswapV2Router01\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// Part: IVault\\n\\ninterface IVault is IERC20 {\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 shares) external;\\n\\n    function want() external pure returns (address);\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Address\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeMath\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n// Part: TransferHelper\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeERC20\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// File: Context.sol\\n\\npragma solidity ^0.8.7;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: Ownable.sol\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: IZap.sol\\n\\ninterface IZap {\\n    function estimateZapInToken(\\n        address _from,\\n        address _to,\\n        address _router,\\n        uint256 _amt\\n    ) external view returns (uint256, uint256);\\n\\n    function swapToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external;\\n\\n    function swapToNative(\\n        address _from,\\n        uint256 amount,\\n        address routerAddr,\\n        address _recipient\\n    ) external;\\n\\n    function zapIn(\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external payable;\\n\\n    function zapInToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external;\\n\\n    function zapAcross(\\n        address _from,\\n        uint256 amount,\\n        address _toRouter,\\n        address _recipient\\n    ) external;\\n\\n    function zapOut(\\n        address _from,\\n        uint256 amount,\\n        address routerAddr,\\n        address _recipient\\n    ) external;\\n\\n    function zapOutToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external;\\n}\\n\\n// File: Zap.sol\\n\\ncontract Zap is Ownable, IZap {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address private WNATIVE;\\n    mapping(address => mapping(address => address))\\n        private tokenBridgeForRouter;\\n    mapping(address => bool) public isFeeOnTransfer;\\n\\n    mapping(address => bool) public useNativeRouter;\\n\\n    constructor(address _WNATIVE) Ownable() {\\n        WNATIVE = _WNATIVE;\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    receive() external payable {}\\n\\n    function zapInToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external override {\\n        _approveTokenIfNeeded(_from, routerAddr);\\n\\n        if (isFeeOnTransfer[_from]) {\\n            IERC20(_from).transferFrom(msg.sender, address(this), amount);\\n            _swapTokenToLP(\\n                _from,\\n                IERC20(_from).balanceOf(address(this)),\\n                _to,\\n                _recipient,\\n                routerAddr\\n            );\\n            return;\\n        } else {\\n            // From an ERC20 to an LP token, through specified router, going through base asset if necessary\\n            IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n            // we'll need this approval to add liquidity\\n            _approveTokenIfNeeded(_from, routerAddr);\\n            _swapTokenToLP(_from, amount, _to, _recipient, routerAddr);\\n            return;\\n        }\\n    }\\n\\n    function estimateZapInToken(\\n        address _from,\\n        address _to,\\n        address _router,\\n        uint256 _amt\\n    ) public view override returns (uint256, uint256) {\\n        // get pairs for desired lp\\n        if (\\n            _from == IUniswapV2Pair(_to).token0() ||\\n            _from == IUniswapV2Pair(_to).token1()\\n        ) {\\n            // check if we already have one of the assets\\n            // if so, we're going to sell half of _from for the other token we need\\n            // figure out which token we need, and approve\\n            address other = _from == IUniswapV2Pair(_to).token0()\\n                ? IUniswapV2Pair(_to).token1()\\n                : IUniswapV2Pair(_to).token0();\\n            // calculate amount of _from to sell\\n            uint256 sellAmount = _amt.div(2);\\n            // execute swap\\n            uint256 otherAmount = _estimateSwap(\\n                _from,\\n                sellAmount,\\n                other,\\n                _router\\n            );\\n            if (_from == IUniswapV2Pair(_to).token0()) {\\n                return (sellAmount, otherAmount);\\n            } else {\\n                return (otherAmount, sellAmount);\\n            }\\n        } else {\\n            // go through native token for highest liquidity\\n            uint256 nativeAmount = _from == WNATIVE\\n                ? _amt\\n                : _estimateSwap(_from, _amt, WNATIVE, _router);\\n            if (WNATIVE == IUniswapV2Pair(_to).token0()) {\\n                return (\\n                    nativeAmount.div(2),\\n                    _estimateSwap(\\n                        WNATIVE,\\n                        nativeAmount.div(2),\\n                        IUniswapV2Pair(_to).token1(),\\n                        _router\\n                    )\\n                );\\n            }\\n            if (WNATIVE == IUniswapV2Pair(_to).token1()) {\\n                return (\\n                    _estimateSwap(\\n                        WNATIVE,\\n                        nativeAmount.div(2),\\n                        IUniswapV2Pair(_to).token0(),\\n                        _router\\n                    ),\\n                    nativeAmount.div(2)\\n                );\\n            }\\n            return (\\n                _estimateSwap(\\n                    WNATIVE,\\n                    nativeAmount.div(2),\\n                    IUniswapV2Pair(_to).token0(),\\n                    _router\\n                ),\\n                _estimateSwap(\\n                    WNATIVE,\\n                    nativeAmount.div(2),\\n                    IUniswapV2Pair(_to).token1(),\\n                    _router\\n                )\\n            );\\n        }\\n    }\\n\\n    function zapIn(\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external payable override {\\n        // from Native to an LP token through the specified router\\n        _swapNativeToLP(_to, msg.value, _recipient, routerAddr);\\n        if (address(this).balance != 0) {\\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n\\n    function zapAcross(\\n        address _from,\\n        uint256 amount,\\n        address _toRouter,\\n        address _recipient\\n    ) external override {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_from);\\n        _approveTokenIfNeeded(pair.token0(), _toRouter);\\n        _approveTokenIfNeeded(pair.token1(), _toRouter);\\n\\n        IERC20(_from).safeTransfer(_from, amount);\\n        uint256 amt0;\\n        uint256 amt1;\\n        (amt0, amt1) = pair.burn(address(this));\\n        IUniswapV2Router01(_toRouter).addLiquidity(\\n            pair.token0(),\\n            pair.token1(),\\n            amt0,\\n            amt1,\\n            0,\\n            0,\\n            _recipient,\\n            block.timestamp\\n        );\\n    }\\n\\n    function zapOut(\\n        address _from,\\n        uint256 amount,\\n        address routerAddr,\\n        address _recipient\\n    ) external override {\\n        // from an LP token to Native through specified router\\n        // take the LP token\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n\\n        // get pairs for LP\\n        address token0 = IUniswapV2Pair(_from).token0();\\n        address token1 = IUniswapV2Pair(_from).token1();\\n        _approveTokenIfNeeded(token0, routerAddr);\\n        _approveTokenIfNeeded(token1, routerAddr);\\n        // check if either is already native token\\n        if (token0 == WNATIVE || token1 == WNATIVE) {\\n            // if so, we only need to swap one, figure out which and how much\\n            address token = token0 != WNATIVE ? token0 : token1;\\n            uint256 amtToken;\\n            uint256 amtETH;\\n            (amtToken, amtETH) = IUniswapV2Router01(routerAddr)\\n                .removeLiquidityETH(\\n                    token,\\n                    amount,\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            // swap with msg.sender as recipient, so they already get the Native\\n            _swapTokenForNative(token, amtToken, _recipient, routerAddr);\\n            // send other half of Native\\n            TransferHelper.safeTransferETH(_recipient, amtETH);\\n        } else {\\n            // convert both for Native with msg.sender as recipient\\n            uint256 amt0;\\n            uint256 amt1;\\n            (amt0, amt1) = IUniswapV2Router01(routerAddr).removeLiquidity(\\n                token0,\\n                token1,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp\\n            );\\n            _swapTokenForNative(token0, amt0, _recipient, routerAddr);\\n            _swapTokenForNative(token1, amt1, _recipient, routerAddr);\\n        }\\n    }\\n\\n    function zapOutToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external override {\\n        // from an LP token to an ERC20 through specified router\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n\\n        address token0 = IUniswapV2Pair(_from).token0();\\n        address token1 = IUniswapV2Pair(_from).token1();\\n        _approveTokenIfNeeded(token0, routerAddr);\\n        _approveTokenIfNeeded(token1, routerAddr);\\n        uint256 amt0;\\n        uint256 amt1;\\n        (amt0, amt1) = IUniswapV2Router01(routerAddr).removeLiquidity(\\n            token0,\\n            token1,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n        if (token0 != _to) {\\n            amt0 = _swap(token0, amt0, _to, address(this), routerAddr);\\n        }\\n        if (token1 != _to) {\\n            amt1 = _swap(token1, amt1, _to, address(this), routerAddr);\\n        }\\n        IERC20(_to).safeTransfer(_recipient, amt0.add(amt1));\\n    }\\n\\n    function swapToken(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr,\\n        address _recipient\\n    ) external override {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n        _swap(_from, amount, _to, _recipient, routerAddr);\\n    }\\n\\n    function swapToNative(\\n        address _from,\\n        uint256 amount,\\n        address routerAddr,\\n        address _recipient\\n    ) external override {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n        _swapTokenForNative(_from, amount, _recipient, routerAddr);\\n    }\\n\\n    /* ========== Private Functions ========== */\\n\\n    function _approveTokenIfNeeded(address token, address router) private {\\n        if (IERC20(token).allowance(address(this), router) == 0) {\\n            IERC20(token).safeApprove(router, type(uint256).max);\\n        }\\n    }\\n\\n    function _swapTokenToLP(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address recipient,\\n        address routerAddr\\n    ) private returns (uint256) {\\n        // get pairs for desired lp\\n        if (\\n            _from == IUniswapV2Pair(_to).token0() ||\\n            _from == IUniswapV2Pair(_to).token1()\\n        ) {\\n            // check if we already have one of the assets\\n            // if so, we're going to sell half of _from for the other token we need\\n            // figure out which token we need, and approve\\n            address other = _from == IUniswapV2Pair(_to).token0()\\n                ? IUniswapV2Pair(_to).token1()\\n                : IUniswapV2Pair(_to).token0();\\n            _approveTokenIfNeeded(other, routerAddr);\\n            // calculate amount of _from to sell\\n            uint256 sellAmount = amount.div(2);\\n            // execute swap\\n            uint256 otherAmount = _swap(\\n                _from,\\n                sellAmount,\\n                other,\\n                address(this),\\n                routerAddr\\n            );\\n            uint256 liquidity;\\n            (, , liquidity) = IUniswapV2Router01(routerAddr).addLiquidity(\\n                _from,\\n                other,\\n                amount.sub(sellAmount),\\n                otherAmount,\\n                0,\\n                0,\\n                recipient,\\n                block.timestamp\\n            );\\n            return liquidity;\\n        } else {\\n            // go through native token for highest liquidity\\n            uint256 nativeAmount = _swapTokenForNative(\\n                _from,\\n                amount,\\n                address(this),\\n                routerAddr\\n            );\\n            return _swapNativeToLP(_to, nativeAmount, recipient, routerAddr);\\n        }\\n    }\\n\\n    function _swapNativeToLP(\\n        address _LP,\\n        uint256 amount,\\n        address recipient,\\n        address routerAddress\\n    ) private returns (uint256) {\\n        // LP\\n        IUniswapV2Pair pair = IUniswapV2Pair(_LP);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        uint256 liquidity;\\n        if (token0 == WNATIVE || token1 == WNATIVE) {\\n            address token = token0 == WNATIVE ? token1 : token0;\\n            (, , liquidity) = _swapHalfNativeAndProvide(\\n                token,\\n                amount,\\n                routerAddress,\\n                recipient\\n            );\\n        } else {\\n            (, , liquidity) = _swapNativeToEqualTokensAndProvide(\\n                token0,\\n                token1,\\n                amount,\\n                routerAddress,\\n                recipient\\n            );\\n        }\\n        return liquidity;\\n    }\\n\\n    function _swapHalfNativeAndProvide(\\n        address token,\\n        uint256 amount,\\n        address routerAddress,\\n        address recipient\\n    )\\n        private\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 swapValue = amount.div(2);\\n        uint256 tokenAmount = _swapNativeForToken(\\n            token,\\n            swapValue,\\n            address(this),\\n            routerAddress\\n        );\\n        _approveTokenIfNeeded(token, routerAddress);\\n        if (useNativeRouter[routerAddress]) {\\n            IHyperswapRouter01 router = IHyperswapRouter01(routerAddress);\\n            return\\n                router.addLiquidityFTM{value: amount.sub(swapValue)}(\\n                    token,\\n                    tokenAmount,\\n                    0,\\n                    0,\\n                    recipient,\\n                    block.timestamp\\n                );\\n        } else {\\n            IUniswapV2Router01 router = IUniswapV2Router01(routerAddress);\\n            return\\n                router.addLiquidityETH{value: amount.sub(swapValue)}(\\n                    token,\\n                    tokenAmount,\\n                    0,\\n                    0,\\n                    recipient,\\n                    block.timestamp\\n                );\\n        }\\n    }\\n\\n    function _swapNativeToEqualTokensAndProvide(\\n        address token0,\\n        address token1,\\n        uint256 amount,\\n        address routerAddress,\\n        address recipient\\n    )\\n        private\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 swapValue = amount.div(2);\\n        uint256 token0Amount = _swapNativeForToken(\\n            token0,\\n            swapValue,\\n            address(this),\\n            routerAddress\\n        );\\n        uint256 token1Amount = _swapNativeForToken(\\n            token1,\\n            amount.sub(swapValue),\\n            address(this),\\n            routerAddress\\n        );\\n        _approveTokenIfNeeded(token0, routerAddress);\\n        _approveTokenIfNeeded(token1, routerAddress);\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddress);\\n        return\\n            router.addLiquidity(\\n                token0,\\n                token1,\\n                token0Amount,\\n                token1Amount,\\n                0,\\n                0,\\n                recipient,\\n                block.timestamp\\n            );\\n    }\\n\\n    function _swapNativeForToken(\\n        address token,\\n        uint256 value,\\n        address recipient,\\n        address routerAddr\\n    ) private returns (uint256) {\\n        address[] memory path;\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        if (tokenBridgeForRouter[token][routerAddr] != address(0)) {\\n            path = new address[](3);\\n            path[0] = WNATIVE;\\n            path[1] = tokenBridgeForRouter[token][routerAddr];\\n            path[2] = token;\\n        } else {\\n            path = new address[](2);\\n            path[0] = WNATIVE;\\n            path[1] = token;\\n        }\\n\\n        uint256[] memory amounts = router.swapExactETHForTokens{value: value}(\\n            0,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swapTokenForNative(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        address routerAddr\\n    ) private returns (uint256) {\\n        address[] memory path;\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        if (tokenBridgeForRouter[token][routerAddr] != address(0)) {\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = tokenBridgeForRouter[token][routerAddr];\\n            path[2] = router.WETH();\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = router.WETH();\\n        }\\n\\n        if (isFeeOnTransfer[token]) {\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                amount,\\n                0,\\n                path,\\n                recipient,\\n                block.timestamp\\n            );\\n            return IERC20(token).balanceOf(address(this));\\n        } else {\\n            uint256[] memory amounts = router.swapExactTokensForETH(\\n                amount,\\n                0,\\n                path,\\n                recipient,\\n                block.timestamp\\n            );\\n            return amounts[amounts.length - 1];\\n        }\\n    }\\n\\n    function _swap(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address recipient,\\n        address routerAddr\\n    ) private returns (uint256) {\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        address fromBridge = tokenBridgeForRouter[_from][routerAddr];\\n        address toBridge = tokenBridgeForRouter[_to][routerAddr];\\n\\n        address[] memory path;\\n\\n        if (fromBridge != address(0) && toBridge != address(0)) {\\n            // both have bridge\\n            if (fromBridge != toBridge) {\\n                path = new address[](5);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = toBridge;\\n                path[4] = _to;\\n            } else {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = _to;\\n            }\\n        } else if (fromBridge != address(0)) {\\n            // from has bridge\\n            if (fromBridge == _to) {\\n                path = new address[](2);\\n                path[0] = _from;\\n                path[1] = _to;\\n            } else if (_to == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = _to;\\n            }\\n        } else if (toBridge != address(0)) {\\n            // only _to ha a bridge, not _from\\n            if (_from == toBridge) {\\n                path = new address[](2);\\n                path[0] = _from;\\n                path[1] = _to;\\n            } else if (_from == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = WNATIVE;\\n                path[1] = toBridge;\\n                path[2] = _to;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = WNATIVE;\\n                path[2] = toBridge;\\n                path[3] = _to;\\n            }\\n        } else if (_from == WNATIVE || _to == WNATIVE) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            // Go through WNative\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = _to;\\n        }\\n\\n        uint256[] memory amounts;\\n\\n        if (isFeeOnTransfer[_from]) {\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amount,\\n                0,\\n                path,\\n                recipient,\\n                block.timestamp\\n            );\\n            return IERC20(_to).balanceOf(address(this));\\n        } else {\\n            amounts = router.swapExactTokensForTokens(\\n                amount,\\n                0,\\n                path,\\n                recipient,\\n                block.timestamp\\n            );\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _estimateSwap(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address routerAddr\\n    ) private view returns (uint256) {\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        address fromBridge = tokenBridgeForRouter[_from][routerAddr];\\n        address toBridge = tokenBridgeForRouter[_to][routerAddr];\\n\\n        address[] memory path;\\n\\n        if (fromBridge != address(0) && toBridge != address(0)) {\\n            if (fromBridge != toBridge) {\\n                path = new address[](5);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = toBridge;\\n                path[4] = _to;\\n            } else {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = _to;\\n            }\\n        } else if (fromBridge != address(0)) {\\n            if (fromBridge == _to) {\\n                path = new address[](2);\\n                path[0] = _from;\\n                path[1] = _to;\\n            } else if (_to == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = _to;\\n            }\\n        } else if (toBridge != address(0)) {\\n            if (_from == toBridge) {\\n                path = new address[](2);\\n                path[0] = _from;\\n                path[1] = _to;\\n            } else if (_from == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = WNATIVE;\\n                path[1] = toBridge;\\n                path[2] = _to;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = WNATIVE;\\n                path[2] = toBridge;\\n                path[3] = _to;\\n            }\\n        } else if (_from == WNATIVE || _to == WNATIVE) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            // Go through WNative\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = _to;\\n        }\\n\\n        uint256[] memory amounts = router.getAmountsOut(amount, path);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setTokenBridgeForRouter(\\n        address token,\\n        address router,\\n        address bridgeToken\\n    ) external onlyOwner {\\n        tokenBridgeForRouter[token][router] = bridgeToken;\\n    }\\n\\n    function withdraw(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(owner()).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function setUseNativeRouter(address router) external onlyOwner {\\n        useNativeRouter[router] = true;\\n    }\\n\\n    function setIsFeeOnTransfer(address token) external onlyOwner {\\n        isFeeOnTransfer[token] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xdd53b87a36a8beb0fdcc089d23b54847e7b4c8d7d98a34ddfbd0693a69c3e95a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5869,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6081,
        "contract": "contracts/Zap.sol:Zap",
        "label": "WNATIVE",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6087,
        "contract": "contracts/Zap.sol:Zap",
        "label": "tokenBridgeForRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 6091,
        "contract": "contracts/Zap.sol:Zap",
        "label": "isFeeOnTransfer",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6095,
        "contract": "contracts/Zap.sol:Zap",
        "label": "useNativeRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}