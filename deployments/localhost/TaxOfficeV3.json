{
  "address": "0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shareToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mainTokenOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "HandledMainTokenTax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "HandledShareTokenTax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateMainTokenTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taxRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateShareTokenTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taxRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMainTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMainTokenUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "handleMainTokenTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "handleShareTokenTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainToken",
      "outputs": [
        {
          "internalType": "contract IERC20Taxable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainTokenOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainTokenTaxRateTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainTokenTaxTwapTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableDynamicTax",
          "type": "bool"
        }
      ],
      "name": "setMainTokenEnableDynamicTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainTokenOracle",
          "type": "address"
        }
      ],
      "name": "setMainTokenOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxRate",
          "type": "uint256"
        }
      ],
      "name": "setMainTokenStaticTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_mainTokenTaxTwapTiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mainTokenTaxRateTiers",
          "type": "uint256[]"
        }
      ],
      "name": "setMainTokenTaxTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "setMainTokenWhitelistType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableDynamicTax",
          "type": "bool"
        }
      ],
      "name": "setShareTokenEnableDynamicTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxRate",
          "type": "uint256"
        }
      ],
      "name": "setShareTokenStaticTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_shareTokenTaxTwapTiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shareTokenTaxRateTiers",
          "type": "uint256[]"
        }
      ],
      "name": "setShareTokenTaxTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "setShareTokenWhitelistType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTaxDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareToken",
      "outputs": [
        {
          "internalType": "contract IERC20Taxable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shareTokenTaxRateTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shareTokenTaxTwapTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "taxDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator_",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateMainTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5067095ef5c7f15000f56c63ebf2caf2227f9a7b92b26a0222aa1a5bba8a50cd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
    "transactionIndex": 0,
    "gasUsed": "3796506",
    "logsBloom": "0x
    "blockHash": "0x32935dfedcbccfbde9e8f27544ef83196a8a4c9a548b898a00778b7a8b0e4b7e",
    "transactionHash": "0x5067095ef5c7f15000f56c63ebf2caf2227f9a7b92b26a0222aa1a5bba8a50cd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5275230,
        "transactionHash": "0x5067095ef5c7f15000f56c63ebf2caf2227f9a7b92b26a0222aa1a5bba8a50cd",
        "address": "0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x32935dfedcbccfbde9e8f27544ef83196a8a4c9a548b898a00778b7a8b0e4b7e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5275230,
        "transactionHash": "0x5067095ef5c7f15000f56c63ebf2caf2227f9a7b92b26a0222aa1a5bba8a50cd",
        "address": "0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x32935dfedcbccfbde9e8f27544ef83196a8a4c9a548b898a00778b7a8b0e4b7e"
      }
    ],
    "blockNumber": 5275230,
    "cumulativeGasUsed": "3796506",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
    "0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f",
    "0x9E545E3C0baAB3E08CdfD552C960A1050f373042",
    "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "0x145677FC4d9b8F19B5D56d1820c48e0443049a30"
  ],
  "numDeployments": 1,
  "solcInputHash": "73395350a0819fb65c5145526fa0b4d9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainTokenOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HandledMainTokenTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HandledShareTokenTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMainTokenTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateShareTokenTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainTokenUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleMainTokenTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleShareTokenTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20Taxable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainTokenOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainTokenTaxRateTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainTokenTaxTwapTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableDynamicTax\",\"type\":\"bool\"}],\"name\":\"setMainTokenEnableDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainTokenOracle\",\"type\":\"address\"}],\"name\":\"setMainTokenOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setMainTokenStaticTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_mainTokenTaxTwapTiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mainTokenTaxRateTiers\",\"type\":\"uint256[]\"}],\"name\":\"setMainTokenTaxTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setMainTokenWhitelistType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableDynamicTax\",\"type\":\"bool\"}],\"name\":\"setShareTokenEnableDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setShareTokenStaticTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_shareTokenTaxTwapTiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shareTokenTaxRateTiers\",\"type\":\"uint256[]\"}],\"name\":\"setShareTokenTaxTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setShareTokenWhitelistType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaxDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"contract IERC20Taxable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareTokenTaxRateTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareTokenTaxTwapTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMainTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TaxOffice.sol\":\"TaxOfficeV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TaxOffice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./access/Operator.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\nimport \\\"./interfaces/IBonusRewards.sol\\\";\\n\\ncontract TaxOffice is Operator {\\n    using SafeMath for uint256;\\n\\n    event HandledMainTokenTax(uint256 _amount);\\n    event HandledShareTokenTax(uint256 _amount);\\n\\n    IERC20Taxable public immutable mainToken;\\n    IERC20Taxable public immutable shareToken;\\n    IOracle public mainTokenOracle;\\n\\n    uint256 public constant BASIS_POINTS_DENOM = 10_000;\\n\\n    uint256[] public mainTokenTaxTwapTiers = [\\n        0,\\n        5e16,\\n        6e16,\\n        7e16,\\n        8e16,\\n        9e16,\\n        9.5e16,\\n        1e17,\\n        1.05e17,\\n        1.10e17,\\n        1.20e17,\\n        1.30e17,\\n        1.40e17,\\n        1.50e17\\n    ];\\n    uint256[] public mainTokenTaxRateTiers = [\\n        2250,\\n        2250,\\n        2250,\\n        2000,\\n        2000,\\n        1600,\\n        1600,\\n        1600,\\n        800,\\n        800,\\n        600,\\n        600,\\n        600,\\n        400\\n    ];\\n\\n    uint256[] public shareTokenTaxTwapTiers = [\\n        0,\\n        5e16,\\n        6e16,\\n        7e16,\\n        8e16,\\n        9e16,\\n        9.5e16,\\n        1e17,\\n        1.05e17,\\n        1.10e17,\\n        1.20e17,\\n        1.30e17,\\n        1.40e17,\\n        1.50e17\\n    ];\\n    uint256[] public shareTokenTaxRateTiers = [\\n        2250,\\n        2250,\\n        2250,\\n        2000,\\n        2000,\\n        1600,\\n        1600,\\n        1600,\\n        800,\\n        800,\\n        600,\\n        600,\\n        600,\\n        400\\n    ];\\n\\n    mapping(address => mapping(address => uint256)) public taxDiscount;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle\\n    ) public {\\n        mainToken = IERC20Taxable(_mainToken);\\n        shareToken = IERC20Taxable(_shareToken);\\n        mainTokenOracle = IOracle(_mainTokenOracle);\\n    }\\n\\n    /*\\n    Uses the oracle to fire the 'consult' method and get the price of tomb.\\n    */\\n    function getMainTokenPrice() public view returns (uint256) {\\n        try mainTokenOracle.consult(address(mainToken), 1e18) returns (\\n            uint144 _price\\n        ) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Erro: failed to fetch Main Token price from Oracle\\\");\\n        }\\n    }\\n\\n    /*\\n    Uses the oracle to fire the 'twap' method and get the price of tomb.\\n    */\\n    function getMainTokenUpdatedPrice() public view returns (uint256) {\\n        try mainTokenOracle.twap(address(mainToken), 1e18) returns (\\n            uint144 _price\\n        ) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Erro: failed to fetch Main Token price from Oracle\\\");\\n        }\\n    }\\n\\n    /* \\n    use the oracle to update maintoke twap price \\n    */\\n    function updateMainTokenPrice() public {\\n        if (address(mainTokenOracle) != address(0))\\n            try mainTokenOracle.update() {} catch {}\\n    }\\n\\n    function assertMonotonicity(uint256[] memory _monotonicArray)\\n        internal\\n        pure\\n    {\\n        uint8 endIdx = uint8(_monotonicArray.length.sub(1));\\n        for (uint8 idx = 0; idx <= endIdx; idx++) {\\n            if (idx > 0) {\\n                require(\\n                    _monotonicArray[idx] > _monotonicArray[idx - 1],\\n                    \\\"Error: TWAP tiers sequence are not monotonic\\\"\\n                );\\n            }\\n            if (idx < endIdx) {\\n                require(\\n                    _monotonicArray[idx] < _monotonicArray[idx + 1],\\n                    \\\"Error: TWAP tiers sequence are not monotonic\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    function setMainTokenTaxTiers(\\n        uint256[] calldata _mainTokenTaxTwapTiers,\\n        uint256[] calldata _mainTokenTaxRateTiers\\n    ) external onlyOperator {\\n        require(\\n            _mainTokenTaxTwapTiers.length == _mainTokenTaxRateTiers.length,\\n            \\\"Error: vector lengths are not the same.\\\"\\n        );\\n\\n        //Require monotonicity of TWAP tiers.\\n        assertMonotonicity(_mainTokenTaxTwapTiers);\\n\\n        //Set values.\\n        mainTokenTaxTwapTiers = _mainTokenTaxTwapTiers;\\n        mainTokenTaxRateTiers = _mainTokenTaxRateTiers;\\n    }\\n\\n    function setShareTokenTaxTiers(\\n        uint256[] calldata _shareTokenTaxTwapTiers,\\n        uint256[] calldata _shareTokenTaxRateTiers\\n    ) external onlyOperator {\\n        require(\\n            _shareTokenTaxTwapTiers.length == _shareTokenTaxRateTiers.length,\\n            \\\"Error: vector lengths are not the same.\\\"\\n        );\\n\\n        //Require monotonicity of TWAP tiers.\\n        assertMonotonicity(_shareTokenTaxTwapTiers);\\n\\n        //Set values.\\n        shareTokenTaxTwapTiers = _shareTokenTaxTwapTiers;\\n        shareTokenTaxRateTiers = _shareTokenTaxRateTiers;\\n    }\\n\\n    function searchSorted(uint256[] memory _monotonicArray, uint256 _value)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        uint8 endIdx = uint8(_monotonicArray.length.sub(1));\\n        for (uint8 tierIdx = endIdx; tierIdx >= 0; --tierIdx) {\\n            if (_value >= _monotonicArray[tierIdx]) {\\n                return tierIdx;\\n            }\\n        }\\n    }\\n\\n    function calculateMainTokenTax() external view returns (uint256 taxRate) {\\n        uint256 mainTokenPrice = getMainTokenUpdatedPrice();\\n        uint8 taxTierIdx = searchSorted(mainTokenTaxTwapTiers, mainTokenPrice);\\n        taxRate = mainTokenTaxRateTiers[taxTierIdx];\\n    }\\n\\n    function calculateShareTokenTax() external view returns (uint256 taxRate) {\\n        uint256 mainTokenPrice = getMainTokenUpdatedPrice();\\n        uint8 taxTierIdx = searchSorted(shareTokenTaxTwapTiers, mainTokenPrice);\\n        taxRate = shareTokenTaxRateTiers[taxTierIdx];\\n    }\\n\\n    function withdraw(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOperator {\\n        IERC20(_token).transfer(_recipient, _amount);\\n    }\\n\\n    function handleMainTokenTax(uint256 _amount) external virtual {\\n        emit HandledMainTokenTax(_amount);\\n    }\\n\\n    function handleShareTokenTax(uint256 _amount) external virtual {\\n        emit HandledShareTokenTax(_amount);\\n    }\\n\\n    /* ========== SET VARIABLES ========== */\\n\\n    function setMainTokenStaticTaxRate(uint256 _taxRate) external onlyOperator {\\n        mainToken.setStaticTaxRate(_taxRate);\\n    }\\n\\n    function setMainTokenEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyOperator\\n    {\\n        mainToken.setEnableDynamicTax(_enableDynamicTax);\\n    }\\n\\n    function setMainTokenWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyOperator\\n    {\\n        mainToken.setWhitelistType(_account, _type);\\n    }\\n\\n    function setShareTokenStaticTaxRate(uint256 _taxRate)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setStaticTaxRate(_taxRate);\\n    }\\n\\n    function setShareTokenEnableDynamicTax(bool _enableDynamicTax)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setEnableDynamicTax(_enableDynamicTax);\\n    }\\n\\n    function setShareTokenWhitelistType(address _account, uint8 _type)\\n        external\\n        onlyOperator\\n    {\\n        shareToken.setWhitelistType(_account, _type);\\n    }\\n\\n    function setTaxDiscount(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(\\n            _amount <= BASIS_POINTS_DENOM,\\n            \\\"Error: Discount rate too high.\\\"\\n        );\\n        taxDiscount[_sender][_recipient] = _amount;\\n    }\\n\\n    function setMainTokenOracle(address _mainTokenOracle)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _mainTokenOracle != address(0),\\n            \\\"Error: Oracle address cannot be 0 address\\\"\\n        );\\n        mainTokenOracle = IOracle(_mainTokenOracle);\\n    }\\n}\\n\\n// File: TaxOfficeV2.sol\\n\\ncontract TaxOfficeV2 is TaxOffice {\\n    using SafeERC20 for IERC20;\\n\\n    address public router;\\n    IERC20 public immutable pegToken;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle,\\n        address _pegToken,\\n        address _router\\n    ) public TaxOffice(_mainToken, _shareToken, _mainTokenOracle) {\\n        pegToken = IERC20(_pegToken);\\n        router = _router;\\n    }\\n\\n    function setRouterAddress(address _router) public onlyOperator {\\n        router = _router;\\n    }\\n\\n    function handleShareTokenTax(uint256 _amount) external override {\\n        //Apply accesibility permissions.\\n        require(\\n            msg.sender == address(shareToken) || msg.sender == operator(),\\n            \\\"Error: Withdraw permissions insufficient.\\\"\\n        );\\n\\n        uint256 burnAmount_ = _amount.mul(800).div(1000);\\n        uint256 otherAmount_ = _amount.sub(burnAmount_);\\n\\n        swapShareTokenToMainTokenAndBurn(\\n            burnAmount_,\\n            address(shareToken),\\n            address(pegToken),\\n            address(mainToken)\\n        );\\n\\n        swapTokensForOther(\\n            otherAmount_,\\n            address(shareToken),\\n            address(pegToken)\\n        );\\n\\n        updateMainTokenPrice();\\n        //Emit event.\\n        emit HandledShareTokenTax(_amount);\\n    }\\n\\n    function swapShareTokenToMainTokenAndBurn(\\n        uint256 _tokenAmount,\\n        address _token0,\\n        address _token1,\\n        address _token2\\n    ) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory shareToMainTokenSwapPath;\\n        shareToMainTokenSwapPath = new address[](3);\\n        shareToMainTokenSwapPath[0] = _token0;\\n        shareToMainTokenSwapPath[1] = _token1;\\n        shareToMainTokenSwapPath[2] = _token2;\\n        //Swap from share token to main token.\\n        _approveTokenIfNeeded(_token0, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token1, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token2, router, _tokenAmount);\\n\\n        uint256[] memory amounts = IUniswapV2Router(router)\\n            .swapExactTokensForTokens(\\n                _tokenAmount,\\n                0,\\n                shareToMainTokenSwapPath,\\n                address(this),\\n                block.timestamp + 40\\n            );\\n        uint256 mainTokenAmounts = amounts[2];\\n        mainToken.burn(mainTokenAmounts);\\n    }\\n\\n    function swapTokensForOther(\\n        uint256 _tokenAmount,\\n        address _token0,\\n        address _token1\\n    ) internal {\\n        //Check _amount of token to be handled is available.\\n        uint256 tokenBalance = IERC20Taxable(_token0).balanceOf(address(this));\\n        if (_tokenAmount > tokenBalance) {\\n            _tokenAmount = tokenBalance;\\n        }\\n        // generate the uniswap pair path of token -> peg\\n        address[] memory path = new address[](2);\\n        path[0] = _token0;\\n        path[1] = _token1;\\n\\n        // approve token transfer to cover all possible scenarios\\n        _approveTokenIfNeeded(_token0, router, _tokenAmount);\\n        _approveTokenIfNeeded(_token1, router, _tokenAmount);\\n\\n        IUniswapV2Router(router).swapExactTokensForTokens(\\n            _tokenAmount,\\n            0, // accept any amount of pegToken\\n            path,\\n            address(this),\\n            block.timestamp + 40\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(\\n        address _token,\\n        address _router,\\n        uint256 _tokenAmount\\n    ) internal {\\n        if (IERC20(_token).allowance(address(this), _router) < _tokenAmount) {\\n            IERC20(_token).safeApprove(_router, type(uint256).max);\\n        }\\n    }\\n}\\n\\ncontract TaxOfficeV3 is TaxOfficeV2 {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _mainToken,\\n        address _shareToken,\\n        address _mainTokenOracle,\\n        address _pegToken,\\n        address _router\\n    )\\n        public\\n        TaxOfficeV2(\\n            _mainToken,\\n            _shareToken,\\n            _mainTokenOracle,\\n            _pegToken,\\n            _router\\n        )\\n    {}\\n\\n    function handleMainTokenTax(uint256 _amount) external override {\\n        require(\\n            msg.sender == address(mainToken) || msg.sender == operator(),\\n            \\\"Error: Withdraw permissions insufficient.\\\"\\n        );\\n        uint256 burnAmount_ = _amount.mul(80).div(100);\\n        mainToken.burn(burnAmount_);\\n\\n        uint256 taxAmount_ = _amount.sub(burnAmount_);\\n        swapTokensForOther(taxAmount_, address(mainToken), address(pegToken));\\n        updateMainTokenPrice();\\n    }\\n}\\n\",\"keccak256\":\"0xe6bfd1549021ab58fba40f2da407cd439449f5931011b7f86fb15666d4997112\",\"license\":\"MIT\"},\"contracts/access/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            \\\"operator: zero address given for new operator\\\"\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0xb5055492468980c849d82c7f7a2de99c566b3b028f45112bffc0a1c8c697d831\",\"license\":\"MIT\"},\"contracts/interfaces/IBonusRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBonusRewards {\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function restartPool(uint256 _amount, uint256 _nextEpochPoint) external;\\n}\\n\",\"keccak256\":\"0x137955dc55b3df75ce45af6389fb20d8706e57333a6d9201449044cc437de35c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Taxable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Taxable is IERC20 {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n\\n    function taxOffice() external returns (address);\\n\\n    function staticTaxRate() external returns (uint256);\\n\\n    function dynamicTaxRate() external returns (uint256);\\n\\n    function getCurrentTaxRate() external returns (uint256);\\n\\n    function setTaxOffice(address _taxOffice) external;\\n\\n    function setStaticTaxRate(uint256 _taxRate) external;\\n\\n    function setEnableDynamicTax(bool _enableDynamicTax) external;\\n\\n    function setWhitelistType(address _token, uint8 _type) external;\\n\\n    function isWhitelistedSender(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function isWhitelistedRecipient(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x21917e4e69d32bc4b911a39183a8f294a9be5c7964f8dae4a7f09140568a7d66\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut);\\n\\n    function getPegPrice() external view returns (int256);\\n\\n    function getPegPriceUpdated() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xce39bb65a60e7389e03a64b79a6000b96cb40b9145ddf013d729f9a0a467d366\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75869e14bda79308d020f31b941bbea43978aed8719b6b8fa20b68c3e94e5f7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806373d8700b11610145578063d2742813116100bd578063d9caed121161008c578063ebaf415611610071578063ebaf41561461070c578063f2fde38b14610729578063f887ea401461074f5761025c565b8063d9caed12146106a0578063e6ff187a146106d65761025c565b8063d274281314610669578063d39abead14610671578063d3bca4ce14610679578063d419ae53146106985761025c565b8063a6f58b1511610114578063b1d5ca1d116100f9578063b1d5ca1d1461061e578063bcf0c9f914610644578063bfc770a81461064c5761025c565b8063a6f58b15146105f9578063adda69f5146106165761025c565b806373d8700b146104e35780638da5cb5b146105a55780639b358076146105ad578063a179de2c146105dc5761025c565b806341cb87fc116101d85780635803abaa116101a75780636c9fa59e1161018c5780636c9fa59e146104cb57806370ff8322146104d3578063715018a6146104db5761025c565b80635803abaa14610495578063678014b0146104c35761025c565b806341cb87fc1461042e5780634456eda21461045457806356ee5f4c14610470578063570ca7351461048d5761025c565b806329605e771161022f5780633b16c9c4116102145780633b16c9c41461032b5780633b42f67b146103ed5780633fc15f151461040a5761025c565b806329605e77146102e85780632df5a70a1461030e5761025c565b80630d565702146102615780630dbce9751461026b5780631daf0dca1461029a5780632041c24c146102c9575b600080fd5b610269610757565b005b6102696004803603604081101561028157600080fd5b5080356001600160a01b0316906020013560ff166107cd565b6102b7600480360360208110156102b057600080fd5b50356108ac565b60408051918252519081900360200190f35b610269600480360360208110156102df57600080fd5b503515156108ca565b610269600480360360208110156102fe57600080fd5b50356001600160a01b0316610996565b6102b76004803603602081101561032457600080fd5b5035610a13565b6102696004803603604081101561034157600080fd5b81019060208101813564010000000081111561035c57600080fd5b82018360208201111561036e57600080fd5b8035906020019184602083028401116401000000008311171561039057600080fd5b9193909290916020810190356401000000008111156103ae57600080fd5b8201836020820111156103c057600080fd5b803590602001918460208302840111640100000000831117156103e257600080fd5b509092509050610a20565b6102696004803603602081101561040357600080fd5b5035610afc565b610412610bab565b604080516001600160a01b039092168252519081900360200190f35b6102696004803603602081101561044457600080fd5b50356001600160a01b0316610bcf565b61045c610c3a565b604080519115158252519081900360200190f35b6102696004803603602081101561048657600080fd5b5035610c61565b610412610d10565b6102b7600480360360408110156104ab57600080fd5b506001600160a01b0381358116916020013516610d1f565b6102b7610d3c565b610412610d42565b6102b7610d66565b610269610e79565b610269600480360360408110156104f957600080fd5b81019060208101813564010000000081111561051457600080fd5b82018360208201111561052657600080fd5b8035906020019184602083028401116401000000008311171561054857600080fd5b91939092909160208101903564010000000081111561056657600080fd5b82018360208201111561057857600080fd5b8035906020019184602083028401116401000000008311171561059a57600080fd5b509092509050610f37565b610412611013565b610269600480360360408110156105c357600080fd5b5080356001600160a01b0316906020013560ff16611022565b6102b7600480360360208110156105f257600080fd5b50356110e5565b6102b76004803603602081101561060f57600080fd5b50356110f2565b6104126110ff565b6102696004803603602081101561063457600080fd5b50356001600160a01b0316611123565b6104126111d3565b6102696004803603602081101561066257600080fd5b50356111e2565b6102b7611373565b6102b7611400565b6102696004803603602081101561068f57600080fd5b50351515611479565b6102b761152a565b610269600480360360608110156106b657600080fd5b506001600160a01b038135811691602081013590911690604001356115c2565b610269600480360360608110156106ec57600080fd5b506001600160a01b0381358116916020810135909116906040013561168c565b6102696004803603602081101561072257600080fd5b5035611783565b6102696004803603602081101561073f57600080fd5b50356001600160a01b0316611928565b610412611a3c565b6002546001600160a01b0316156107cb57600260009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107b857600080fd5b505af19250505080156107c9575060015b505b565b6001546001600160a01b031633146108165760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663232798df83836040518363ffffffff1660e01b815260040180836001600160a01b031681526020018260ff16815260200192505050600060405180830381600087803b15801561089057600080fd5b505af11580156108a4573d6000803e3d6000fd5b505050505050565b600381815481106108b957fe5b600091825260209091200154905081565b6001546001600160a01b031633146109135760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338d2776e826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b5050505050565b61099e611a4b565b6001600160a01b03166109af611013565b6001600160a01b031614610a0a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6107c981611a4f565b600581815481106108b957fe5b6001546001600160a01b03163314610a695760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b828114610aa75760405162461bcd60e51b81526004018080602001828103825260278152602001806128436027913960400191505060405180910390fd5b610ae3848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611aec92505050565b610aef600385856127e2565b5061098f600483836127e2565b6001546001600160a01b03163314610b455760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1ea1fa3826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561097b57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b03163314610c185760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b0316610c51611a4b565b6001600160a01b03161490505b90565b6001546001600160a01b03163314610caa5760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e1ea1fa3826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561097b57600080fd5b6001546001600160a01b031690565b600760209081526000928352604080842090915290825290205481565b61271081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600254604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152670de0b6b3a7640000602483015291516000939290921691636808a12891604480820192602092909190829003018186803b158015610dfe57600080fd5b505afa925050508015610e2357506040513d6020811015610e1e57600080fd5b505160015b610e5e5760405162461bcd60e51b815260040180806020018281038252603281526020018061290c6032913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff169050610c5e565b610e81611a4b565b6001600160a01b0316610e92611013565b6001600160a01b031614610eed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001546001600160a01b03163314610f805760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b828114610fbe5760405162461bcd60e51b81526004018080602001828103825260278152602001806128436027913960400191505060405180910390fd5b610ffa848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611aec92505050565b611006600585856127e2565b5061098f600683836127e2565b6000546001600160a01b031690565b6001546001600160a01b0316331461106b5760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663232798df83836040518363ffffffff1660e01b815260040180836001600160a01b031681526020018260ff16815260200192505050600060405180830381600087803b15801561089057600080fd5b600481815481106108b957fe5b600681815481106108b957fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b0316331461116c5760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b6001600160a01b0381166111b15760405162461bcd60e51b815260040180806020018281038252602981526020018061286a6029913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611231575061121c610d10565b6001600160a01b0316336001600160a01b0316145b61126c5760405162461bcd60e51b81526004018080602001828103825260298152602001806129836029913960400191505060405180910390fd5b6000611284606461127e846050611c07565b90611c69565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b5050505060006113198284611cd090919063ffffffff16565b9050611366817f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d2d565b61136e610757565b505050565b60008061137e610d66565b905060006113dc60058054806020026020016040519081016040528092919081815260200182805480156113d157602002820191906000526020600020905b8154815260200190600101908083116113bd575b505050505083611fec565b905060068160ff16815481106113ee57fe5b90600052602060002001549250505090565b60008061140b610d66565b9050600061146760038054806020026020016040519081016040528092919081815260200182805480156113d157602002820191906000526020600020908154815260200190600101908083116113bd57505050505083611fec565b905060048160ff16815481106113ee57fe5b6001546001600160a01b031633146114c25760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338d2776e826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561097b57600080fd5b600254604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152670de0b6b3a7640000602483015291516000939290921691633ddac95391604480820192602092909190829003018186803b158015610dfe57600080fd5b6001546001600160a01b0316331461160b5760405162461bcd60e51b815260040180806020018281038252602481526020018061295f6024913960400191505060405180910390fd5b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561166257600080fd5b505af1158015611676573d6000803e3d6000fd5b505050506040513d602081101561098f57600080fd5b611694611a4b565b6001600160a01b03166116a5611013565b6001600160a01b031614611700576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b612710811115611757576040805162461bcd60e51b815260206004820152601e60248201527f4572726f723a20446973636f756e74207261746520746f6f20686967682e0000604482015290519081900360640190fd5b6001600160a01b0392831660009081526007602090815260408083209490951682529290925291902055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806117d257506117bd610d10565b6001600160a01b0316336001600160a01b0316145b61180d5760405162461bcd60e51b81526004018080602001828103825260298152602001806129836029913960400191505060405180910390fd5b60006118216103e861127e84610320611c07565b9050600061182f8383611cd0565b905061189d827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612037565b6118e8817f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d2d565b6118f0610757565b6040805184815290517f254b3311b04550bb196e4bb4037b828129988892e707804f06d72089a6ecf69a9181900360200190a1505050565b611930611a4b565b6001600160a01b0316611941611013565b6001600160a01b03161461199c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166119e15760405162461bcd60e51b81526004018080602001828103825260268152602001806128936026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031681565b3390565b6001600160a01b038116611a945760405162461bcd60e51b815260040180806020018281038252602d8152602001806128df602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b8051600090611afc906001611cd0565b905060005b8160ff168160ff161161136e5760ff811615611b8457826001820360ff1681518110611b2957fe5b6020026020010151838260ff1681518110611b4057fe5b602002602001015111611b845760405162461bcd60e51b815260040180806020018281038252602c8152602001806129ac602c913960400191505060405180910390fd5b8160ff168160ff161015611bff57828160010160ff1681518110611ba457fe5b6020026020010151838260ff1681518110611bbb57fe5b602002602001015110611bff5760405162461bcd60e51b815260040180806020018281038252602c8152602001806129ac602c913960400191505060405180910390fd5b600101611b01565b600082611c1657506000611c63565b82820282848281611c2357fe5b0414611c605760405162461bcd60e51b815260040180806020018281038252602181526020018061293e6021913960400191505060405180910390fd5b90505b92915050565b6000808211611cbf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611cc857fe5b049392505050565b600082821115611d27576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b5051905080841115611db6578093505b60408051600280825260608083018452926020830190803683370190505090508381600081518110611de457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611e1257fe5b6001600160a01b039283166020918202929092010152600854611e38918691168761234c565b600854611e509084906001600160a01b03168761234c565b6008546040517f38ed1739000000000000000000000000000000000000000000000000000000008152600481018781526000602483018190523060648401819052602842016084850181905260a060448601908152875160a487015287516001600160a01b03909716966338ed1739968d968a9594939092909160c40190602080880191028083838b5b83811015611ef2578181015183820152602001611eda565b505050509050019650505050505050600060405180830381600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611f5857600080fd5b8101908080516040519392919084640100000000821115611f7857600080fd5b908301906020820185811115611f8d57600080fd5b8251866020820283011164010000000082111715611faa57600080fd5b82525081516020918201928201910280838360005b83811015611fd7578181015183820152602001611fbf565b50505050905001604052505050505050505050565b60008061200460018551611cd090919063ffffffff16565b9050805b848160ff168151811061201757fe5b6020026020010151841061202e579150611c639050565b60001901612008565b60408051600380825260808201909252606091602082018380368337019050509050838160008151811061206757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061209557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106120c357fe5b6001600160a01b0392831660209182029290920101526008546120e9918691168761234c565b6008546121019084906001600160a01b03168761234c565b6008546121199083906001600160a01b03168761234c565b6060600860009054906101000a90046001600160a01b03166001600160a01b03166338ed17398760008530426028016040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156121b85781810151838201526020016121a0565b505050509050019650505050505050600060405180830381600087803b1580156121e157600080fd5b505af11580156121f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561221e57600080fd5b810190808051604051939291908464010000000082111561223e57600080fd5b90830190602082018581111561225357600080fd5b825186602082028301116401000000008211171561227057600080fd5b82525081516020918201928201910280838360005b8381101561229d578181015183820152602001612285565b5050505090500160405250505090506000816002815181106122bb57fe5b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561232b57600080fd5b505af115801561233f573d6000803e3d6000fd5b5050505050505050505050565b60408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d60208110156123c657600080fd5b5051101561136e5761136e6001600160a01b0384168360001960408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561242f57600080fd5b505afa158015612443573d6000803e3d6000fd5b505050506040513d602081101561245957600080fd5b5051156124975760405162461bcd60e51b8152600401808060200182810382526036815260200180612a026036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261136e9084906060612567826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125c39092919063ffffffff16565b80519091501561136e5780806020019051602081101561258657600080fd5b505161136e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806129d8602a913960400191505060405180910390fd5b60606125d284846000856125dc565b90505b9392505050565b60608247101561261d5760405162461bcd60e51b81526004018080602001828103825260268152602001806128b96026913960400191505060405180910390fd5b61262685612738565b612677576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106126b65780518252601f199092019160209182019101612697565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612718576040519150601f19603f3d011682016040523d82523d6000602084013e61271d565b606091505b509150915061272d82828661273e565b979650505050505050565b3b151590565b6060831561274d5750816125d5565b82511561275d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127a757818101518382015260200161278f565b50505050905090810190601f1680156127d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090810192821561281d579160200282015b8281111561281d578235825591602001919060010190612802565b5061282992915061282d565b5090565b5b80821115612829576000815560010161282e56fe4572726f723a20766563746f72206c656e6774687320617265206e6f74207468652073616d652e4572726f723a204f7261636c6520616464726573732063616e6e6f74206265203020616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c6f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f724572726f3a206661696c656420746f206665746368204d61696e20546f6b656e2070726963652066726f6d204f7261636c65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f724572726f723a205769746864726177207065726d697373696f6e7320696e73756666696369656e742e4572726f723a20545741502074696572732073657175656e636520617265206e6f74206d6f6e6f746f6e69635361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220683c38eae16f9463457b99b82d04681e97c6e88cf853397a42ea3731242a070c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13705,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "_operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9813,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "mainTokenOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOracle)14082"
      },
      {
        "astId": 9834,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "mainTokenTaxTwapTiers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9852,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "mainTokenTaxRateTiers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9870,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "shareTokenTaxTwapTiers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9888,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "shareTokenTaxRateTiers",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9894,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "taxDiscount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10418,
        "contract": "contracts/TaxOffice.sol:TaxOfficeV3",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IOracle)14082": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}