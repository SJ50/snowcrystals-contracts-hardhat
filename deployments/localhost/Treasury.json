{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "BoardroomFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BurnedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DaoFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DevFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boardroom",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "boardroomAllocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "boardroomGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "boardroomSetLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "boardroomSetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepletionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_snowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "buyBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSupplyContractionLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedFromTotalSupply",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expansionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixedExpansion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnableSnowLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burnableSnowLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemableBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeemableBonds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnowCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "snowPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnowUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_snowPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glcr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "glcrGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sBond",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_glcr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_taxOffice",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_excludedFromTotalSupply",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtRatioPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxExpansionTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyContractionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minExpansion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFactorForPayingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousEpochSnowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageExpansionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageSaved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        }
      ],
      "name": "setBoardroom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondDepletionFloorPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondDepletionFloorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bootstrapEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrapSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountPercent",
          "type": "uint256"
        }
      ],
      "name": "setDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setExpansionFactor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devFundSharedPercent",
          "type": "uint256"
        }
      ],
      "name": "setExtraFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setFixedExpansion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taxOffice",
          "type": "address"
        }
      ],
      "name": "setGlcrTaxOffice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtRatioPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtRatioPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDiscountRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpansionTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPremiumRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxPremiumRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyContractionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyContractionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyExpansionPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMinExpansion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFactorForPayingDebt",
          "type": "uint256"
        }
      ],
      "name": "setMintingFactorForPayingDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumPercent",
          "type": "uint256"
        }
      ],
      "name": "setPremiumPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPremiumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_snowPriceCeiling",
          "type": "uint256"
        }
      ],
      "name": "setSnowPriceCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taxOffice",
          "type": "address"
        }
      ],
      "name": "setSnowTaxOffice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setSupplyTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taxOffice",
          "type": "address"
        }
      ],
      "name": "setTaxOffice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "snowGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snowPriceCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snowPriceOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxOffice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a797225a17e633747593452b10b0e2fc4bb344537c77f3178a9d9621ee51369",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "4605063",
    "logsBloom": "0x
    "blockHash": "0x5b04912a8c414a69d202049fb2c46450a7282006b018fd85d2088151257d78b4",
    "transactionHash": "0x6a797225a17e633747593452b10b0e2fc4bb344537c77f3178a9d9621ee51369",
    "logs": [],
    "blockNumber": 5279372,
    "cumulativeGasUsed": "4605063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73395350a0819fb65c5145526fa0b4d9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boardroomAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boardroomGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"boardroomSetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"boardroomSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedExpansion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableSnowLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableSnowLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnowCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snowPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnowUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_snowPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glcr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"glcrGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sBond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glcr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_taxOffice\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_excludedFromTotalSupply\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExpansion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochSnowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setExpansionFactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFixedExpansion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxOffice\",\"type\":\"address\"}],\"name\":\"setGlcrTaxOffice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinExpansion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snowPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setSnowPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxOffice\",\"type\":\"address\"}],\"name\":\"setSnowTaxOffice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxOffice\",\"type\":\"address\"}],\"name\":\"setTaxOffice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"snowGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snowPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snowPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxOffice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"boardroomSetOperator(address)\":{\"notice\":\"Boardroom governance*\"},\"setSnowTaxOffice(address)\":{\"notice\":\"Snow token contract governance*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./access/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\n\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\nimport \\\"./interfaces/ITaxOffice.sol\\\";\\n\\n/*\\n    https://snowcrystals.finance\\n*/\\ncontract Treasury is ContractGuard, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply;\\n\\n    // core components\\n    address public snow;\\n    address public sBond;\\n    address public glcr;\\n\\n    address public boardroom;\\n    address public oracle;\\n\\n    // price\\n    uint256 public snowPriceOne;\\n    uint256 public snowPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochSnowPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra Snow during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address private devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    /* =================== Added variables =================== */\\n\\n    address public taxOffice;\\n\\n    uint256 public minExpansion;\\n    uint256 public fixedExpansion;\\n    uint256 public expansionFactor;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(\\n        address indexed from,\\n        uint256 snowAmount,\\n        uint256 bondAmount\\n    );\\n    event BoughtBonds(\\n        address indexed from,\\n        uint256 snowAmount,\\n        uint256 bondAmount\\n    );\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition() {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getSnowPrice() > snowPriceCeiling)\\n            ? 0\\n            : getSnowCirculatingSupply().mul(maxSupplyContractionPercent).div(\\n                10000\\n            );\\n    }\\n\\n    modifier checkOperator() {\\n        require(\\n            IERC20Taxable(snow).operator() == address(this) &&\\n                IERC20Taxable(sBond).operator() == address(this) &&\\n                IERC20Taxable(glcr).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getSnowPrice() public view returns (uint256 snowPrice) {\\n        try IOracle(oracle).consult(snow, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult SNOW price from the oracle\\\");\\n        }\\n    }\\n\\n    function getSnowUpdatedPrice() public view returns (uint256 _snowPrice) {\\n        try IOracle(oracle).twap(snow, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult Snow price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableSnowLeft()\\n        public\\n        view\\n        returns (uint256 _burnableSnowLeft)\\n    {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice <= snowPriceOne) {\\n            uint256 _snowSupply = getSnowCirculatingSupply();\\n            uint256 _bondMaxSupply = _snowSupply.mul(maxDebtRatioPercent).div(\\n                10000\\n            );\\n            uint256 _bondSupply = IERC20(sBond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableSnow = _maxMintableBond.mul(_snowPrice).div(\\n                    1e18\\n                );\\n                _burnableSnowLeft = Math.min(\\n                    epochSupplyContractionLeft,\\n                    _maxBurnableSnow\\n                );\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds()\\n        public\\n        view\\n        returns (uint256 _redeemableBonds)\\n    {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice > snowPriceCeiling) {\\n            uint256 _totalSnow = IERC20(snow).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalSnow.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice <= snowPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = snowPriceOne;\\n            } else {\\n                uint256 _bondAmount = snowPriceOne.mul(1e18).div(_snowPrice); // to burn 1 Snow\\n                uint256 _discountAmount = _bondAmount\\n                    .sub(snowPriceOne)\\n                    .mul(discountPercent)\\n                    .div(10000);\\n                _rate = snowPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _snowPrice = getSnowPrice();\\n        if (_snowPrice > snowPriceCeiling) {\\n            uint256 _snowPricePremiumThreshold = snowPriceOne\\n                .mul(premiumThreshold)\\n                .div(100);\\n            if (_snowPrice >= _snowPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _snowPrice\\n                    .sub(snowPriceOne)\\n                    .mul(premiumPercent)\\n                    .div(10000);\\n                _rate = snowPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = snowPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _snow,\\n        address _sBond,\\n        address _glcr,\\n        address _oracle,\\n        address _boardroom,\\n        uint256 _startTime,\\n        address _taxOffice,\\n        address[] memory _excludedFromTotalSupply\\n    ) public notInitialized {\\n        snow = _snow;\\n        sBond = _sBond;\\n        glcr = _glcr;\\n        oracle = _oracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        taxOffice = _taxOffice;\\n        excludedFromTotalSupply = _excludedFromTotalSupply;\\n\\n        snowPriceOne = 10**17; // This is to allow a PEG of 10 Snow per USDC\\n        snowPriceCeiling = snowPriceOne.mul(101).div(100);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [\\n            0 ether,\\n            500_000 ether,\\n            2_000_000 ether,\\n            4_000_000 ether,\\n            8_000_000 ether,\\n            20_000_000 ether\\n        ];\\n        maxExpansionTiers = [300, 250, 200, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn Snow and mint BondToken)\\n        maxDebtRatioPercent = 4000; // Upto 40% supply of BOND to purchase\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 28 epochs with 4% expansion\\n        bootstrapEpochs = 28;\\n        bootstrapSupplyExpansionPercent = 400;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(snow).balanceOf(address(this));\\n\\n        minExpansion = 10**16;\\n        expansionFactor = 150;\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOperator {\\n        oracle = _oracle;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) external onlyOperator {\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setSnowPriceCeiling(uint256 _snowPriceCeiling)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _snowPriceCeiling >= snowPriceOne &&\\n                _snowPriceCeiling <= snowPriceOne.mul(120).div(100),\\n            \\\"out of range\\\"\\n        ); // [$0.1, $0.12]\\n        snowPriceCeiling = _snowPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _maxSupplyExpansionPercent >= 10 &&\\n                _maxSupplyExpansionPercent <= 1000,\\n            \\\"_maxSupplyExpansionPercent: out of range\\\"\\n        ); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < supplyTiers.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < supplyTiers.length - 1) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(\\n            _index < maxExpansionTiers.length,\\n            \\\"Index has to be lower than count of tiers\\\"\\n        );\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMinExpansion(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        minExpansion = _value;\\n        return true;\\n    }\\n\\n    function setFixedExpansion(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        fixedExpansion = _value;\\n        return true;\\n    }\\n\\n    function setExpansionFactor(uint256 _value)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        expansionFactor = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _bondDepletionFloorPercent >= 500 &&\\n                _bondDepletionFloorPercent <= 10000,\\n            \\\"out of range\\\"\\n        ); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(\\n        uint256 _maxSupplyContractionPercent\\n    ) external onlyOperator {\\n        require(\\n            _maxSupplyContractionPercent >= 100 &&\\n                _maxSupplyContractionPercent <= 1500,\\n            \\\"out of range\\\"\\n        ); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000,\\n            \\\"out of range\\\"\\n        ); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(\\n        uint256 _bootstrapEpochs,\\n        uint256 _bootstrapSupplyExpansionPercent\\n    ) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(\\n            _bootstrapSupplyExpansionPercent >= 100 &&\\n                _bootstrapSupplyExpansionPercent <= 1000,\\n            \\\"_bootstrapSupplyExpansionPercent: out of range\\\"\\n        ); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate)\\n        external\\n        onlyOperator\\n    {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent)\\n        external\\n        onlyOperator\\n    {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _premiumThreshold >= snowPriceCeiling,\\n            \\\"_premiumThreshold exceeds snowPriceCeiling\\\"\\n        );\\n        require(\\n            _premiumThreshold <= 150,\\n            \\\"_premiumThreshold is higher than 1.5\\\"\\n        );\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _mintingFactorForPayingDebt >= 10000 &&\\n                _mintingFactorForPayingDebt <= 20000,\\n            \\\"_mintingFactorForPayingDebt: out of range\\\"\\n        ); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateSnowPrice() internal {\\n        try IOracle(oracle).update() {} catch {}\\n    }\\n\\n    function getSnowCirculatingSupply() public view returns (uint256) {\\n        IERC20 snowErc20 = IERC20(snow);\\n        uint256 totalSupply = snowErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (\\n            uint8 entryId = 0;\\n            entryId < excludedFromTotalSupply.length;\\n            ++entryId\\n        ) {\\n            balanceExcluded = balanceExcluded.add(\\n                snowErc20.balanceOf(excludedFromTotalSupply[entryId])\\n            );\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _snowAmount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkOperator\\n        nonReentrant\\n    {\\n        require(\\n            _snowAmount > 0,\\n            \\\"Treasury: cannot purchase bonds with zero amount\\\"\\n        );\\n\\n        uint256 snowPrice = getSnowPrice();\\n        require(snowPrice == targetPrice, \\\"Treasury: Snow price moved\\\");\\n        require(\\n            snowPrice < snowPriceOne, // price < $0.1\\n            \\\"Treasury: snowPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(\\n            _snowAmount <= epochSupplyContractionLeft,\\n            \\\"Treasury: not enough bond left to purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _snowAmount.mul(_rate).div(1e18);\\n        uint256 snowSupply = getSnowCirculatingSupply();\\n        uint256 newBondSupply = IERC20(sBond).totalSupply().add(_bondAmount);\\n        require(\\n            newBondSupply <= snowSupply.mul(maxDebtRatioPercent).div(10000),\\n            \\\"over max debt ratio\\\"\\n        );\\n\\n        IERC20Taxable(snow).burnFrom(msg.sender, _snowAmount);\\n        IERC20Taxable(sBond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(\\n            _snowAmount\\n        );\\n        _updateSnowPrice();\\n\\n        emit BoughtBonds(msg.sender, _snowAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkOperator\\n        nonReentrant\\n    {\\n        require(\\n            _bondAmount > 0,\\n            \\\"Treasury: cannot redeem bonds with zero amount\\\"\\n        );\\n\\n        uint256 snowPrice = getSnowPrice();\\n        require(snowPrice == targetPrice, \\\"Treasury: Snow price moved\\\");\\n        require(\\n            snowPrice > snowPriceCeiling, // price > $0.101\\n            \\\"Treasury: snowPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _snowAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(\\n            IERC20(snow).balanceOf(address(this)) >= _snowAmount,\\n            \\\"Treasury: treasury has no more budget\\\"\\n        );\\n\\n        seigniorageSaved = seigniorageSaved.sub(\\n            Math.min(seigniorageSaved, _snowAmount)\\n        );\\n\\n        IERC20Taxable(sBond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(snow).safeTransfer(msg.sender, _snowAmount);\\n\\n        _updateSnowPrice();\\n\\n        emit RedeemedBonds(msg.sender, _snowAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IERC20Taxable(snow).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(snow).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(snow).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(snow).safeIncreaseAllowance(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _snowSupply)\\n        internal\\n        returns (uint256)\\n    {\\n        for (\\n            uint8 tierId = uint8(supplyTiers.length - 1);\\n            tierId >= 0;\\n            --tierId\\n        ) {\\n            if (_snowSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function getExpansionPercent() public view returns (uint256) {\\n        uint256 prevEpochSnowPrice = getSnowPrice();\\n        uint256 _percentage = prevEpochSnowPrice.sub(snowPriceOne);\\n        uint256 _mse = maxSupplyExpansionPercent.mul(1e14);\\n\\n        if (fixedExpansion != 0) {\\n            return fixedExpansion;\\n        }\\n\\n        if (expansionFactor != 0) {\\n            _percentage = _percentage.mul(expansionFactor).div(10000);\\n        }\\n\\n        if (minExpansion > _percentage) {\\n            _percentage = minExpansion;\\n        }\\n\\n        if (_percentage > _mse) {\\n            _percentage = _mse;\\n        }\\n\\n        return _percentage;\\n    }\\n\\n    function allocateSeigniorage()\\n        external\\n        onlyOneBlock\\n        checkCondition\\n        checkEpoch\\n        checkOperator\\n        nonReentrant\\n    {\\n        _updateSnowPrice();\\n        previousEpochSnowPrice = getSnowPrice();\\n        uint256 snowSupply = getSnowCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 20 first epochs with 4% expansion\\n            _sendToBoardroom(\\n                snowSupply.mul(bootstrapSupplyExpansionPercent).div(10000)\\n            );\\n        } else {\\n            if (previousEpochSnowPrice > snowPriceCeiling) {\\n                // Expansion (Snow Price > 0.1 $USDC): there is some seigniorage to be allocated\\n                _calculateMaxSupplyExpansionPercent(snowSupply);\\n                uint256 bondSupply = IERC20(sBond).totalSupply();\\n                uint256 _percentage = getExpansionPercent();\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n\\n                if (\\n                    seigniorageSaved >=\\n                    bondSupply.mul(bondDepletionFloorPercent).div(10000)\\n                ) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = snowSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = snowSupply.mul(_percentage).div(\\n                        1e18\\n                    );\\n                    _savedForBoardroom = _seigniorage\\n                        .mul(seigniorageExpansionFloorPercent)\\n                        .div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond\\n                            .mul(mintingFactorForPayingDebt)\\n                            .div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IERC20Taxable(snow).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n        ITaxOffice(taxOffice).sendToBonus(\\n            previousEpochSnowPrice,\\n            snowPriceCeiling,\\n            nextEpochPoint()\\n        );\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(snow), \\\"snow\\\");\\n        require(address(_token) != address(sBond), \\\"bond\\\");\\n        require(address(_token) != address(glcr), \\\"share\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /** \\n    Boardroom governance\\n    **/\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(\\n        uint256 _withdrawLockupEpochs,\\n        uint256 _rewardLockupEpochs\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(\\n            _withdrawLockupEpochs,\\n            _rewardLockupEpochs\\n        );\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount)\\n        external\\n        onlyOperator\\n    {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(\\n            _token,\\n            _amount,\\n            _to\\n        );\\n    }\\n\\n    /** \\n    Snow token contract governance\\n    **/\\n    function setSnowTaxOffice(address _taxOffice) external onlyOperator {\\n        IERC20Taxable(snow).setTaxOffice(_taxOffice);\\n    }\\n\\n    function setGlcrTaxOffice(address _taxOffice) external onlyOperator {\\n        IERC20Taxable(glcr).setTaxOffice(_taxOffice);\\n    }\\n\\n    function snowGovernanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IERC20Taxable(snow).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n\\n    function glcrGovernanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IERC20Taxable(glcr).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x41744c36cd5e67258f4f2b2b18cf3a3028cb3bd041ece3306795fb124df4f07c\",\"license\":\"MIT\"},\"contracts/access/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            \\\"operator: zero address given for new operator\\\"\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0xb5055492468980c849d82c7f7a2de99c566b3b028f45112bffc0a1c8c697d831\",\"license\":\"MIT\"},\"contracts/interfaces/IBoardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _member) external view returns (uint256);\\n\\n    function earned(address _member) external view returns (uint256);\\n\\n    function canWithdraw(address _member) external view returns (bool);\\n\\n    function canClaimReward(address _member) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getBombPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(\\n        uint256 _withdrawLockupEpochs,\\n        uint256 _rewardLockupEpochs\\n    ) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3553f3bb9eb86ede72a41ff063c55f5105d9f8a816d93d5cd16d69e5f8a85081\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Taxable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Taxable is IERC20 {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n\\n    function taxOffice() external returns (address);\\n\\n    function staticTaxRate() external returns (uint256);\\n\\n    function dynamicTaxRate() external returns (uint256);\\n\\n    function getCurrentTaxRate() external returns (uint256);\\n\\n    function setTaxOffice(address _taxOffice) external;\\n\\n    function setStaticTaxRate(uint256 _taxRate) external;\\n\\n    function setEnableDynamicTax(bool _enableDynamicTax) external;\\n\\n    function setWhitelistType(address _token, uint8 _type) external;\\n\\n    function isWhitelistedSender(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function isWhitelistedRecipient(address _account)\\n        external\\n        view\\n        returns (bool isWhitelisted);\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x21917e4e69d32bc4b911a39183a8f294a9be5c7964f8dae4a7f09140568a7d66\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn)\\n        external\\n        view\\n        returns (uint144 _amountOut);\\n\\n    function getPegPrice() external view returns (int256);\\n\\n    function getPegPriceUpdated() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xce39bb65a60e7389e03a64b79a6000b96cb40b9145ddf013d729f9a0a467d366\",\"license\":\"MIT\"},\"contracts/interfaces/ITaxOffice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITaxOffice {\\n    function setMainTokenOracle(address _mainTokenOracle) external;\\n\\n    function setMainTokenTaxTiers(\\n        uint256[] calldata _mainTokenTaxTwapTiers,\\n        uint256[] calldata _mainTokenTaxRateTiers\\n    ) external;\\n\\n    function setShareTokenTaxTiers(\\n        uint256[] calldata _shareTokenTaxTwapTiers,\\n        uint256[] calldata _shareTokenTaxRateTiers\\n    ) external;\\n\\n    function calculateMainTokenTax() external view returns (uint256 taxRate);\\n\\n    function calculateShareTokenTax() external view returns (uint256 taxRate);\\n\\n    function handleMainTokenTax(uint256 _amount) external;\\n\\n    function handleShareTokenTax(uint256 _amount) external;\\n\\n    function taxDiscount(address _sender, address _recipient)\\n        external\\n        returns (uint256);\\n\\n    function updateMainTokenPrice() external;\\n\\n    function sendToBonus(\\n        uint256 _price,\\n        uint256 _ceilingPrice,\\n        uint256 _nextEpochPoint\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9dd8a1d2c9daf5b7e9fb8063a4bf40c2728b238586a330357da4e0739655094b\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(\\n            !checkSameOriginReentranted(),\\n            \\\"ContractGuard: one block, one function\\\"\\n        );\\n        require(\\n            !checkSameSenderReentranted(),\\n            \\\"ContractGuard: one block, one function\\\"\\n        );\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xf35d8f34f1c95174612a5f01ce662a4aedff5a5d84aadd004989ef47ebc5474c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff60a01b191690556000600481905560055534801561002757600080fd5b50600180556151db8061003b6000396000f3fe608060405234801561001057600080fd5b50600436106105ac5760003560e01c80637adbf973116102ed578063b3a110ae11610191578063c8f987f3116100ee578063dae5ca21116100a2578063f14698de1161007c578063f14698de14610d1b578063f8cd4d7214610d23578063fcb6f00814610d46576105ac565b8063dae5ca2114610ce5578063e8f8768c14610ced578063e90b245414610d13576105ac565b8063d4b14944116100d3578063d4b1494414610caf578063d98f249514610cd5578063da3ed41914610cdd576105ac565b8063c8f987f314610c8a578063cecce38e14610c92576105ac565b8063b8a878f911610145578063bcc81f191161012a578063bcc81f1914610c40578063c5967c2614610c7a578063c8412d0214610c82576105ac565b8063b8a878f914610c12578063ba9d8fc214610c1a576105ac565b8063b3ffc77711610176578063b3ffc77714610bc7578063b4d1d79514610bed578063b5a4590214610bf5576105ac565b8063b3a110ae14610abe578063b3ab15fb14610ba1576105ac565b806391bbfed51161024a578063a0487eea116101fe578063af0e872a116101d8578063af0e872a14610a73578063b06ce14a14610a7b578063b219ad7d14610aa1576105ac565b8063a0487eea14610a03578063a204452b14610a20578063a3ec30fe14610a3d576105ac565b806398b762a11161022f57806398b762a1146109c157806399820025146109de5780639cf74525146109fb576105ac565b806391bbfed514610978578063940e60641461099b576105ac565b8063874106cc116102a15780638c664db6116102865780638c664db61461094b5780638d934f7414610968578063900cf0cf14610970576105ac565b8063874106cc1461090d5780638c42e08914610915576105ac565b8063812ec15a116102d2578063812ec15a146108e057806381d11eaf146108e857806382cad838146108f0576105ac565b80637adbf973146108b25780637dc0d1d0146108d8576105ac565b806340af7ba511610454578063591663e1116103b1578063670e0cdd1161036557806372c054f91161033f57806372c054f91461089a578063766b5846146108a257806378e97925146108aa576105ac565b8063670e0cdd14610854578063692b6edf1461085c5780636ed435ad14610892576105ac565b80635a0fc79c116103965780635a0fc79c1461083c5780635b756179146108445780635e02c51e1461084c576105ac565b8063591663e11461081757806359bf5d3914610834576105ac565b806354575af41161040857806355ebdeef116103ed57806355ebdeef146107ff578063570ca7351461080757806357eaf54f1461080f576105ac565b806354575af4146107a657806354f04a11146107dc576105ac565b8063499f3f1911610439578063499f3f19146107795780634a5b94b8146107965780634b102fb01461079e576105ac565b806340af7ba51461073f57806347a0fd4d1461075c576105ac565b80631dfa243c1161050d578063381ce143116104c15780633e5f13d41161049b5780633e5f13d4146107095780633f07d76a146107115780634013a08e14610737576105ac565b8063381ce143146106dc578063392e53cd146106f95780633a2b962614610701576105ac565b806329ef1919116104f257806329ef1919146106c45780632e9c7b65146106cc578063367384ef146106d4576105ac565b80631dfa243c146106b457806322f832cd146106bc576105ac565b80630db7eb0b11610564578063154ec2db11610549578063154ec2db14610657578063158ef93e146106745780631cc9092a14610690576105ac565b80630db7eb0b1461062c578063118ebbf914610634576105ac565b806304e5c7b11161059557806304e5c7b1146105ea5780630b5bcec7146106075780630cf6017514610624576105ac565b806301a93783146105b157806303be7e76146105d0575b600080fd5b6105ce600480360360208110156105c757600080fd5b5035610d4e565b005b6105d8610dff565b60408051918252519081900360200190f35b6105ce6004803603602081101561060057600080fd5b5035610e05565b6105ce6004803603602081101561061d57600080fd5b5035610ed4565b6105d8610f70565b6105d8611022565b6105ce6004803603604081101561064a57600080fd5b50803590602001356110c4565b6105ce6004803603602081101561066d57600080fd5b5035611780565b61067c611825565b604080519115158252519081900360200190f35b610698611835565b604080516001600160a01b039092168252519081900360200190f35b6105d8611844565b6105d86119a5565b6105d86119ab565b6105d86119b1565b6105d86119b7565b61067c600480360360208110156106f257600080fd5b5035611aad565b61067c611b02565b610698611b12565b610698611b21565b6105ce6004803603602081101561072757600080fd5b50356001600160a01b0316611b30565b6105d8611b9b565b6105ce6004803603602081101561075557600080fd5b5035611ba1565b61067c6004803603602081101561077257600080fd5b5035611c46565b6105ce6004803603602081101561078f57600080fd5b5035611c9b565b6105d8611d38565b610698611d3e565b6105ce600480360360608110156107bc57600080fd5b506001600160a01b03813581169160208101359160409091013516611d4d565b6105ce600480360360408110156107f257600080fd5b5080359060200135611edc565b6105d8612684565b61069861268a565b6105d8612699565b6105ce6004803603602081101561082d57600080fd5b503561273e565b6105d86127e0565b6105d86127e6565b6105ce6127ec565b610698612f61565b6105d8612f70565b6105ce6004803603606081101561087257600080fd5b506001600160a01b03813581169160208101359160409091013516612f76565b6105d8613039565b6105d861303f565b6105d86130f7565b6105d86131fe565b6105ce600480360360208110156108c857600080fd5b50356001600160a01b0316613204565b61069861326f565b6105d861327e565b6105d8613359565b6106986004803603602081101561090657600080fd5b503561335f565b6105d8613386565b6105ce6004803603606081101561092b57600080fd5b506001600160a01b0381358116916020810135916040909101351661338c565b6105ce6004803603602081101561096157600080fd5b5035613432565b6106986134d4565b6105d86134e3565b6105ce6004803603604081101561098e57600080fd5b50803590602001356134e9565b61067c600480360360408110156109b157600080fd5b5060ff81351690602001356135e1565b6105ce600480360360208110156109d757600080fd5b5035613703565b6105d8600480360360208110156109f457600080fd5b5035613751565b6105d861376f565b6105d860048036036020811015610a1957600080fd5b5035613775565b6105ce60048036036020811015610a3657600080fd5b5035613782565b6105ce60048036036060811015610a5357600080fd5b506001600160a01b038135811691602081013591604090910135166137d0565b6105d8613876565b6105ce60048036036020811015610a9157600080fd5b50356001600160a01b031661387c565b61067c60048036036020811015610ab757600080fd5b503561392c565b6105ce6004803603610100811015610ad557600080fd5b6001600160a01b038235811692602081013582169260408201358316926060830135811692608081013582169260a08201359260c0830135169190810190610100810160e0820135640100000000811115610b2f57600080fd5b820183602082011115610b4157600080fd5b80359060200191846020830284011164010000000083111715610b6357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613981945050505050565b6105ce60048036036020811015610bb757600080fd5b50356001600160a01b0316613c6d565b6105ce60048036036020811015610bdd57600080fd5b50356001600160a01b0316613cd8565b6105d8613d43565b6105ce60048036036020811015610c0b57600080fd5b5035613d49565b6105d8613e03565b6105ce60048036036020811015610c3057600080fd5b50356001600160a01b0316613e09565b6105ce60048036036080811015610c5657600080fd5b506001600160a01b0381358116916020810135916040820135169060600135613ea0565b6105d8614035565b6105d861405f565b6105d8614065565b6105ce60048036036020811015610ca857600080fd5b503561406b565b61067c60048036036040811015610cc557600080fd5b5060ff813516906020013561410c565b6105d8614210565b6105d8614216565b6105d861421c565b6105ce60048036036020811015610d0357600080fd5b50356001600160a01b0316614222565b6105d86142b9565b6105d86142bf565b6105ce60048036036040811015610d3957600080fd5b50803590602001356142c5565b6105d8614397565b6002546001600160a01b03163314610d975760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015610de457600080fd5b505af1158015610df8573d6000803e3d6000fd5b5050505050565b60225481565b6002546001600160a01b03163314610e4e5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600d54811015610e8f5760405162461bcd60e51b815260040180806020018281038252602a815260200180614fc0602a913960400191505060405180910390fd5b6096811115610ecf5760405162461bcd60e51b8152600401808060200182810382526024815260200180614f406024913960400191505060405180910390fd5b601c55565b6002546001600160a01b03163314610f1d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a8110158015610f3057506103e88111155b610f6b5760405162461bcd60e51b81526004018080602001828103825260288152602001806150896028913960400191505060405180910390fd5b601155565b600080610f7b6119b7565b9050600c54811161101e57601b54610f9757600c54915061101e565b6000610fc082610fba670de0b6b3a7640000600c5461439d90919063ffffffff16565b906143fd565b90506000610feb612710610fba601b54610fe5600c548761446490919063ffffffff16565b9061439d565b600c54909150610ffb90826144c1565b93506000601954118015611010575060195484115b1561101b5760195493505b50505b5090565b60008061102d6119b7565b9050600d5481111561101e5760006110576064610fba601c54600c5461439d90919063ffffffff16565b90508082106110b9576000611083612710610fba601d54610fe5600c548861446490919063ffffffff16565b600c5490915061109390826144c1565b93506000601a541180156110a85750601a5484115b156110b357601a5493505b506110bf565b600c5492505b505090565b6110cc61451b565b156111085760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b61111061453a565b1561114c5760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b6003544210156111a3576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d602081101561121157600080fd5b50516001600160a01b031614801561129f57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b50516001600160a01b0316145b801561132157506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156112ea57600080fd5b505afa1580156112fe573d6000803e3d6000fd5b505050506040513d602081101561131457600080fd5b50516001600160a01b0316145b80156113a35750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d602081101561139657600080fd5b50516001600160a01b0316145b6113f4576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6002600154141561144c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558161148d5760405162461bcd60e51b815260040180806020018281038252602e815260200180614edc602e913960400191505060405180910390fd5b60006114976119b7565b90508181146114ed576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20536e6f77207072696365206d6f766564000000000000604482015290519081900360640190fd5b600d54811161152d5760405162461bcd60e51b8152600401808060200182810382526032815260200180614eaa6032913960400191505060405180910390fd5b6000611537611022565b90506000811161158e576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b60006115a6670de0b6b3a7640000610fba878561439d565b600754604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d602081101561162057600080fd5b5051101561165f5760405162461bcd60e51b8152600401808060200182810382526025815260200180614fea6025913960400191505060405180910390fd5b61167761166e600e5483614559565b600e5490614464565b600e556008546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b50506007546116fd92506001600160a01b03169050338361456f565b6117056145d6565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050600180805543600090815260208181526040808320328452909152808220805460ff199081168517909155338352912080549091169091179055505050565b6002546001600160a01b031633146117c95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b614e20811115611820576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601b55565b600254600160a01b900460ff1681565b6009546001600160a01b031681565b600754604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d60208110156118b757600080fd5b505190506000805b60065460ff8216101561199157611987846001600160a01b03166370a0823160068460ff16815481106118ee57fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561195457600080fd5b505afa158015611968573d6000803e3d6000fd5b505050506040513d602081101561197e57600080fd5b505183906144c1565b91506001016118bf565b5061199c8282614464565b93505050505b90565b60135481565b601b5481565b601a5481565b600b54600754604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015611a3257600080fd5b505afa925050508015611a5757506040513d6020811015611a5257600080fd5b505160015b611a925760405162461bcd60e51b8152600401808060200182810382526036815260200180614f8a6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff1690506119a2565b6002546000906001600160a01b03163314611af95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602555600190565b600254600160a01b900460ff1690565b6007546001600160a01b031681565b6023546001600160a01b031681565b6002546001600160a01b03163314611b795760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b602380546001600160a01b0319166001600160a01b0392909216919091179055565b601e5481565b6002546001600160a01b03163314611bea5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b614e20811115611c41576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601d55565b6002546000906001600160a01b03163314611c925760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602455600190565b6002546001600160a01b03163314611ce45760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6127108110158015611cf85750614e208111155b611d335760405162461bcd60e51b81526004018080602001828103825260298152602001806150606029913960400191505060405180910390fd5b601e55565b60245481565b6008546001600160a01b031681565b6002546001600160a01b03163314611d965760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6007546001600160a01b0384811691161415611dfb576040805162461bcd60e51b8152602060048083019190915260248201527f736e6f7700000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611e60576040805162461bcd60e51b8152602060048083019190915260248201527f626f6e6400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6009546001600160a01b0384811691161415611ec3576040805162461bcd60e51b815260206004820152600560248201527f7368617265000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611ed76001600160a01b038416828461456f565b505050565b611ee461451b565b15611f205760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b611f2861453a565b15611f645760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b600354421015611fbb576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611fff57600080fd5b505afa158015612013573d6000803e3d6000fd5b505050506040513d602081101561202957600080fd5b50516001600160a01b03161480156120b757506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d60208110156120aa57600080fd5b50516001600160a01b0316145b801561213957506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561210257600080fd5b505afa158015612116573d6000803e3d6000fd5b505050506040513d602081101561212c57600080fd5b50516001600160a01b0316145b80156121bb5750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561218457600080fd5b505afa158015612198573d6000803e3d6000fd5b505050506040513d60208110156121ae57600080fd5b50516001600160a01b0316145b61220c576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60026001541415612264576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155816122a55760405162461bcd60e51b81526004018080602001828103825260308152602001806150306030913960400191505060405180910390fd5b60006122af6119b7565b9050818114612305576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20536e6f77207072696365206d6f766564000000000000604482015290519081900360640190fd5b600c5481106123455760405162461bcd60e51b8152600401808060200182810382526032815260200180614eaa6032913960400191505060405180910390fd5b6005548311156123865760405162461bcd60e51b815260040180806020018281038252602a81526020018061514e602a913960400191505060405180910390fd5b6000612390610f70565b9050600081116123e7576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b60006123ff670de0b6b3a7640000610fba878561439d565b9050600061240b611844565b9050600061249383600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561246157600080fd5b505afa158015612475573d6000803e3d6000fd5b505050506040513d602081101561248b57600080fd5b5051906144c1565b90506124b0612710610fba6015548561439d90919063ffffffff16565b811115612504576040805162461bcd60e51b815260206004820152601360248201527f6f766572206d6178206465627420726174696f00000000000000000000000000604482015290519081900360640190fd5b6007546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b5050600854604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156125c357600080fd5b505af11580156125d7573d6000803e3d6000fd5b505050506040513d60208110156125ed57600080fd5b50506005546125fc9088614464565b6005556126076145d6565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050600180805543600090815260208181526040808320328452909152808220805460ff1990811685179091553383529120805490911690911790555050505050565b60205481565b6002546001600160a01b031681565b6000806126a46119b7565b905060006126bd600c548361446490919063ffffffff16565b905060006126dc655af3107a400060115461439d90919063ffffffff16565b90506025546000146126f55760255493505050506119a2565b6026541561271b57612718612710610fba6026548561439d90919063ffffffff16565b91505b81602454111561272b5760245491505b80821115612737578091505b5091505090565b6002546001600160a01b031633146127875760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6103e8811015801561279b57506127108111155b6127db576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601555565b600e5490565b600e5481565b6127f461451b565b156128305760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b61283861453a565b156128745760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b6003544210156128cb576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6128d3614035565b421015612927576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561296b57600080fd5b505afa15801561297f573d6000803e3d6000fd5b505050506040513d602081101561299557600080fd5b50516001600160a01b0316148015612a2357506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156129ec57600080fd5b505afa158015612a00573d6000803e3d6000fd5b505050506040513d6020811015612a1657600080fd5b50516001600160a01b0316145b8015612aa557506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612a6e57600080fd5b505afa158015612a82573d6000803e3d6000fd5b505050506040513d6020811015612a9857600080fd5b50516001600160a01b0316145b8015612b275750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612af057600080fd5b505afa158015612b04573d6000803e3d6000fd5b505050506040513d6020811015612b1a57600080fd5b50516001600160a01b0316145b612b78576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60026001541415612bd0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155612bdd6145d6565b612be56119b7565b601855600e54600090612c0090612bfa611844565b90614464565b90506016546004541015612c3657612c31612c2c612710610fba6017548561439d90919063ffffffff16565b61463a565b612e60565b600d546018541115612e6057612c4b8161495f565b50600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d6020811015612cbb57600080fd5b505190506000612cc9612699565b9050600080612ce9612710610fba6012548761439d90919063ffffffff16565b600e5410612d0e57612d07670de0b6b3a7640000610fba878661439d565b9050612d7a565b6000612d26670de0b6b3a7640000610fba888761439d565b9050612d43612710610fba6013548461439d90919063ffffffff16565b9150612d4f8183614464565b601e5490935015612d7857612d75612710610fba601e548661439d90919063ffffffff16565b92505b505b8015612d8957612d898161463a565b8115612e5b57600e54612d9c90836144c1565b600e55600754604080516340c10f1960e01b81523060048201526024810185905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612df357600080fd5b505af1158015612e07573d6000803e3d6000fd5b505050506040513d6020811015612e1d57600080fd5b5050604080514281526020810184905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b505050505b602354601854600d546001600160a01b039092169163048ebff39190612e84614035565b6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015612ec857600080fd5b505af1158015612edc573d6000803e3d6000fd5b50506001808055600454612ef49450925090506144c1565b600455600d54612f026119b7565b11612f2057612f1b612710610fba601454610fe5611844565b612f23565b60005b600555436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600a546001600160a01b031681565b60255481565b6002546001600160a01b03163314612fbf5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60075460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b505af1158015613030573d6000803e3d6000fd5b50505050505050565b600d5481565b60008061304a6119b7565b9050600d5481111561101e57600754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156130a157600080fd5b505afa1580156130b5573d6000803e3d6000fd5b505050506040513d60208110156130cb57600080fd5b5051905060006130d9611022565b9050801561101b5761199c81610fba84670de0b6b3a764000061439d565b6000806131026119b7565b9050600c54811161101e576000613117611844565b90506000613136612710610fba6015548561439d90919063ffffffff16565b90506000600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d60208110156131b257600080fd5b50519050808211156131f75760006131ca8383614464565b905060006131e4670de0b6b3a7640000610fba848961439d565b90506131f260055482614559565b965050505b5050505090565b60035481565b6002546001600160a01b0316331461324d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b600b54600754604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b1580156132f957600080fd5b505afa92505050801561331e57506040513d602081101561331957600080fd5b505160015b611a925760405162461bcd60e51b8152600401808060200182810382526036815260200180614f0a6036913960400191505060405180910390fd5b60125481565b6006818154811061336c57fe5b6000918252602090912001546001600160a01b0316905081565b60175481565b6002546001600160a01b031633146133d55760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60095460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b6002546001600160a01b0316331461347b5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6101f4811015801561348f57506127108111155b6134cf576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601255565b601f546001600160a01b031681565b60045481565b6002546001600160a01b031633146135325760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6078821115613588576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b6064811015801561359b57506103e88111155b6135d65760405162461bcd60e51b815260040180806020018281038252602e815260200180615178602e913960400191505060405180910390fd5b601691909155601755565b6002546000906001600160a01b0316331461362d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600f5460ff8416106136705760405162461bcd60e51b81526004018080602001828103825260298152602001806150b16029913960400191505060405180910390fd5b60ff8316156136a257600f6001840360ff168154811061368c57fe5b906000526020600020015482116136a257600080fd5b600f546000190160ff841610156136dc57600f8360010160ff16815481106136c657fe5b906000526020600020015482106136dc57600080fd5b81600f8460ff16815481106136ed57fe5b6000918252602090912001555060015b92915050565b6002546001600160a01b0316331461374c5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b601955565b600f818154811061375e57fe5b600091825260209091200154905081565b600c5481565b6010818154811061375e57fe5b6002546001600160a01b031633146137cb5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b601a55565b6002546001600160a01b031633146138195760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a5460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b60185481565b6002546001600160a01b031633146138c55760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080517fb3ab15fb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015610de457600080fd5b6002546000906001600160a01b031633146139785760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602655600190565b600254600160a01b900460ff16156139e0576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600780546001600160a01b03199081166001600160a01b038b8116919091179092556008805482168a8416179055600980548216898416179055600b80548216888416179055600a805482168784161790556003859055602380549091169184169190911790558051613a5a906006906020840190614d7d565b5067016345785d8a0000600c819055613a7b90606490610fba90606561439d565b600d556040805160c081018252600081526969e10de76676d080000060208201526a01a784379d99db42000000918101919091526a034f086f3b33b68400000060608201526a069e10de76676d0800000060808201526a108b2a2c2802909400000060a0820152613af090600f906006614dde565b506040805160c08101825261012c815260fa602082015260c89181019190915260966060820152607d6080820152606460a0820152613b33906010906006614e34565b506101906011819055612710601255610dac60135561012c601455610fa0601555606e601c908155611b58601d55601655601755600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015613bb257600080fd5b505afa158015613bc6573d6000803e3d6000fd5b505050506040513d6020811015613bdc57600080fd5b5051600e55662386f26fc100006024556096602655600280546001600160a01b03197fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a25050505050505050565b6002546001600160a01b03163314613cb65760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314613d215760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61546081565b6002546001600160a01b03163314613d925760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600c548110158015613dbe5750613dba6064610fba6078600c5461439d90919063ffffffff16565b8111155b613dfe576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600d55565b60195481565b6002546001600160a01b03163314613e525760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60095460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b158015610de457600080fd5b6002546001600160a01b03163314613ee95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6001600160a01b038416613f2d576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b610bb8831115613f73576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b038216613fb7576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115613ffd576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601f80546001600160a01b03199081166001600160a01b03968716179091556020939093556021805490931691909316179055602255565b600061405a61405161546060045461439d90919063ffffffff16565b600354906144c1565b905090565b601d5481565b601c5481565b6002546001600160a01b031633146140b45760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b606481101580156140c757506105dc8111155b614107576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b6002546000906001600160a01b031633146141585760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60105460ff84161061419b5760405162461bcd60e51b81526004018080602001828103825260298152602001806150b16029913960400191505060405180910390fd5b600a82101580156141ae57506103e88211155b6141ff576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b8160108460ff16815481106136ed57fe5b60115481565b60155481565b60265481565b6002546001600160a01b0316331461426b5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60075460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b158015610de457600080fd5b60145481565b60165481565b6002546001600160a01b0316331461430e5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080517f2ffaaa09000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b15801561437b57600080fd5b505af115801561438f573d6000803e3d6000fd5b505050505050565b60055481565b6000826143ac575060006136fd565b828202828482816143b957fe5b04146143f65760405162461bcd60e51b815260040180806020018281038252602181526020018061500f6021913960400191505060405180910390fd5b9392505050565b6000808211614453576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161445c57fe5b049392505050565b6000828211156144bb576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156143f6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b600081831061456857816143f6565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611ed79084906149c2565b600b60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561462657600080fd5b505af1925050508015614637575060015b50565b600754604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b15801561468e57600080fd5b505af11580156146a2573d6000803e3d6000fd5b505050506040513d60208110156146b857600080fd5b5050602054600090156147a3576146e0612710610fba6020548561439d90919063ffffffff16565b600754601f546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561473b57600080fd5b505af115801561474f573d6000803e3d6000fd5b505050506040513d602081101561476557600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b6022546000901561488c576147c9612710610fba6022548661439d90919063ffffffff16565b6007546021546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561482457600080fd5b505af1158015614838573d6000803e3d6000fd5b505050506040513d602081101561484e57600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b61489a81612bfa8585614464565b600a546007549194506148ba916001600160a01b03908116911685614a73565b600a54604080516397ffe1d760e01b81526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561490757600080fd5b505af115801561491b573d6000803e3d6000fd5b5050604080514281526020810187905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a1505050565b600f54600090600019015b600f8160ff168154811061497a57fe5b906000526020600020015483106149af5760108160ff168154811061499b57fe5b6000918252602090912001546011556149b8565b6000190161496a565b5050601154919050565b6060614a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b609092919063ffffffff16565b805190915015611ed757808060200190516020811015614a3657600080fd5b5051611ed75760405162461bcd60e51b815260040180806020018281038252602a8152602001806150fe602a913960400191505060405180910390fd5b6000614ad782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561246157600080fd5b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150614b5a9085906149c2565b50505050565b6060614b6f8484600085614b77565b949350505050565b606082471015614bb85760405162461bcd60e51b8152600401808060200182810382526026815260200180614f646026913960400191505060405180910390fd5b614bc185614cd3565b614c12576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614c515780518252601f199092019160209182019101614c32565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614cb3576040519150601f19603f3d011682016040523d82523d6000602084013e614cb8565b606091505b5091509150614cc8828286614cd9565b979650505050505050565b3b151590565b60608315614ce85750816143f6565b825115614cf85782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d42578181015183820152602001614d2a565b50505050905090810190601f168015614d6f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614dd2579160200282015b82811115614dd257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614d9d565b5061101e929150614e75565b828054828255906000526020600020908101928215614e28579160200282015b82811115614e2857825182906affffffffffffffffffffff16905591602001919060010190614dfe565b5061101e929150614e94565b828054828255906000526020600020908101928215614e28579160200282015b82811115614e28578251829061ffff16905591602001919060010190614e54565b5b8082111561101e5780546001600160a01b0319168155600101614e76565b5b8082111561101e5760008155600101614e9556fe54726561737572793a20736e6f775072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e7454726561737572793a206661696c656420746f20636f6e73756c7420536e6f772070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a206661696c656420746f20636f6e73756c7420534e4f572070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c64206578636565647320736e6f7750726963654365696c696e6754726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e54726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220b6c6b8b8398b14658ae7038e68a1e326f8480ab4fd8445a6aaadd1a5cf3dc6df64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106105ac5760003560e01c80637adbf973116102ed578063b3a110ae11610191578063c8f987f3116100ee578063dae5ca21116100a2578063f14698de1161007c578063f14698de14610d1b578063f8cd4d7214610d23578063fcb6f00814610d46576105ac565b8063dae5ca2114610ce5578063e8f8768c14610ced578063e90b245414610d13576105ac565b8063d4b14944116100d3578063d4b1494414610caf578063d98f249514610cd5578063da3ed41914610cdd576105ac565b8063c8f987f314610c8a578063cecce38e14610c92576105ac565b8063b8a878f911610145578063bcc81f191161012a578063bcc81f1914610c40578063c5967c2614610c7a578063c8412d0214610c82576105ac565b8063b8a878f914610c12578063ba9d8fc214610c1a576105ac565b8063b3ffc77711610176578063b3ffc77714610bc7578063b4d1d79514610bed578063b5a4590214610bf5576105ac565b8063b3a110ae14610abe578063b3ab15fb14610ba1576105ac565b806391bbfed51161024a578063a0487eea116101fe578063af0e872a116101d8578063af0e872a14610a73578063b06ce14a14610a7b578063b219ad7d14610aa1576105ac565b8063a0487eea14610a03578063a204452b14610a20578063a3ec30fe14610a3d576105ac565b806398b762a11161022f57806398b762a1146109c157806399820025146109de5780639cf74525146109fb576105ac565b806391bbfed514610978578063940e60641461099b576105ac565b8063874106cc116102a15780638c664db6116102865780638c664db61461094b5780638d934f7414610968578063900cf0cf14610970576105ac565b8063874106cc1461090d5780638c42e08914610915576105ac565b8063812ec15a116102d2578063812ec15a146108e057806381d11eaf146108e857806382cad838146108f0576105ac565b80637adbf973146108b25780637dc0d1d0146108d8576105ac565b806340af7ba511610454578063591663e1116103b1578063670e0cdd1161036557806372c054f91161033f57806372c054f91461089a578063766b5846146108a257806378e97925146108aa576105ac565b8063670e0cdd14610854578063692b6edf1461085c5780636ed435ad14610892576105ac565b80635a0fc79c116103965780635a0fc79c1461083c5780635b756179146108445780635e02c51e1461084c576105ac565b8063591663e11461081757806359bf5d3914610834576105ac565b806354575af41161040857806355ebdeef116103ed57806355ebdeef146107ff578063570ca7351461080757806357eaf54f1461080f576105ac565b806354575af4146107a657806354f04a11146107dc576105ac565b8063499f3f1911610439578063499f3f19146107795780634a5b94b8146107965780634b102fb01461079e576105ac565b806340af7ba51461073f57806347a0fd4d1461075c576105ac565b80631dfa243c1161050d578063381ce143116104c15780633e5f13d41161049b5780633e5f13d4146107095780633f07d76a146107115780634013a08e14610737576105ac565b8063381ce143146106dc578063392e53cd146106f95780633a2b962614610701576105ac565b806329ef1919116104f257806329ef1919146106c45780632e9c7b65146106cc578063367384ef146106d4576105ac565b80631dfa243c146106b457806322f832cd146106bc576105ac565b80630db7eb0b11610564578063154ec2db11610549578063154ec2db14610657578063158ef93e146106745780631cc9092a14610690576105ac565b80630db7eb0b1461062c578063118ebbf914610634576105ac565b806304e5c7b11161059557806304e5c7b1146105ea5780630b5bcec7146106075780630cf6017514610624576105ac565b806301a93783146105b157806303be7e76146105d0575b600080fd5b6105ce600480360360208110156105c757600080fd5b5035610d4e565b005b6105d8610dff565b60408051918252519081900360200190f35b6105ce6004803603602081101561060057600080fd5b5035610e05565b6105ce6004803603602081101561061d57600080fd5b5035610ed4565b6105d8610f70565b6105d8611022565b6105ce6004803603604081101561064a57600080fd5b50803590602001356110c4565b6105ce6004803603602081101561066d57600080fd5b5035611780565b61067c611825565b604080519115158252519081900360200190f35b610698611835565b604080516001600160a01b039092168252519081900360200190f35b6105d8611844565b6105d86119a5565b6105d86119ab565b6105d86119b1565b6105d86119b7565b61067c600480360360208110156106f257600080fd5b5035611aad565b61067c611b02565b610698611b12565b610698611b21565b6105ce6004803603602081101561072757600080fd5b50356001600160a01b0316611b30565b6105d8611b9b565b6105ce6004803603602081101561075557600080fd5b5035611ba1565b61067c6004803603602081101561077257600080fd5b5035611c46565b6105ce6004803603602081101561078f57600080fd5b5035611c9b565b6105d8611d38565b610698611d3e565b6105ce600480360360608110156107bc57600080fd5b506001600160a01b03813581169160208101359160409091013516611d4d565b6105ce600480360360408110156107f257600080fd5b5080359060200135611edc565b6105d8612684565b61069861268a565b6105d8612699565b6105ce6004803603602081101561082d57600080fd5b503561273e565b6105d86127e0565b6105d86127e6565b6105ce6127ec565b610698612f61565b6105d8612f70565b6105ce6004803603606081101561087257600080fd5b506001600160a01b03813581169160208101359160409091013516612f76565b6105d8613039565b6105d861303f565b6105d86130f7565b6105d86131fe565b6105ce600480360360208110156108c857600080fd5b50356001600160a01b0316613204565b61069861326f565b6105d861327e565b6105d8613359565b6106986004803603602081101561090657600080fd5b503561335f565b6105d8613386565b6105ce6004803603606081101561092b57600080fd5b506001600160a01b0381358116916020810135916040909101351661338c565b6105ce6004803603602081101561096157600080fd5b5035613432565b6106986134d4565b6105d86134e3565b6105ce6004803603604081101561098e57600080fd5b50803590602001356134e9565b61067c600480360360408110156109b157600080fd5b5060ff81351690602001356135e1565b6105ce600480360360208110156109d757600080fd5b5035613703565b6105d8600480360360208110156109f457600080fd5b5035613751565b6105d861376f565b6105d860048036036020811015610a1957600080fd5b5035613775565b6105ce60048036036020811015610a3657600080fd5b5035613782565b6105ce60048036036060811015610a5357600080fd5b506001600160a01b038135811691602081013591604090910135166137d0565b6105d8613876565b6105ce60048036036020811015610a9157600080fd5b50356001600160a01b031661387c565b61067c60048036036020811015610ab757600080fd5b503561392c565b6105ce6004803603610100811015610ad557600080fd5b6001600160a01b038235811692602081013582169260408201358316926060830135811692608081013582169260a08201359260c0830135169190810190610100810160e0820135640100000000811115610b2f57600080fd5b820183602082011115610b4157600080fd5b80359060200191846020830284011164010000000083111715610b6357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613981945050505050565b6105ce60048036036020811015610bb757600080fd5b50356001600160a01b0316613c6d565b6105ce60048036036020811015610bdd57600080fd5b50356001600160a01b0316613cd8565b6105d8613d43565b6105ce60048036036020811015610c0b57600080fd5b5035613d49565b6105d8613e03565b6105ce60048036036020811015610c3057600080fd5b50356001600160a01b0316613e09565b6105ce60048036036080811015610c5657600080fd5b506001600160a01b0381358116916020810135916040820135169060600135613ea0565b6105d8614035565b6105d861405f565b6105d8614065565b6105ce60048036036020811015610ca857600080fd5b503561406b565b61067c60048036036040811015610cc557600080fd5b5060ff813516906020013561410c565b6105d8614210565b6105d8614216565b6105d861421c565b6105ce60048036036020811015610d0357600080fd5b50356001600160a01b0316614222565b6105d86142b9565b6105d86142bf565b6105ce60048036036040811015610d3957600080fd5b50803590602001356142c5565b6105d8614397565b6002546001600160a01b03163314610d975760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015610de457600080fd5b505af1158015610df8573d6000803e3d6000fd5b5050505050565b60225481565b6002546001600160a01b03163314610e4e5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600d54811015610e8f5760405162461bcd60e51b815260040180806020018281038252602a815260200180614fc0602a913960400191505060405180910390fd5b6096811115610ecf5760405162461bcd60e51b8152600401808060200182810382526024815260200180614f406024913960400191505060405180910390fd5b601c55565b6002546001600160a01b03163314610f1d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a8110158015610f3057506103e88111155b610f6b5760405162461bcd60e51b81526004018080602001828103825260288152602001806150896028913960400191505060405180910390fd5b601155565b600080610f7b6119b7565b9050600c54811161101e57601b54610f9757600c54915061101e565b6000610fc082610fba670de0b6b3a7640000600c5461439d90919063ffffffff16565b906143fd565b90506000610feb612710610fba601b54610fe5600c548761446490919063ffffffff16565b9061439d565b600c54909150610ffb90826144c1565b93506000601954118015611010575060195484115b1561101b5760195493505b50505b5090565b60008061102d6119b7565b9050600d5481111561101e5760006110576064610fba601c54600c5461439d90919063ffffffff16565b90508082106110b9576000611083612710610fba601d54610fe5600c548861446490919063ffffffff16565b600c5490915061109390826144c1565b93506000601a541180156110a85750601a5484115b156110b357601a5493505b506110bf565b600c5492505b505090565b6110cc61451b565b156111085760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b61111061453a565b1561114c5760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b6003544210156111a3576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d602081101561121157600080fd5b50516001600160a01b031614801561129f57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b50516001600160a01b0316145b801561132157506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156112ea57600080fd5b505afa1580156112fe573d6000803e3d6000fd5b505050506040513d602081101561131457600080fd5b50516001600160a01b0316145b80156113a35750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d602081101561139657600080fd5b50516001600160a01b0316145b6113f4576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6002600154141561144c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558161148d5760405162461bcd60e51b815260040180806020018281038252602e815260200180614edc602e913960400191505060405180910390fd5b60006114976119b7565b90508181146114ed576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20536e6f77207072696365206d6f766564000000000000604482015290519081900360640190fd5b600d54811161152d5760405162461bcd60e51b8152600401808060200182810382526032815260200180614eaa6032913960400191505060405180910390fd5b6000611537611022565b90506000811161158e576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b60006115a6670de0b6b3a7640000610fba878561439d565b600754604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d602081101561162057600080fd5b5051101561165f5760405162461bcd60e51b8152600401808060200182810382526025815260200180614fea6025913960400191505060405180910390fd5b61167761166e600e5483614559565b600e5490614464565b600e556008546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b50506007546116fd92506001600160a01b03169050338361456f565b6117056145d6565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050600180805543600090815260208181526040808320328452909152808220805460ff199081168517909155338352912080549091169091179055505050565b6002546001600160a01b031633146117c95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b614e20811115611820576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601b55565b600254600160a01b900460ff1681565b6009546001600160a01b031681565b600754604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d60208110156118b757600080fd5b505190506000805b60065460ff8216101561199157611987846001600160a01b03166370a0823160068460ff16815481106118ee57fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561195457600080fd5b505afa158015611968573d6000803e3d6000fd5b505050506040513d602081101561197e57600080fd5b505183906144c1565b91506001016118bf565b5061199c8282614464565b93505050505b90565b60135481565b601b5481565b601a5481565b600b54600754604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015611a3257600080fd5b505afa925050508015611a5757506040513d6020811015611a5257600080fd5b505160015b611a925760405162461bcd60e51b8152600401808060200182810382526036815260200180614f8a6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff1690506119a2565b6002546000906001600160a01b03163314611af95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602555600190565b600254600160a01b900460ff1690565b6007546001600160a01b031681565b6023546001600160a01b031681565b6002546001600160a01b03163314611b795760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b602380546001600160a01b0319166001600160a01b0392909216919091179055565b601e5481565b6002546001600160a01b03163314611bea5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b614e20811115611c41576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601d55565b6002546000906001600160a01b03163314611c925760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602455600190565b6002546001600160a01b03163314611ce45760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6127108110158015611cf85750614e208111155b611d335760405162461bcd60e51b81526004018080602001828103825260298152602001806150606029913960400191505060405180910390fd5b601e55565b60245481565b6008546001600160a01b031681565b6002546001600160a01b03163314611d965760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6007546001600160a01b0384811691161415611dfb576040805162461bcd60e51b8152602060048083019190915260248201527f736e6f7700000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611e60576040805162461bcd60e51b8152602060048083019190915260248201527f626f6e6400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6009546001600160a01b0384811691161415611ec3576040805162461bcd60e51b815260206004820152600560248201527f7368617265000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611ed76001600160a01b038416828461456f565b505050565b611ee461451b565b15611f205760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b611f2861453a565b15611f645760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b600354421015611fbb576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611fff57600080fd5b505afa158015612013573d6000803e3d6000fd5b505050506040513d602081101561202957600080fd5b50516001600160a01b03161480156120b757506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d60208110156120aa57600080fd5b50516001600160a01b0316145b801561213957506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561210257600080fd5b505afa158015612116573d6000803e3d6000fd5b505050506040513d602081101561212c57600080fd5b50516001600160a01b0316145b80156121bb5750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561218457600080fd5b505afa158015612198573d6000803e3d6000fd5b505050506040513d60208110156121ae57600080fd5b50516001600160a01b0316145b61220c576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60026001541415612264576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155816122a55760405162461bcd60e51b81526004018080602001828103825260308152602001806150306030913960400191505060405180910390fd5b60006122af6119b7565b9050818114612305576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20536e6f77207072696365206d6f766564000000000000604482015290519081900360640190fd5b600c5481106123455760405162461bcd60e51b8152600401808060200182810382526032815260200180614eaa6032913960400191505060405180910390fd5b6005548311156123865760405162461bcd60e51b815260040180806020018281038252602a81526020018061514e602a913960400191505060405180910390fd5b6000612390610f70565b9050600081116123e7576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b60006123ff670de0b6b3a7640000610fba878561439d565b9050600061240b611844565b9050600061249383600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561246157600080fd5b505afa158015612475573d6000803e3d6000fd5b505050506040513d602081101561248b57600080fd5b5051906144c1565b90506124b0612710610fba6015548561439d90919063ffffffff16565b811115612504576040805162461bcd60e51b815260206004820152601360248201527f6f766572206d6178206465627420726174696f00000000000000000000000000604482015290519081900360640190fd5b6007546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b5050600854604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156125c357600080fd5b505af11580156125d7573d6000803e3d6000fd5b505050506040513d60208110156125ed57600080fd5b50506005546125fc9088614464565b6005556126076145d6565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050600180805543600090815260208181526040808320328452909152808220805460ff1990811685179091553383529120805490911690911790555050505050565b60205481565b6002546001600160a01b031681565b6000806126a46119b7565b905060006126bd600c548361446490919063ffffffff16565b905060006126dc655af3107a400060115461439d90919063ffffffff16565b90506025546000146126f55760255493505050506119a2565b6026541561271b57612718612710610fba6026548561439d90919063ffffffff16565b91505b81602454111561272b5760245491505b80821115612737578091505b5091505090565b6002546001600160a01b031633146127875760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6103e8811015801561279b57506127108111155b6127db576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601555565b600e5490565b600e5481565b6127f461451b565b156128305760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b61283861453a565b156128745760405162461bcd60e51b81526004018080602001828103825260268152602001806151286026913960400191505060405180910390fd5b6003544210156128cb576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6128d3614035565b421015612927576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561296b57600080fd5b505afa15801561297f573d6000803e3d6000fd5b505050506040513d602081101561299557600080fd5b50516001600160a01b0316148015612a2357506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156129ec57600080fd5b505afa158015612a00573d6000803e3d6000fd5b505050506040513d6020811015612a1657600080fd5b50516001600160a01b0316145b8015612aa557506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612a6e57600080fd5b505afa158015612a82573d6000803e3d6000fd5b505050506040513d6020811015612a9857600080fd5b50516001600160a01b0316145b8015612b275750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612af057600080fd5b505afa158015612b04573d6000803e3d6000fd5b505050506040513d6020811015612b1a57600080fd5b50516001600160a01b0316145b612b78576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60026001541415612bd0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155612bdd6145d6565b612be56119b7565b601855600e54600090612c0090612bfa611844565b90614464565b90506016546004541015612c3657612c31612c2c612710610fba6017548561439d90919063ffffffff16565b61463a565b612e60565b600d546018541115612e6057612c4b8161495f565b50600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d6020811015612cbb57600080fd5b505190506000612cc9612699565b9050600080612ce9612710610fba6012548761439d90919063ffffffff16565b600e5410612d0e57612d07670de0b6b3a7640000610fba878661439d565b9050612d7a565b6000612d26670de0b6b3a7640000610fba888761439d565b9050612d43612710610fba6013548461439d90919063ffffffff16565b9150612d4f8183614464565b601e5490935015612d7857612d75612710610fba601e548661439d90919063ffffffff16565b92505b505b8015612d8957612d898161463a565b8115612e5b57600e54612d9c90836144c1565b600e55600754604080516340c10f1960e01b81523060048201526024810185905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612df357600080fd5b505af1158015612e07573d6000803e3d6000fd5b505050506040513d6020811015612e1d57600080fd5b5050604080514281526020810184905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b505050505b602354601854600d546001600160a01b039092169163048ebff39190612e84614035565b6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015612ec857600080fd5b505af1158015612edc573d6000803e3d6000fd5b50506001808055600454612ef49450925090506144c1565b600455600d54612f026119b7565b11612f2057612f1b612710610fba601454610fe5611844565b612f23565b60005b600555436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600a546001600160a01b031681565b60255481565b6002546001600160a01b03163314612fbf5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60075460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b505af1158015613030573d6000803e3d6000fd5b50505050505050565b600d5481565b60008061304a6119b7565b9050600d5481111561101e57600754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156130a157600080fd5b505afa1580156130b5573d6000803e3d6000fd5b505050506040513d60208110156130cb57600080fd5b5051905060006130d9611022565b9050801561101b5761199c81610fba84670de0b6b3a764000061439d565b6000806131026119b7565b9050600c54811161101e576000613117611844565b90506000613136612710610fba6015548561439d90919063ffffffff16565b90506000600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d60208110156131b257600080fd5b50519050808211156131f75760006131ca8383614464565b905060006131e4670de0b6b3a7640000610fba848961439d565b90506131f260055482614559565b965050505b5050505090565b60035481565b6002546001600160a01b0316331461324d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b600b54600754604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b1580156132f957600080fd5b505afa92505050801561331e57506040513d602081101561331957600080fd5b505160015b611a925760405162461bcd60e51b8152600401808060200182810382526036815260200180614f0a6036913960400191505060405180910390fd5b60125481565b6006818154811061336c57fe5b6000918252602090912001546001600160a01b0316905081565b60175481565b6002546001600160a01b031633146133d55760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60095460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b6002546001600160a01b0316331461347b5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6101f4811015801561348f57506127108111155b6134cf576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601255565b601f546001600160a01b031681565b60045481565b6002546001600160a01b031633146135325760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6078821115613588576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b6064811015801561359b57506103e88111155b6135d65760405162461bcd60e51b815260040180806020018281038252602e815260200180615178602e913960400191505060405180910390fd5b601691909155601755565b6002546000906001600160a01b0316331461362d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600f5460ff8416106136705760405162461bcd60e51b81526004018080602001828103825260298152602001806150b16029913960400191505060405180910390fd5b60ff8316156136a257600f6001840360ff168154811061368c57fe5b906000526020600020015482116136a257600080fd5b600f546000190160ff841610156136dc57600f8360010160ff16815481106136c657fe5b906000526020600020015482106136dc57600080fd5b81600f8460ff16815481106136ed57fe5b6000918252602090912001555060015b92915050565b6002546001600160a01b0316331461374c5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b601955565b600f818154811061375e57fe5b600091825260209091200154905081565b600c5481565b6010818154811061375e57fe5b6002546001600160a01b031633146137cb5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b601a55565b6002546001600160a01b031633146138195760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a5460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561301c57600080fd5b60185481565b6002546001600160a01b031633146138c55760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080517fb3ab15fb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015610de457600080fd5b6002546000906001600160a01b031633146139785760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b50602655600190565b600254600160a01b900460ff16156139e0576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600780546001600160a01b03199081166001600160a01b038b8116919091179092556008805482168a8416179055600980548216898416179055600b80548216888416179055600a805482168784161790556003859055602380549091169184169190911790558051613a5a906006906020840190614d7d565b5067016345785d8a0000600c819055613a7b90606490610fba90606561439d565b600d556040805160c081018252600081526969e10de76676d080000060208201526a01a784379d99db42000000918101919091526a034f086f3b33b68400000060608201526a069e10de76676d0800000060808201526a108b2a2c2802909400000060a0820152613af090600f906006614dde565b506040805160c08101825261012c815260fa602082015260c89181019190915260966060820152607d6080820152606460a0820152613b33906010906006614e34565b506101906011819055612710601255610dac60135561012c601455610fa0601555606e601c908155611b58601d55601655601755600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015613bb257600080fd5b505afa158015613bc6573d6000803e3d6000fd5b505050506040513d6020811015613bdc57600080fd5b5051600e55662386f26fc100006024556096602655600280546001600160a01b03197fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a25050505050505050565b6002546001600160a01b03163314613cb65760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314613d215760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61546081565b6002546001600160a01b03163314613d925760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600c548110158015613dbe5750613dba6064610fba6078600c5461439d90919063ffffffff16565b8111155b613dfe576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600d55565b60195481565b6002546001600160a01b03163314613e525760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60095460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b158015610de457600080fd5b6002546001600160a01b03163314613ee95760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b6001600160a01b038416613f2d576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b610bb8831115613f73576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b038216613fb7576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115613ffd576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601f80546001600160a01b03199081166001600160a01b03968716179091556020939093556021805490931691909316179055602255565b600061405a61405161546060045461439d90919063ffffffff16565b600354906144c1565b905090565b601d5481565b601c5481565b6002546001600160a01b031633146140b45760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b606481101580156140c757506105dc8111155b614107576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b6002546000906001600160a01b031633146141585760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60105460ff84161061419b5760405162461bcd60e51b81526004018080602001828103825260298152602001806150b16029913960400191505060405180910390fd5b600a82101580156141ae57506103e88211155b6141ff576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b8160108460ff16815481106136ed57fe5b60115481565b60155481565b60265481565b6002546001600160a01b0316331461426b5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b60075460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b158015610de457600080fd5b60145481565b60165481565b6002546001600160a01b0316331461430e5760405162461bcd60e51b81526004018080602001828103825260248152602001806150da6024913960400191505060405180910390fd5b600a54604080517f2ffaaa09000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b15801561437b57600080fd5b505af115801561438f573d6000803e3d6000fd5b505050505050565b60055481565b6000826143ac575060006136fd565b828202828482816143b957fe5b04146143f65760405162461bcd60e51b815260040180806020018281038252602181526020018061500f6021913960400191505060405180910390fd5b9392505050565b6000808211614453576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161445c57fe5b049392505050565b6000828211156144bb576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156143f6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b600081831061456857816143f6565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611ed79084906149c2565b600b60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561462657600080fd5b505af1925050508015614637575060015b50565b600754604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b15801561468e57600080fd5b505af11580156146a2573d6000803e3d6000fd5b505050506040513d60208110156146b857600080fd5b5050602054600090156147a3576146e0612710610fba6020548561439d90919063ffffffff16565b600754601f546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561473b57600080fd5b505af115801561474f573d6000803e3d6000fd5b505050506040513d602081101561476557600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b6022546000901561488c576147c9612710610fba6022548661439d90919063ffffffff16565b6007546021546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561482457600080fd5b505af1158015614838573d6000803e3d6000fd5b505050506040513d602081101561484e57600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b61489a81612bfa8585614464565b600a546007549194506148ba916001600160a01b03908116911685614a73565b600a54604080516397ffe1d760e01b81526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561490757600080fd5b505af115801561491b573d6000803e3d6000fd5b5050604080514281526020810187905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a1505050565b600f54600090600019015b600f8160ff168154811061497a57fe5b906000526020600020015483106149af5760108160ff168154811061499b57fe5b6000918252602090912001546011556149b8565b6000190161496a565b5050601154919050565b6060614a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b609092919063ffffffff16565b805190915015611ed757808060200190516020811015614a3657600080fd5b5051611ed75760405162461bcd60e51b815260040180806020018281038252602a8152602001806150fe602a913960400191505060405180910390fd5b6000614ad782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561246157600080fd5b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150614b5a9085906149c2565b50505050565b6060614b6f8484600085614b77565b949350505050565b606082471015614bb85760405162461bcd60e51b8152600401808060200182810382526026815260200180614f646026913960400191505060405180910390fd5b614bc185614cd3565b614c12576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614c515780518252601f199092019160209182019101614c32565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614cb3576040519150601f19603f3d011682016040523d82523d6000602084013e614cb8565b606091505b5091509150614cc8828286614cd9565b979650505050505050565b3b151590565b60608315614ce85750816143f6565b825115614cf85782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d42578181015183820152602001614d2a565b50505050905090810190601f168015614d6f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614dd2579160200282015b82811115614dd257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614d9d565b5061101e929150614e75565b828054828255906000526020600020908101928215614e28579160200282015b82811115614e2857825182906affffffffffffffffffffff16905591602001919060010190614dfe565b5061101e929150614e94565b828054828255906000526020600020908101928215614e28579160200282015b82811115614e28578251829061ffff16905591602001919060010190614e54565b5b8082111561101e5780546001600160a01b0319168155600101614e76565b5b8082111561101e5760008155600101614e9556fe54726561737572793a20736e6f775072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e7454726561737572793a206661696c656420746f20636f6e73756c7420536e6f772070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a206661696c656420746f20636f6e73756c7420534e4f572070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c64206578636565647320736e6f7750726963654365696c696e6754726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e54726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220b6c6b8b8398b14658ae7038e68a1e326f8480ab4fd8445a6aaadd1a5cf3dc6df64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "boardroomSetOperator(address)": {
        "notice": "Boardroom governance*"
      },
      "setSnowTaxOffice(address)": {
        "notice": "Snow token contract governance*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15469,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1720,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10872,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10875,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 10877,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "startTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10880,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epoch",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10883,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epochSupplyContractionLeft",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10886,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "excludedFromTotalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10888,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "snow",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10890,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "sBond",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10892,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "glcr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10894,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "boardroom",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10896,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "oracle",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10898,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "snowPriceOne",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10900,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "snowPriceCeiling",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10902,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageSaved",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10905,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "supplyTiers",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10908,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxExpansionTiers",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10910,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyExpansionPercent",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 10912,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondDepletionFloorPercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 10914,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageExpansionFloorPercent",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 10916,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyContractionPercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10918,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDebtRatioPercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 10920,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapEpochs",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10922,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapSupplyExpansionPercent",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 10924,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "previousEpochSnowPrice",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 10926,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDiscountRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 10928,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxPremiumRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 10930,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "discountPercent",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 10932,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumThreshold",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 10934,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumPercent",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 10936,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "mintingFactorForPayingDebt",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 10938,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFund",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 10940,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFundSharedPercent",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 10942,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFund",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 10944,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundSharedPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 10946,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "taxOffice",
        "offset": 0,
        "slot": "35",
        "type": "t_address"
      },
      {
        "astId": 10948,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "minExpansion",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 10950,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "fixedExpansion",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 10952,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "expansionFactor",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}